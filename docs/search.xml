<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Express4.X</title>
    <url>/posts/cb0e.html</url>
    <content><![CDATA[<h1 id="Nodejs学习笔记"><a href="#Nodejs学习笔记" class="headerlink" title="Nodejs学习笔记"></a>Nodejs学习笔记</h1><h2 id="第七章-Express4-X"><a href="#第七章-Express4-X" class="headerlink" title="第七章 Express4.X"></a>第七章 Express4.X</h2><h3 id="Express简介"><a href="#Express简介" class="headerlink" title="Express简介"></a>Express简介</h3><p>Express是简介灵活的node.jsWeb应用框架，提供强大的特性帮助创建各种web应用。Express不对node.js已有的特性进行二次抽象，只在它基础上拓展了web应用所需的功能。</p>
<p>Express中主要学习：路由、中间件、模板引擎、其中路由和模板引擎的概念与其他语言一致，比如PHP</p>
<h3 id="安装express"><a href="#安装express" class="headerlink" title="安装express"></a>安装express</h3><pre class=" language-shell"><code class="language-shell">#依赖安装express
npm install express --save</code></pre>
<h3 id="安装EXpress应用程序生成器"><a href="#安装EXpress应用程序生成器" class="headerlink" title="安装EXpress应用程序生成器"></a>安装EXpress应用程序生成器</h3><p>通过应用程序生成器可以快速创建一个应用的骨架</p>
<pre class=" language-shell"><code class="language-shell">#安装生成器，如果之前全局安装过，之后可以不用安装
npm install -g express-generator
#创建项目
express --view=ejs projectName   #projectName是项目名 模板引擎为ejs
#创建项目之后进入到项目文件
cd projectName
#将项目文件夹下package.json里的依赖包全部安装
npm i
#启动项目，默认是3000端口
npm start</code></pre>
<h3 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h3><ul>
<li><p>bin/www文件：启动js，15行左右可以修改服务端口号。</p>
</li>
<li><p>node_modules目录：存放所有局部安装的包。</p>
</li>
<li><p>public目录：存放静态文件，如css、image、js文件等。</p>
</li>
<li><p>routes目录：存放路由文件。</p>
</li>
<li><p>views目录：存放页面</p>
</li>
<li><p>app.js文件：项目主文件</p>
</li>
<li><p>package.json文件：npm配置文件</p>
<p>npm i：启动该配置文件中dependencies下的依赖包。</p>
<p>npm start：就是运行该配置文件中scripts下面的start命令。</p>
</li>
</ul>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在app.js文件引进路由并开启路由</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引进路由</span>
<span class="token keyword">var</span> listRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被引入的文件后缀.js可省略</span>
<span class="token comment" spellcheck="true">//开启路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>listRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在routes文件夹下写路由文件（js文件）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//get方式请求</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人访问list！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//req.query属性以对象存放了所有get请求的参数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//给客户端响应</span>
    <span class="token comment" spellcheck="true">// res.send('Welcome list!');</span>

    <span class="token comment" spellcheck="true">//render()渲染页面，并返回给客户端</span>
    <span class="token comment" spellcheck="true">//第一个参数是页面的名字，页面放在views文件夹下</span>
    <span class="token comment" spellcheck="true">//第二个参数是传递给模板引擎的</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后缀可以省略</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//post方式请求</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//req.body属性存放了post数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//动态路由,加上“:”,就成了动态路由，并且通过req.params拿到该数据</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:name/:age'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'这是动态路由！'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//除了动态路由，地址栏还可以使用正则表达式</span>
<span class="token comment" spellcheck="true">//abc+表示ab开始后面至少一个c</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/abc+'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'这是正则！'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//访问list下的product网页</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/product'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人访问list/product!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Welcome list/product!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//定义模块</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="中间件简介"><a href="#中间件简介" class="headerlink" title="中间件简介"></a>中间件简介</h4><p>Express是一个自身功能极简，完全是由路由和中间件构成一个web开发框架：从本质上来说，一个Express应用就是在调用各种中间件，路由也是特殊的中间件。</p>
<p>中间件是可以访问请求对象（req）、响应对象（res）以及next应用程序请求-响应周期中的函数。使用app.use()来使用/定义中间件。</p>
<p>本质上，中间件就是在请求后，响应前要执行的函数，中间件就是函数使用app.use()方法，可以给express应用添加任意中间件功能函数。</p>
<h4 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h4><p>从Express4.X开始，express不再依赖Content，这意味着express将大多数内置中间件都剥离出去了，比如之前的body-parser，cookie-parser等中间件，现使用body-parser，cookie-parser的方法是第三方中间件。</p>
<p>Express4.X内置的中间件是express.static静态资源挂载，Express4.16后又新增了express.json和express.urlencoded，分别用来解析req传入的json格式、urlencoded格式数据。</p>
<h5 id="express-static的使用"><a href="#express-static的使用" class="headerlink" title="express.static的使用"></a>express.static的使用</h5><p>静态资源指的就是存在于服务器端的文件，例如html/css/js/图片等文件都是静态资源文件，浏览器需要访问，服务器才会返回这些静态资源文件的内容。</p>
<p>express.static()封装了路径和读取/响应文件的方法内，我们可以把某个文件夹暴露给浏览器直接进行路径的访问即可。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从public下索引前端访问的资源路径</span></code></pre>
<p>这里有个<strong>ejs引擎中的资源路径问题</strong>：ejs项目中，因为有上面这条配置，项目中所有的静态资源引用路径都可以认为ejs文件和静态资源文件在同一个目录下。</p>
<h5 id="app-use-虚拟路径使用"><a href="#app-use-虚拟路径使用" class="headerlink" title="app.use()虚拟路径使用"></a>app.use()虚拟路径使用</h5><p>第一个参数为虚拟路径（可以理解成浏览器访问路径去掉主目录后的路径），前端必须先访问命中此虚拟路径，才能用接下来的路径匹配后面的路由路径。如果省略第一个参数，则会过滤所有的请求，并且回调函数中的url是（去掉访问路径主目录后的）全地址，因为没有被分组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>routerList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问list目录</span></code></pre>
<h5 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h5><p>所谓中间件其实就是一个方法，只需要遵循MiddleWare Funtion就可以了。它有四个参数：</p>
<ul>
<li>第一个参数接收上一个中间件通过next()传递的实参。</li>
<li>第二个参数为请求对象，包含了浏览器请求的信息。</li>
<li>第三个参数为响应对象，包含了服务器响应的信息。</li>
<li>第四个参数为next，方法next()调用下一个中间件函数执行，可以传递参数给下一个中间件。</li>
</ul>
<p>中间件的执行顺序是从上往下执行的，需要注意调用次序。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>app.js</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> createError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//引进路由</span>
<span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> usersRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> listRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//引入自定义中间件</span>
<span class="token keyword">var</span> customMid <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./customMiddleWare/customMid1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// view engine setup</span>
<span class="token comment" spellcheck="true">//设置页面的ejs模板引擎</span>
app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置了静态页面存放的地址（views）</span>
app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面引擎是 ejs</span>

<span class="token comment" spellcheck="true">//中间件</span>
<span class="token comment" spellcheck="true">//第一个参数：url</span>
<span class="token comment" spellcheck="true">//如果省略第一个参数，则会过滤所有的请求。并且回调函数中的url是全地址，因为没有被分组。</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印日志</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//json序列化客户端传入的数据参数</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//encoded</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cookie处理</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回静态资源，如果是请求静态文件，则返回，并且结束响应。如果不是请求静态文件，则继续往下匹配路由。</span>


<span class="token comment" spellcheck="true">//自定义一个中间件</span>
<span class="token comment" spellcheck="true">// app.use('/list',(req,res,next)=>{</span>
<span class="token comment" spellcheck="true">//   console.log('This is a custom middleware!');</span>
<span class="token comment" spellcheck="true">//   console.log(req.url);</span>
<span class="token comment" spellcheck="true">//   if(req.url === '/'){</span>
<span class="token comment" spellcheck="true">//     res.send('你的访问被拦截，无法访问list！');</span>
<span class="token comment" spellcheck="true">//   }else{</span>
<span class="token comment" spellcheck="true">//     next();</span>
<span class="token comment" spellcheck="true">//   }</span>
<span class="token comment" spellcheck="true">//   // next();</span>
<span class="token comment" spellcheck="true">// })</span>
 app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>customMid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将自定义的中间件通过模块引入</span>

<span class="token comment" spellcheck="true">//中间价传值：从上一个中间件next()的参数传值给下一个中间件</span>
<span class="token comment" spellcheck="true">//回调函数参数变为四个，第一个参数接收上一个中间件传递的实参</span>
<span class="token comment" spellcheck="true">// app.use('/list',(arg,req,res,next)=>{</span>
<span class="token comment" spellcheck="true">//   console.log(arg);</span>
<span class="token comment" spellcheck="true">//   next();</span>
<span class="token comment" spellcheck="true">// })</span>

<span class="token comment" spellcheck="true">//启用路由，第一个参数匹配地址的第一段</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> usersRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span>listRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// catch 404 and forward to error handler</span>
<span class="token comment" spellcheck="true">//创建错误</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// error handler</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// set locals, only providing error in development</span>
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>message <span class="token operator">=</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>error <span class="token operator">=</span> req<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'development'</span> <span class="token operator">?</span> err <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// render the error page</span>
  <span class="token comment" spellcheck="true">//返回错误页面</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app<span class="token punctuation">;</span></code></pre>
<p>自定义中间件customMid</p>
<pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is a custom middleware!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你的访问被拦截，无法访问list！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'这是上一个中间件返回的值！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// next();</span>
 <span class="token punctuation">}</span>

 module<span class="token punctuation">.</span>exports <span class="token operator">=</span> fn<span class="token punctuation">;</span></code></pre>
<p>访问：<a href="http://localhost:3000/list%EF%BC%8C%E4%BC%9A%E6%98%BE%E7%A4%BA%EF%BC%9A">http://localhost:3000/list，会显示：</a> 你的访问被拦截，无法访问list！ </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Express4.X</tag>
      </tags>
  </entry>
  <entry>
    <title>Fabric.js中文文档</title>
    <url>/posts/6882.html</url>
    <content><![CDATA[<h1 id="Fabric-js中文文档"><a href="#Fabric-js中文文档" class="headerlink" title="Fabric.js中文文档"></a>Fabric.js中文文档</h1><p>说明：</p>
<p>1、本系列如果有两个超链接，则第一个是官方文档链接，第二个是中文文档链接，用<code>/</code>分隔，若不存在第二个链接或第二个链接无法跳转则代表没有或还未完成。</p>
<p>2、本系列大部分代码demo都是参考官方文档自己实践而成，有些地方与官方文档不一样会有说明，也有少部分没有亲自实现直接使用了官网文档的代码。</p>
<p>3、本系列代码使用vue语法，每篇文章的第一个代码片段会有标签和样式部分，其他代码无特殊情况只放部分mounted(){}中的代码或与上文没有重复的核心代码。</p>
<p>4、本页仅是导航页，所有内容都在<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki">GitHub/wiki</a>，更多参考：<a href="https://github.com/eternitywith/fabric.js-docs-cn">GitHub</a>、<a href="https://gitee.com/eternitywith/fabric.js-docs-cn">Gitee</a>、<a href="https://blog.csdn.net/qq_43759079/article/details/115356559">CSDN</a></p>
<h2 id="Vue中使用fabric-js"><a href="#Vue中使用fabric-js" class="headerlink" title="Vue中使用fabric.js"></a>Vue中使用fabric.js</h2><p>方法一：<br>先安装fabricjs</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i fabric --save</code></pre>
<p>在main.js中使用</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> fabric <span class="token keyword">from</span> <span class="token string">"fabric"</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>fabric<span class="token punctuation">)</span></code></pre>
<p>如果方法一无效可以使用方法二⬇️</p>
<p>方法二：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#需要先安装canvas</span>
<span class="token function">npm</span> i canvas --save
<span class="token comment" spellcheck="true">#安装fabricjs</span>
<span class="token function">npm</span> i fabric --save</code></pre>
<p>在需要使用的页面引入</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fabric <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"fabric"</span><span class="token punctuation">;</span></code></pre>
<h2 id="官方导航"><a href="#官方导航" class="headerlink" title="官方导航"></a>官方导航</h2><ul>
<li><a href="http://fabricjs.com/">Home</a></li>
<li><a href="http://fabricjs.com/demos">Demos</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/%E6%BC%94%E7%A4%BA%E6%A1%88%E4%BE%8B">演示demos</a></li>
<li><a href="http://fabricjs.com/articles">Tutorial</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/%E6%95%99%E7%A8%8B">教程</a></li>
<li><a href="http://fabricjs.com/docs">Docs</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/%E6%96%87%E6%A1%A3">API文档</a></li>
<li><a href="http://fabricjs.com/build">Custom Build</a></li>
<li><a href="http://fabricjs.com/help">Support</a></li>
<li><a href="http://fabricjs.com/test">Tests/Benchmarks</a></li>
<li><a href="http://fabricjs.com/team">Team</a></li>
<li><a href="https://twitter.com/fabricjs">Follow @fabricjs</a></li>
</ul>
<h2 id="General-Support-普通帮助"><a href="#General-Support-普通帮助" class="headerlink" title="General Support(普通帮助)"></a>General Support(普通帮助)</h2><ul>
<li><a href="http://fabricjs.com/fabric-gotchas">Fabric Gotchas</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric-%E7%BC%BA%E9%99%B7">Fabric 缺陷</a>-使用Fabric.js时最常见的问题的答案</li>
</ul>
<h2 id="Upgrade-Resources-升级资源"><a href="#Upgrade-Resources-升级资源" class="headerlink" title="Upgrade Resources(升级资源)"></a>Upgrade Resources(升级资源)</h2><ul>
<li><a href="http://fabricjs.com/upgrade-guide">Upgrade Guide</a>(升级指南)-每个主要Fabric.js版本中的主要更改的摘要</li>
<li><a href="http://fabricjs.com/v4-breaking-changes">v4.0 Breaking Changes</a>(v4.0重大更改)-Fabric.js v.4x中重大更改的指南</li>
<li><a href="http://fabricjs.com/changelog">Changelog v2.x and up</a>(Changelog v2.x及更高版本)-Fabric.js当前版本亮点</li>
<li><a href="http://fabricjs.com/changes-introduction">Fabric.js 2.0 Changes</a>(Fabric.js 2.0更改)-Fabric.js 2.0版中的更改的基本摘要</li>
<li><a href="http://fabricjs.com/v2-breaking-changes">v2.0 Breaking Change Guide Part 1</a>(v2.0重大更改指南第1部分)-第1部分，包括用于处理来自先前Fabric.js版本的JSON的示例代码</li>
<li><a href="http://fabricjs.com/v2-breaking-changes-2">v2.0 Breaking Change Guide Part 2</a>(v2.0重大更改指南第2部分)-v2.0的第2部分重大更改</li>
<li><a href="http://fabricjs.com/fabric-changelog-old">Changelog v1.x</a>(更改日志 v1.x) -Fabric.js的早期版本的发行要点（最高v1.7.23）</li>
</ul>
<h2 id="Introduction-to-FabricJS-FabricJS简介"><a href="#Introduction-to-FabricJS-FabricJS简介" class="headerlink" title="Introduction to FabricJS(FabricJS简介)"></a>Introduction to FabricJS(FabricJS简介)</h2><p>帮助您开始使用Fabric.js的基本指南</p>
<ul>
<li><a href="http://fabricjs.com/controls-api">Introduction to custom controls for Fabric 4.x</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric-4.x%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E7%AE%80%E4%BB%8B">Fabric 4.x的自定义控件简介</a></li>
<li><a href="http://fabricjs.com/fabric-object-caching">Introduction to Fabric object cache</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E5%AF%B9%E8%B1%A1%E7%BC%93%E5%AD%98">Fabric对象缓存简介</a></li>
<li><a href="http://fabricjs.com/fabric-intro-part-1">Introduction to Fabric.js: Part 1</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC1%E9%83%A8%E5%88%86">Fabric.js简介：第1部分</a><ul>
<li>Why Fabric(为什么用Fabric)</li>
<li>Objects(对象)</li>
<li>Canvas(画布)</li>
<li>Images(图像)</li>
<li>Path and PathGroup(路径和路径组)</li>
</ul>
</li>
<li><a href="http://fabricjs.com/fabric-intro-part-2">Introduction to Fabric.js: Part 2</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC2%E9%83%A8%E5%88%86">Fabric.js简介：第2部分</a><ul>
<li>Animation(动画)</li>
<li>Image filters(图像滤镜)</li>
<li>Colors(颜色)</li>
<li>Gradients(渐变)</li>
<li>Text(文本)</li>
<li>Events(事件)</li>
</ul>
</li>
<li><a href="http://fabricjs.com/fabric-intro-part-3">Introduction to Fabric.js: Part 3</a> <a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC3%E9%83%A8%E5%88%86">/Fabric.js简介：第3部分</a><ul>
<li>Groups(组合)</li>
<li>Serialization(序列化)</li>
<li>Deserialization, SVG Parser(反序列化，SVG解析器)</li>
<li>Subclassing(子类化)</li>
</ul>
</li>
<li><a href="http://fabricjs.com/fabric-intro-part-4">Introduction to Fabric.js: Part 4</a> /<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC4%E9%83%A8%E5%88%86">Fabric.js简介：第4部分</a><ul>
<li>Free drawing(自由绘图)</li>
<li>Customization(自定义)</li>
<li>Fabric on Node.js(Node.js中的Fabric)</li>
</ul>
</li>
<li><a href="http://fabricjs.com/fabric-intro-part-5">Introduction to Fabric.js: Part 5</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC5%E9%83%A8%E5%88%86">Fabric.js简介：第5部分</a><ul>
<li>Pan and zoom the canvas(平移和缩放画布)</li>
</ul>
</li>
<li><a href="http://fabricjs.com/using-transformations">Introduction to Fabric.js: Transformations</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC6%E9%83%A8%E5%88%86">Fabric.js简介：第六部分-转换</a><ul>
<li>Using transformations(使用转换)</li>
</ul>
</li>
<li><a href="http://fabricjs.com/subclassing-tutorial">Introduction to Fabric.js: Part 7 - Subclasses</a>/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC7%E9%83%A8%E5%88%86">Fabric.js简介：第7部分-子类</a><ul>
<li>Subclassing Textbox for use bitmap fonts(子类化文本框以使用位图字体)</li>
</ul>
</li>
<li>Introduction to Fabric.js: Part 8 - Clipping with clipPaths/<a href="https://github.com/eternitywith/fabric.js-docs-cn/wiki/Fabric.js%E7%AE%80%E4%BB%8B%EF%BC%9A%E7%AC%AC8%E9%83%A8%E5%88%86">Fabric.js简介：第8部分-使用clipPaths进行剪辑</a><ul>
<li><a href="http://fabricjs.com/clippath-part1">ClipPaths basics</a>(ClipPaths基础)</li>
<li><a href="http://fabricjs.com/clippath-part2">ClipPaths nesting and more complex scenario</a>(ClipPaths嵌套和更复杂的场景)</li>
<li><a href="http://fabricjs.com/clippath-part3">ClipPaths on canvas</a>(画布上的ClipPaths)</li>
<li><a href="http://fabricjs.com/clippath-part4">ClipPaths and absolute position</a>(ClipPaths和绝对位置)</li>
</ul>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端库</category>
      </categories>
      <tags>
        <tag>Fabric.js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-Ajax</title>
    <url>/posts/d0ec.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="1、传统方法请求服务器"><a href="#1、传统方法请求服务器" class="headerlink" title="1、传统方法请求服务器"></a>1、传统方法请求服务器</h3><p>传统的web交互是用户触发一个http请求服务，服务器收到之后做出响应，并且返回一个新的的页面，每当服务器处理客户端提交的请求时，客户端处于空闲等待。并且哪怕只是与服务端进行一个简单的交互或请求一个简单的数据，都要返回一个完整的HTML页面，这造成了大量的带宽浪费，以及应用响应非常慢。</p>
<h3 id="2、什么是AJAX"><a href="#2、什么是AJAX" class="headerlink" title="2、什么是AJAX"></a>2、什么是AJAX</h3><p>AJAX即“Asynchronous JavaScript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术，用于创建快速动态网页的技术，通过在后台与服务器进行少量数据交换，是网页实现异步更新，意味着可以不重新加载网页而对网页的部分进行更新。</p>
<blockquote>
<p>异步：浏览器在请求数据的过程中，不会一直等待，这段时间还可以做其他的操作。</p>
</blockquote>
<blockquote>
<p>同步：浏览器在请求数据的的过程中，会一直等待事件的响应，直到返回结果才会执行其他的操作。</p>
</blockquote>
<blockquote>
<p>尽管X在AJAX中代表XML，但是由于JSON的许多优势，比如更加轻量以及作为JavaScript的一部分，目前JSON比XML更加普遍。JSON和XML都被用于在ajax模型中打包信息。</p>
</blockquote>
<h3 id="3、ajax的使用步骤"><a href="#3、ajax的使用步骤" class="headerlink" title="3、ajax的使用步骤"></a>3、ajax的使用步骤</h3><ul>
<li><p>创建XMLHTTPRequest对象</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>使用open()方法设置和服务器的交互信息</p>
</li>
</ul>
<blockquote>
<p>open()有三个参数：请求类型、url、受否异步(布尔类型)。</p>
</blockquote>
<blockquote>
<p>请求类型又简单分为两种：get、post。get方式通过将数据放在url地址中传到服务器。post方式通过send()方法传送数据，因此相对安全。</p>
</blockquote>
<blockquote>
<p>url为向服务端请求数据的地址，get方法传输时，发送到服务端的数据放在url中以？与前面的地址分隔。而post方法则不用。</p>
</blockquote>
<blockquote>
<p>第三个参数为Boolean类型，决定请求方式是否为异步，true为异步方式。</p>
</blockquote>
<ul>
<li><p>设置发送的数据，开始和服务端交互</p>
<p>通过send()方法向服务端发送数据，通过post类型传输时，将数据以参数形式传通过send方法发送数据。</p>
</li>
<li><p>注册事件</p>
<pre class=" language-js"><code class="language-js">ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//通过onreadystatechange事件监听前后台数据交互阶段</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断ajax的状态，当为4的时候代表ajax请求成功。</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>statuus <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断服务器的状态，200表示请求成功。</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过ajax.responseText获取返回的数据</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>readyState属性可以获取ajax的状态，由0-4表示，分别表示如下：</p>
<ul>
<li>0：（初始化）还没调用open方法</li>
<li>1：（载入）已调用send()方法，正在发送请求</li>
<li>2：（载入完成）send()方法完成，已收到全部响应内容</li>
<li>3：（解析）正在解析响应内容</li>
<li>4：（完成）响应内容解析完成，可以在客户端调用了</li>
</ul>
<p>status属性可以获取服务器返回的网络状态码，一共5个系列：</p>
<ul>
<li>1xx系列：消息，指定客户端响应的某些动作这一类状态码代表请求已被接受，需要继续处理，这类响应是临时响应，只包含状态行和某些可选的响应头信息，以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些实验条件下，服务器禁止向此类客户端发送响应。</li>
<li>2xx系列：成功，代表请求已经成功被服务器接收、理解并接受。常见的有200、201。</li>
<li>3xx系列：重定向，代表需要客户端采取进一步的操作才能完成请求，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的location中指明。</li>
<li>4xx系列：请求错误，代表客户端看起来可能发生了错误，妨碍了服务器处理。如401、404。</li>
<li>5xx系列：服务器错误，代表服务器在处理请求的过程中有错误或异常状态发生，也有可能是服务器意识到当前的软硬件资源无法完成对请求的处理。</li>
</ul>
</li>
</ul>
<h4 id="3-1、get方式请求"><a href="#3-1、get方式请求" class="headerlink" title="3-1、get方式请求"></a>3-1、get方式请求</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'./data/data.json?username=张三&amp;&amp;age=18'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get方式数据通过url发送到服务端</span>
ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-2、post方式请求"><a href="#3-2、post方式请求" class="headerlink" title="3-2、post方式请求"></a>3-2、post方式请求</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span><span class="token string">'./data/data.json'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//post方式需要设置请求头(第二个参数是form表单enctype属性的一个值)</span>
ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'username=张三&amp;&amp;age=18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//post方式数据通过send()方法发送到服务端</span>
ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4、封装ajax请求"><a href="#4、封装ajax请求" class="headerlink" title="4、封装ajax请求"></a>4、封装ajax请求</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//method：请求类型</span>
<span class="token comment" spellcheck="true">//url：请求地址</span>
<span class="token comment" spellcheck="true">//data：传输到服务端的数据</span>
<span class="token comment" spellcheck="true">//callback：回调函数</span>
<span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建ajax对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//get方法</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断数据是否为空</span>
            url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数据加到url后面</span>
        <span class="token punctuation">}</span>
        ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置请求信息</span>
        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发送数据</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//post方法</span>
        ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置post方法设置请求头</span>
        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断ajax状态</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断服务器状态</span>
                callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数据放入回调函数</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请求失败，错误码为：'</span> <span class="token operator">+</span> ajax<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求失败则抛出错误</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="5、数据解析"><a href="#5、数据解析" class="headerlink" title="5、数据解析"></a>5、数据解析</h3><p>JSON的常规用途是同web服务器进行数据传输，在从web服务器接收数据时，数据永远是字符串形式，需要转成数组或对象形式来使用，一般用JSON.parse()方法。</p>
<p>JSON.parse()方法将一个JSON字符串转换为对象，对于衍生自数组的JSON使用JSON.prase()，则会返回JavaScript数组，而不是对象。</p>
<p>对象形式的json数据</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"jData"</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>
            <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">18</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>
            <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">20</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/ajax.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">//调用前面封装好的ajax</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'./data/data.json'</span><span class="token punctuation">,</span> <span class="token string">'name=ajax&amp;&amp;method=get'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token comment" spellcheck="true">//instanceof用于测试左边的对象是否是右边对象的实例</span></code></pre>
<p>数组形式的json数据</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">18</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">20</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/ajax.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">//调用前面封装好的ajax</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'./data/data.json'</span><span class="token punctuation">,</span> <span class="token string">'name=ajax&amp;&amp;method=get'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<blockquote>
<p>eval()方法也能将字符串数组转成真正的数组，但是该函数官方说明为 eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。该方法的用途并不是用来将字符串转数组，不推荐在这使用。</p>
<pre class=" language-js"><code class="language-js"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"x=10;y=20;document.write(x*y)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//200</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"2+2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//27</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'[1,2,3]'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)&amp;nbsp;[1, 2, 3]  true</span></code></pre>
<p>虽然该函数功能强大，但也不经常使用。</p>
</blockquote>
<p>ajax请求数据实例</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/ajax.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">//调用前面封装好的ajax</span>
<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取ul</span>
<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span><span class="token string">'./data/data.json'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>addLi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ajax请求json中的数据</span>
<span class="token keyword">function</span> <span class="token function">addLi</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> d <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//json数据转成数组形式，原json数据为衍生数组的json，可以直接用JSON.parse()转成数组类型</span>
    d<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>
        ul<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;li></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li>`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将数据在页面中渲染</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Ajax</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-BOM</title>
    <url>/posts/20ad.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第十章-BOM"><a href="#第十章-BOM" class="headerlink" title="第十章 BOM"></a>第十章 BOM</h2><h3 id="1、BOM-window对象"><a href="#1、BOM-window对象" class="headerlink" title="1、BOM-window对象"></a>1、BOM-window对象</h3><p>BOM全称Browser Object Model-浏览器对象模型，提供了很多对象，用于访问浏览器的功能，没有规范，由各个浏览器厂商制定标准，兼容性差。</p>
<p>BOM的核心是window：</p>
<ul>
<li>所有浏览器都支持window对象，它表示浏览器窗口。</li>
<li>所有js的全局对象、函数及变量均自动成为window对象的成员。</li>
<li>全局变量是window对象的属性。</li>
<li>全局函数是window对象的方法。</li>
<li>HTML DOM的document也是window对象的属性之一。</li>
</ul>
<h4 id="1-1、window的子对象主要有："><a href="#1-1、window的子对象主要有：" class="headerlink" title="1-1、window的子对象主要有："></a>1-1、window的子对象主要有：</h4><ul>
<li>JavaScript document对象</li>
<li>JavaScript frames对象</li>
<li>JavaScript history对象</li>
<li>JavaScript location对象</li>
<li>JavaScript navigator对象</li>
<li>JavaScript screen对象</li>
</ul>
<h4 id="1-2、window尺寸"><a href="#1-2、window尺寸" class="headerlink" title="1-2、window尺寸"></a>1-2、window尺寸</h4><p>有三种方法能够确定浏览器窗口的尺寸（不包括工具栏和滚动条）。</p>
<ul>
<li>对于IE9及以上、及其他标准浏览器<ul>
<li>window.innerHeight -浏览器窗口内部高度</li>
<li>window.innerWidth -浏览器窗口的内部宽度</li>
</ul>
</li>
<li>对于IE8及以下<ul>
<li>document.documentElement.clientHeigth</li>
<li>document.documentElement.clientWidth</li>
</ul>
</li>
<li>或者，用以下方法获取body的高度，当页面没有内容时，以下方法获取的高度为0，但上面两种方法能获取到页面高度。<ul>
<li>document.body.clientHeight</li>
<li>document.body.clientWidth</li>
</ul>
</li>
</ul>
<p>document.documentElement.clientHeight与document.body.clientHeight都是获取页面可视度高度。但是在不同的html声明中获取的高度不一样，一定要注意。</p>
<p>如果加了<code>&lt;!DOCTYPE html&gt;</code>声明使用document.documentElement.clientHeight获取正常，但是使用document.body.clientHeight获取就有问题。</p>
<p>如果缺少<code>&lt;!DOCTYPE html&gt;</code>声明使用document.documentElement.clientHeight获取有问题，但是使用document.body.clientHeight获取正常。</p>
<p>因为<code>&lt;!DOCTYPE html&gt;</code>是最新的html5标准，所以建议使用document.documentElement.clientHeight获取。</p>
<p>实用的js解决方案为：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
<span class="token keyword">var</span> height <span class="token operator">=</span> widow<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeiht</code></pre>
<h3 id="2、window的open与close方法"><a href="#2、window的open与close方法" class="headerlink" title="2、window的open与close方法"></a>2、window的open与close方法</h3><h4 id="2-1、open"><a href="#2-1、open" class="headerlink" title="2-1、open()"></a>2-1、open()</h4><p>该方法用于打开一个新的浏览器窗口。</p>
<p>语法：window.open(url，name，specs，repalce)</p>
<ul>
<li>url：打开指定url的页面，如果省略，打开新的空白窗口。</li>
<li>name：指定target属性或窗口的名称，值如下：<ul>
<li>_blank –新窗口打开，默认。</li>
<li>_self –当前窗口打开</li>
<li>_parent –url加载到父框架</li>
<li>_top –url替换任何可加载的框架集</li>
<li>name –窗口名称</li>
</ul>
</li>
<li>specs：一个逗号分隔的项目列表，如窗口大小、是否显示菜单栏、是否显示滚动条、是否显示地址字段等。</li>
<li>replace：新窗口是否取代浏览器记录中的位置。<ul>
<li>true –url替换浏览历史中的当前条目</li>
<li>false –url在浏览器中创建新的条目</li>
</ul>
</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>打开百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-2、close"><a href="#2-2、close" class="headerlink" title="2-2、close()"></a>2-2、close()</h4><p>该方法用于关闭浏览器窗口，该方法没有参数。</p>
<p>语法：window.close()</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="3、location对象"><a href="#3、location对象" class="headerlink" title="3、location对象"></a>3、location对象</h3><p>location是最有用的BOM对象之一，它用于获得当前页面的url地址，并把浏览器定向到新的页面。事实上，location是一个很特别的对象，因为它既是window对象的属性，也是document对象的属性。</p>
<h4 id="3-1、location对象属性"><a href="#3-1、location对象属性" class="headerlink" title="3-1、location对象属性"></a>3-1、location对象属性</h4><ul>
<li><p>hash –返回url的锚部分（#后的部分），没有则返回空字符串。</p>
</li>
<li><p>host –返回url的主机名和端口</p>
</li>
<li><p>hostname –返回不带端口的url主机名</p>
</li>
<li><p>href –返回完整的url，location对象的toString()方法也返回这个值，也可以用来跳转页面。</p>
<pre class=" language-js"><code class="language-js">location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳转网页</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取url</span></code></pre>
</li>
<li><p>pathname –返回url路径名</p>
</li>
<li><p>port –返回url服务器使用的端口号</p>
</li>
<li><p>protocol –返回一个url协议</p>
</li>
<li><p>search –返回一个url的查询字符串部分（？之后的部分）</p>
</li>
</ul>
<h4 id="3-2、location对象方法"><a href="#3-2、location对象方法" class="headerlink" title="3-2、location对象方法"></a>3-2、location对象方法</h4><ul>
<li>location.assign(url)：载入一个新的文档</li>
<li>location.reload()：重新载入当前文档</li>
<li>location.repalce(newurl)：用新的文档代替当前文档</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>打开百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4、history对象"><a href="#4、history对象" class="headerlink" title="4、history对象"></a>4、history对象</h3><p>history保存了用户的上网记录，在有页面跳转的情况下，可以实现前后跳转。</p>
<p>go()方法的参数可以是数字，数字代表的是要访问的url在history的url列表中的相对位置（-1后退一个，-2后退两个，1向前一个，以此类推。）。参数也可以是一个字符串，字符串必须是局部或者完整的url，该方法会去匹配字符串的第一个url。</p>
<ul>
<li><p>向前跳转一个页面</p>
<pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法1</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2</span></code></pre>
</li>
<li><p>向后跳转一个页面</p>
<pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法1</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法2</span>
</code></pre>
</li>
</ul>
<h3 id="5、navigator对象"><a href="#5、navigator对象" class="headerlink" title="5、navigator对象"></a>5、navigator对象</h3><p>该对象包含浏览器的相关信息，一般用在响应式布局中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"../H5/index.html"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//手机index文档所在目录</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"../PC/index.html"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// PCindex文档所在目录</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="6、body位置属性"><a href="#6、body位置属性" class="headerlink" title="6、body位置属性"></a>6、body位置属性</h3><h4 id="6-1、offset系列"><a href="#6-1、offset系列" class="headerlink" title="6-1、offset系列"></a>6-1、offset系列</h4><ul>
<li>获取元素的占位宽高<ul>
<li>元素.offsetWidth：width+padding+border</li>
<li>元素.offsetHeight：height+padding+border</li>
</ul>
</li>
<li>获取元素在页面的位置<ul>
<li>元素.offsetTop：当前元素的顶部，到定位父元素的距离（不包含父元素边框和父元素的外边距），没有定位父元素，则到body的距离。</li>
<li>元素.offsetLeft：当前元素的左部，到定位父元素的距离（不包含父元素边框和父元素的外边距），没有定位父元素，则到body的距离。</li>
</ul>
</li>
</ul>
<h4 id="6-2、client属性"><a href="#6-2、client属性" class="headerlink" title="6-2、client属性"></a>6-2、client属性</h4><ul>
<li>屏幕的可视宽高<ul>
<li>document.documentElement.clientWidth</li>
<li>document.documentElement.clientHeight</li>
</ul>
</li>
<li>元素可视宽高<ul>
<li>元素.clientWidth(width+padding)</li>
<li>元素.clientHeight(height+padding)</li>
</ul>
</li>
<li>元素边框<ul>
<li>元素.clientTop(元素本身上边框高度)</li>
<li>元素.clientLeft(元素本身左边框高度)</li>
</ul>
</li>
</ul>
<h4 id="6-3、scroll系列"><a href="#6-3、scroll系列" class="headerlink" title="6-3、scroll系列"></a>6-3、scroll系列</h4><p>Google认为scroll是属于body的，其他浏览器认为scroll是html的，所以存在兼容问题。</p>
<ul>
<li><p>滚动事件</p>
<p>window.onscroll：滚动条滚动的时候调用</p>
</li>
<li><p>屏幕的滚动距离，页面被卷去的高度</p>
<ul>
<li>document.documentElement.scrollTop</li>
<li>document.body.scrollTop</li>
</ul>
</li>
<li><p>元素的滚动</p>
<ul>
<li>元素.scrollTop：被卷去的高</li>
<li>元素.scrollLeft：被卷去的宽</li>
<li>元素.scrollWidth：获取元素实际内容宽（元素宽度-滚动条宽度）</li>
<li>元素.scrollHeight：获取元素实际内容高（包括被滚动条卷走的高度）</li>
</ul>
</li>
</ul>
<h3 id="7、图片懒加载"><a href="#7、图片懒加载" class="headerlink" title="7、图片懒加载"></a>7、图片懒加载</h3><p>图片懒加载是指先只加载可视窗口区域的图片，当用户向下拖动滚动条时再加载后面显示出来的图片。</p>
<ul>
<li>这样减少了加载时的线程数量，使可视区域内的图片也能快速加载，优化了用户体验。</li>
<li>减少了同一时间向服务器发出的请求数量，服务器压力剧减。</li>
</ul>
<p>方法：在写网页<img>标签时先不将图片的路径放入src属性，而是自定义一个其他属性data_src，将图片路径放入到这个自定义的属性中，在加载页面时，这个图片一开始是无法加载的，当浏览器的可视区域移动到此图片上来时，将data_src中的路径赋值给src属性，图片开始加载出来。</p>
<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data_src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./images/background-image.jpg<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data_src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./images/background-image.jpg<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 ...
</code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录图片被加载的数量，每次遍历从没有加载的图片开始加载</span>
<span class="token comment" spellcheck="true">//当打开界面时先加载当前可视区的图片</span>
<span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//滚轮事件绑定懒加载函数</span>
window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> lazyLoad<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> tag<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//获取可视窗口高度</span>
        <span class="token keyword">var</span> seeHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取被滚动条卷走的高度</span>
        <span class="token keyword">var</span> scrollHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//比较图片距离文档顶部的距离是否小于可是高度与被卷高度和，如果小于说明图片进入了可视区域</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop <span class="token operator">&lt;</span> seeHeight <span class="token operator">+</span> scrollHeight<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//判断图片路径是否为空，若为空则给src赋值</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//将图片路径赋给src</span>
                img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data_src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//被加载的图片数量+1</span>
                tag <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>e
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="8、resize事件"><a href="#8、resize事件" class="headerlink" title="8、resize事件"></a>8、resize事件</h3><p>当屏幕发生变化时不间断的调用。</p>
<pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-DOM操作</title>
    <url>/posts/a33b.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第九章-DOM操作"><a href="#第九章-DOM操作" class="headerlink" title="第九章 DOM操作"></a>第九章 DOM操作</h2><h3 id="1、DOM"><a href="#1、DOM" class="headerlink" title="1、DOM"></a>1、DOM</h3><p>Document Object Model，文档对象模型，是W3C组织推荐的处理可拓展性语言的标准编程接口。在网页上，组织页面（文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型称为DOM，如标签、文本、属性等。</p>
<h3 id="2、节点"><a href="#2、节点" class="headerlink" title="2、节点"></a>2、节点</h3><h4 id="2-1、节点介绍"><a href="#2-1、节点介绍" class="headerlink" title="2-1、节点介绍"></a>2-1、节点介绍</h4><p>在加载HTML页面时，web浏览器生成一个树型结构，用来表示页面内部结构，称为DOM树，DOM将这种树型结构解释为由节点组成。</p>
<ul>
<li><p>整个文档时一个文档节点</p>
<p>DOM中的根节点，是文档内其他节点的访问入口，提供了操作其他节点的方法。</p>
</li>
<li><p>每个HTML元素是元素节点</p>
</li>
<li><p>HTML元素内的文本是文本节点</p>
</li>
<li><p>每个HTML属性是属性节点</p>
</li>
<li><p>注释是注释节点</p>
</li>
</ul>


<h4 id="2-2、节点基本属性"><a href="#2-2、节点基本属性" class="headerlink" title="2-2、节点基本属性"></a>2-2、节点基本属性</h4><ul>
<li><p>nodeType</p>
<p>表示节点的类型，只读，节点类型由在Node类型中定义的数值常量来表示，比较重要的节点类型如下：</p>
<ul>
<li>元素–1</li>
<li>属性–2</li>
<li>文本–3</li>
<li>注释–8</li>
<li>文档–9</li>
</ul>
</li>
<li><p>nodeName</p>
<p>节点的名称，只读。</p>
<ul>
<li>元素节点的nodeName与标签名相同，且都均为大写。</li>
<li>属性节点的nodeName与属性名相同。</li>
<li>文本节点的nodeName始终是#text。</li>
<li>文档节点的nodeName始终是#document。</li>
</ul>
</li>
<li><p>nodeValue</p>
<p>该属性规定节点的值。</p>
<ul>
<li><p>元素节点的nodeValue是undefined或null。</p>
</li>
<li><p>文本节点的nodeValue是文本本身。</p>
</li>
<li><p>属性节点的nodeValue是属性值。</p>
<ul>
<li><p>获取属性节点：DOM元素.getAttribute(“属性名称”)，该方式可以获取自定义属性，可以直接用class获取而不是className。</p>
</li>
<li><p>设置属性节点：DOM元素.setAttribute(“属性名称”,“属性值”)，就是直接修改标签属性。</p>
</li>
<li><p>移除属性节点：DOM.removeAttribute(‘属性名称’)，直接删除标签属性。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3、获取节点"><a href="#3、获取节点" class="headerlink" title="3、获取节点"></a>3、获取节点</h3><h4 id="3-1、获取子节点"><a href="#3-1、获取子节点" class="headerlink" title="3-1、获取子节点"></a>3-1、获取子节点</h4><ul>
<li><p>父节点.children</p>
<p>只返回子元素（标签）节点集合，该属性为非标准属性。</p>
<p>IE8及以下浏览器支持该属性，但返回节点集合中除了元素节点还包含注释节点。</p>
</li>
<li><p>父节点.childNodes</p>
<p>返回子节点集合，包括标签、文本、属性节点。</p>
<p>对于元素间的空格，IE8及以下版本不会返回文本节点。</p>
</li>
</ul>
<h4 id="3-2、获取父节点"><a href="#3-2、获取父节点" class="headerlink" title="3-2、获取父节点"></a>3-2、获取父节点</h4><ul>
<li><p>元素.parentNode</p>
<p>指向文档树中的父节点，只获取一个直接父元素。</p>
</li>
<li><p>元素.offsetParent</p>
<p>指向离当前元素最近的有定位属性的父级元素，如果没有定位的父级，则指向body。</p>
</li>
</ul>
<h4 id="3-3、其他节点"><a href="#3-3、其他节点" class="headerlink" title="3-3、其他节点"></a>3-3、其他节点</h4><ul>
<li><h5 id="获取父元素的首节点"><a href="#获取父元素的首节点" class="headerlink" title="获取父元素的首节点"></a>获取父元素的首节点</h5><ul>
<li><p>父元素.firstChild</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>父元素.firstElementChild</p>
<p>只获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
<li><h5 id="获取父元素的尾节点"><a href="#获取父元素的尾节点" class="headerlink" title="获取父元素的尾节点"></a>获取父元素的尾节点</h5><ul>
<li><p>父元素.lastChild</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>父元素.lastElementChild</p>
<p>只获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
<li><h5 id="获取元素的下一个兄弟节点"><a href="#获取元素的下一个兄弟节点" class="headerlink" title="获取元素的下一个兄弟节点"></a>获取元素的下一个兄弟节点</h5><ul>
<li><p>元素.nextSibling</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>元素.nextElementSibling</p>
<p>只能获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
<li><h5 id="获取元素的上一个兄弟节点"><a href="#获取元素的上一个兄弟节点" class="headerlink" title="获取元素的上一个兄弟节点"></a>获取元素的上一个兄弟节点</h5><ul>
<li><p>元素.previousSibling</p>
<p>可以获取所有类型节点，且只能拿一个。</p>
<p>IE9及以上和标准浏览器会获取到文本、折行，IE8及以下获取到元素节点。</p>
</li>
<li><p>元素.previousSibling</p>
<p>只能获取元素节点，IE8及以下不支持。</p>
</li>
</ul>
</li>
</ul>
<p>以上四种方法均存在兼容问题，解决方法如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> first <span class="token operator">=</span> box<span class="token punctuation">.</span>firstElementChild <span class="token operator">||</span> box<span class="token punctuation">.</span>firstChild
<span class="token keyword">var</span> last <span class="token operator">=</span> box<span class="token punctuation">.</span>lastElementChild <span class="token operator">||</span> box<span class="token punctuation">.</span>lastChild
<span class="token keyword">var</span> next <span class="token operator">=</span> box<span class="token punctuation">.</span>nextElementSibling <span class="token operator">||</span> box<span class="token punctuation">.</span>nextSibling
<span class="token keyword">var</span> previous <span class="token operator">=</span> box<span class="token punctuation">.</span>previousElementSibling <span class="token operator">||</span> box<span class="token punctuation">.</span>previousSiblng</code></pre>
<h3 id="4、操作节点"><a href="#4、操作节点" class="headerlink" title="4、操作节点"></a>4、操作节点</h3><h4 id="4-1、创建节点"><a href="#4-1、创建节点" class="headerlink" title="4-1、创建节点"></a>4-1、创建节点</h4><ul>
<li><p>document.createElement(“标签名”)</p>
<p>该方法接收一个字符串标签名，返回一个标签对象的引用。</p>
</li>
<li><p>document.createTextNode(“文本”)</p>
<p>该方法创建一段文本，返回文本对象的引用。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建标签节点</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建文本节点</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'创建的文本节点'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//将文本添加到标签内</span>
p<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//将标签添加到页面中</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//但是更多情况下，是直接用标签的innerHTML属性来添加内容，一步可以代替上面的2、3两步</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'innerHTML方法添加的内容'</span><span class="token punctuation">;</span></code></pre>
<h4 id="4-2、追加节点"><a href="#4-2、追加节点" class="headerlink" title="4-2、追加节点"></a>4-2、追加节点</h4><ul>
<li><p>父元素.appendChild(子节点)</p>
<p>用于向父元素的末尾添加一个节点。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'追加的标签'</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//li添加到ul的尾部</span></code></pre>
<h4 id="4-3、插入节点"><a href="#4-3、插入节点" class="headerlink" title="4-3、插入节点"></a>4-3、插入节点</h4><ul>
<li><p>父元素.insertBefore(要插入的节点，参考的节点)</p>
<p>该方法接收两个参数，要插入的节点和作为参照的节点，插入节点后，被插入的节点会变成参照节点的前一个兄弟节点，同时被方法返回。没有子元素时以文本节点为参考。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'插入的标签'</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>aLi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入到第二个li的前面，成为了新的第二个li，原第二个标签成为了第三个</span></code></pre>
<h4 id="4-4、删除节点"><a href="#4-4、删除节点" class="headerlink" title="4-4、删除节点"></a>4-4、删除节点</h4><ul>
<li><p>父元素.removeChild(被删除的元素)</p>
<p>该方法接收一个参数，要删除的节点。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>aLi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个li被删除</span></code></pre>
<h4 id="4-5、替换节点"><a href="#4-5、替换节点" class="headerlink" title="4-5、替换节点"></a>4-5、替换节点</h4><ul>
<li><p>父元素.replaceChild(新的节点，被替换的节点)</p>
<p>该方法接收两个参数，要插入的节点和被替换的节点。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> aLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'新的标签'</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>aLi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个li被新的标签替换掉</span></code></pre>
<p>如果是用已经存在的节点去替换，已存在的节点会直接从原有位置上消失，在被替换节点的位置覆盖被替换的节点。</p>
<h4 id="4-6、复制节点"><a href="#4-6、复制节点" class="headerlink" title="4-6、复制节点"></a>4-6、复制节点</h4><ul>
<li><p>被复制的节点.cloneNode(布尔值)</p>
<p>该方法拷贝节点并返回节点副本，接收一个布尔值参数，即是否需要克隆所有后代，默认值是false，只复制标签，不复制内容或子代；true表示复制标签中所有子代。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newUl<span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newUl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复制一个ul标签，包含其所有原有的内容</span></code></pre>
<p><strong>如果使用这种方式复制节点，需要使用getElementsByTagName()动态获取元素，不然可能存在获取不到被复制的节点的情况。</strong></p>
<blockquote>
<p>注意：以上操作节点，除了创建和复制节点，其他方法均通过父元素操作，使用时分清所在位置。如删除节点中的父元素应该是被删除元素的父元素，而删除事件的操作元素可能是被删除元素的子元素。</p>
</blockquote>
<h3 id="5、DOM操作表格"><a href="#5、DOM操作表格" class="headerlink" title="5、DOM操作表格"></a>5、DOM操作表格</h3><h4 id="5-1、获取表格元素"><a href="#5-1、获取表格元素" class="headerlink" title="5-1、获取表格元素"></a>5-1、获取表格元素</h4><p>DOM提供了可以简便快速获取表格元素的属性，先获取到表格table对象，再通过table获取里面的元素。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>man<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>sum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取thead，返回thead</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;thead>...&lt;/thead></span>
<span class="token comment" spellcheck="true">//获取tbody，返回一个集合tbody集合</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tBodies<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCollection[tbody]</span>
<span class="token comment" spellcheck="true">//获取tfood，返回tfoot</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tFoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;tfoot>...&lt;/tfoot></span>
<span class="token comment" spellcheck="true">//获取所有行，返回一个行集合，包括thead和tfoot中的行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCollection(3)[tr,tr,tr]</span>
<span class="token comment" spellcheck="true">//获取指定的行，此处获取第一个tbody中的行</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>tBodies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCoolection[tr]</span>
<span class="token comment" spellcheck="true">//获取单元格，只能通过固定行获取，返回一个集合</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cells<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HTMLCollection(4)[th][th][th][th]</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-this详解及函数初识</title>
    <url>/posts/f835.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第四章-this详解及函数初识"><a href="#第四章-this详解及函数初识" class="headerlink" title="第四章 this详解及函数初识"></a>第四章 this详解及函数初识</h2><h3 id="1、this"><a href="#1、this" class="headerlink" title="1、this"></a>1、this</h3><ul>
<li><p>在方法中，this表示该方法所属的对象本身。（对象中的函数称为方法）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    fn<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//结果是：{name:'张三',fn:function()}，说明这里的this是obj对象本身。</span></code></pre>
</li>
<li><p>如果单独使用，this表示全局对象。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//结果是：Window</span></code></pre>
</li>
<li><p>在函数中，this表示全局对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//结果是：Window</span></code></pre>
</li>
<li><p>在函数中，在严格模式下，this是未定义的(undefined)。</p>
<pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//结果是：undefined</span></code></pre>
<blockquote>
<p>补充：严格模式</p>
<blockquote>
<p>定义：严格模式是指在严格的条件下运行js代码，在ECMAScript5引入，通过在脚本或函数的头部添加“use strict”来声明。    </p>
</blockquote>
<blockquote>
<p>好处：</p>
<ul>
<li>消除语法的不合理、不严谨之处，保证代码的运行安全。</li>
<li>提高编译器效率，增加运行速度。</li>
<li>为未来新版本的js做铺垫。  </li>
</ul>
</blockquote>
<blockquote>
<p>限制：</p>
<ul>
<li>不允许使用未声明的变量。</li>
<li>不允许对变量或函数使用delete操作符。</li>
<li>不允许重命名变量。</li>
<li>不允许使用八进制。</li>
<li>抛弃with语句。</li>
<li>不可对只读对象赋值，不可对不可配置对象使用delete操作符。</li>
<li>禁止this关键字指向全局对象。</li>
<li>不可再if内部声明函数。</li>
<li>不允许使用转义字符。</li>
<li>不允许对一个使用getter方法读取的属性进行赋值。</li>
<li>不允许删除一个不允许删除的属性。</li>
<li>变量不能使用“eval、arguments”字符串。</li>
<li>在作用域eval()创建的变量不能被调用。</li>
</ul>
</blockquote>
</blockquote>
</li>
<li><p>在事件中，this指向了接收事件的HTML元素，即触发事件的对象。</p>
</li>
<li><p>在call()、apply()、bind()三个函数对象的方法中，允许切换函数执行的上下文环境，即this绑定的对象，所以他们可以将this指向任何地方。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>
    age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>
    objAge<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>
    objFun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fm<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token string">'来自'</span> <span class="token operator">+</span> fm <span class="token operator">+</span> <span class="token string">"去往"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">99</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都, 上海去往undefined</span>

<span class="token comment" spellcheck="true">/*从上面四个结果不难看出:

bind 返回的是一个新的函数，方法后面多了个 () ，必须调用它才会被执行。

call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：

call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。

apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。

bind 除了返回是函数以外，它的参数和 call 一样。

当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！*/</span></code></pre>
</li>
</ul>
<h3 id="2、自定义属性"><a href="#2、自定义属性" class="headerlink" title="2、自定义属性"></a>2、自定义属性</h3><p>自定义属性是指给标签添加已有属性以外的属性，例如div标签的id、class这些属性都是已有的，如果再添加一个tag属性，就是我们自定义的。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token punctuation">></span></span>box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//无法直接获取在标签内直接定义的自定义属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
div<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//可以获取在js中定义的自定义属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<h3 id="3、自定义索引（下标）"><a href="#3、自定义索引（下标）" class="headerlink" title="3、自定义索引（下标）"></a>3、自定义索引（下标）</h3><p>索引一般与下标一一对应，但是下标并不是标签本身的属性，只是标签所在集合的属性，所以要通过自定义下标来保存标签的实际下标，一般通过for循环。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> div<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    div<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre>
<h3 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h3><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。先声明，后调用。</p>
<h4 id="4-1、函数声明"><a href="#4-1、函数声明" class="headerlink" title="4-1、函数声明"></a>4-1、函数声明</h4><ul>
<li><p>function直接声明</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>表达式声明/匿名函数赋值给变量</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>有名函数赋值给变量</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>Function构造器构造函数（不推荐）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">"alert(a+b)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<p> <strong><code>Function</code> 构造函数</strong>创建一个新的 <code>Function</code> <strong>对象</strong>。直接调用此构造函数可用动态创建函数，但会遇到和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/eval"><code>eval</code></a> 类似的的安全问题和(相对较小的)性能问题。然而，与 <code>eval</code> 不同的是，<code>Function</code> 创建的函数只能在全局作用域中运行。</p>
<ul>
<li><p>匿名函数</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//匿名函数直接使用会报错，因为js规定函数声明function后面必需有函数名或者匿名函数使用表达式赋给变量。</span>
<span class="token comment" spellcheck="true">//解决方法是将匿名函数变成为自执行函数，将其用括号括起来，后面加()代表函数调用，其前面加上;或~防止被前面没加;的代码影响。</span></code></pre>
</li>
</ul>
<h4 id="4-2、函数调用"><a href="#4-2、函数调用" class="headerlink" title="4-2、函数调用"></a>4-2、函数调用</h4><p>函数名()</p>
<h4 id="4-3、函数的参数"><a href="#4-3、函数的参数" class="headerlink" title="4-3、函数的参数"></a>4-3、函数的参数</h4><ul>
<li><p>形参</p>
<p>函数声明时定义的参数，实际就是一个未赋值的变量。</p>
</li>
<li><p>实参</p>
<p>函数调用时传入的实际参数，多个参数时用逗号隔开。</p>
</li>
</ul>
<p>js函数中的参数类型可以是js数据类型中的任何一个，但是null和undefined作为参数没有任何意义而且有时还会报错，因此基本不会将这两个作为参数。</p>
<h4 id="4-4、arguments"><a href="#4-4、arguments" class="headerlink" title="4-4、arguments"></a>4-4、arguments</h4><p>当参数不一定的时候，可以选择不设置形参，而是在函数内部通过获取arguments得到实参，然后再进行操作。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span></code></pre>
<p>arguments可以改变实参的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre>
<p>如果形参名与函数内局部变量名相同，后面的会覆盖前面的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//1 1</span>
<span class="token comment" spellcheck="true">//3 3</span></code></pre>
<h3 id="5、函数中的问题"><a href="#5、函数中的问题" class="headerlink" title="5、函数中的问题"></a>5、函数中的问题</h3><ul>
<li>同名的函数，后面的函数会覆盖前面的函数。</li>
<li>实参给形参赋值时从左往右，实参可以比形参多也可以比形参少，如果实参比形参少，未赋值的参数为undefined。</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-事件</title>
    <url>/posts/b93.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第十一章-事件"><a href="#第十一章-事件" class="headerlink" title="第十一章 事件"></a>第十一章 事件</h2><h3 id="1、事件基础"><a href="#1、事件基础" class="headerlink" title="1、事件基础"></a>1、事件基础</h3><p>HTML事件是发生在HTML元素上的事情，是可以被JavaScript侦测到的行为。</p>
<h4 id="1-1、事件函数"><a href="#1-1、事件函数" class="headerlink" title="1-1、事件函数"></a>1-1、事件函数</h4><p>当事件被触发时调用的函数。</p>
<h4 id="1-2、事件对象"><a href="#1-2、事件对象" class="headerlink" title="1-2、事件对象"></a>1-2、事件对象</h4><p>当事件发生时候，浏览器会将事件相关信息保存在内置全局对象window.event中（window可以省略），包括事件类型、操作对象、鼠标位置等。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//由于事件对象是事件触发时由js底层将实参数据保存在window.event对象中，因此需要在功能函数中加上形参来接收事件对象。</span>
document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//console(e);//标准浏览器</span>
    <span class="token comment" spellcheck="true">//console(event);//兼容ie低版本，非标准浏览器没有实参只能通过window.event</span>
    <span class="token comment" spellcheck="true">//兼容写法</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>事件对象中比较重要的属性：</p>
<ul>
<li><p>type：事件类型</p>
</li>
<li><p>target：获取事件源</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//事件源也存在兼容问题，target在ie低版本中无效，需要使用srcElement进行兼容处理</span>
document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</li>
<li><p>clientX、clientY</p>
<p>鼠标位置坐标，相对于浏览器可视窗口的坐标</p>
</li>
<li><p>pageX、pageY</p>
<p>鼠标位置坐标，相对于浏览器文档（即包括被滚动条卷走的部分）</p>
</li>
<li><p>screenX、screenY</p>
<p>鼠标位置坐标，相对于屏幕</p>
</li>
</ul>
<h3 id="2、事件绑定"><a href="#2、事件绑定" class="headerlink" title="2、事件绑定"></a>2、事件绑定</h3><ul>
<li><p>注册事件</p>
<p>元素.事件</p>
<pre class=" language-js"><code class="language-js">div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>该方式添加事件有一个弊端，如果给一个元素添加多个相同的事件，后面的事件会覆盖前面的事件。</p>
</li>
<li><p>注册事件取消</p>
<pre class=" language-js"><code class="language-js">div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>事件监听绑定事件</p>
<p>标准浏览器：元素.addEventListener(事件类型(不加on)，事件处理函数，是否捕获)。默认false冒泡，true捕获。</p>
<p>非标准浏览器（ie8及以下）：元素.attachEvent(事件类型(加on)，事件函数)。没有第三个参数，只有冒泡，没有捕获（如果需要捕获需要通过其他方法设置）。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//事件绑定封装</span>
<span class="token keyword">function</span> <span class="token function">addEventL</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>eName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>标准浏览器的事件绑定和非标准浏览器的事件绑定的区别：</p>
<ul>
<li>非标准浏览器没有捕获，标准浏览器有捕获。</li>
<li>非标准浏览器的事件名称前面有on，标准浏览器没有。</li>
<li>非标准浏览器的this是window，标准浏览器的是触发这个事件的对象。</li>
</ul>
</li>
<li><p>事件监听取消</p>
<p>标准浏览器和非标准浏览器的绑定方法不一样，取消绑定的方法也不一样。</p>
<ul>
<li>标准浏览器：元素.removeEventListener(事件类型(不加on)，执行函数，false)</li>
<li>非标准浏览器：元素.detachEvent(事件类型(加on)，执行函数)</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//解除绑定兼容处理封装</span>
<span class="token keyword">function</span> <span class="token function">delEventL</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>eNname<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="3、DOM事件流"><a href="#3、DOM事件流" class="headerlink" title="3、DOM事件流"></a>3、DOM事件流</h3><p>事件发生时会在元素节点与根节点之间按特定的顺序传播，路径所经过的所有节点都会收到该事件，这个传播过程就是DOM事件流。</p>
<h4 id="3-1、DOM事件流三阶段："><a href="#3-1、DOM事件流三阶段：" class="headerlink" title="3-1、DOM事件流三阶段："></a>3-1、DOM事件流三阶段：</h4><ul>
<li>事件捕获阶段：事件从最不具体的元素到最具体的元素进行传播，即从DOM的根节点往目标节点传播。</li>
<li>确定目标阶段：事件达到目标元素。</li>
<li>事件冒泡阶段：事件从最具体的元素到最不具体的元素进行传播，即从目标元素往DOM根节点处传播。</li>
</ul>
<h4 id="3-2、事件流分为冒泡事件流和捕获事件流"><a href="#3-2、事件流分为冒泡事件流和捕获事件流" class="headerlink" title="3-2、事件流分为冒泡事件流和捕获事件流"></a>3-2、事件流分为冒泡事件流和捕获事件流</h4><ul>
<li><p>冒泡事件流</p>
<p>当addEventListener()第三个参数为false时，或非标准浏览器的默认事件流，都是冒泡事件流。</p>
<p>冒泡事件流的元素事件在事件冒泡阶段发生。</p>
</li>
<li><p>捕获事件流</p>
<p>当addEventListener()第三个参数为true时，是捕获事件流。</p>
<p>捕获事件流的元素事件在事件捕获阶段发生。</p>
</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    div1
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        div2
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            div3
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js">box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box4'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box3'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'box1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//点击div4时，结果如下图。</span>
<span class="token comment" spellcheck="true">//分析：根据DOM事件流，点击事件从进行捕获阶段div1到div4，到达目标div4之后，再进行冒泡阶段从div4到div1。</span>
<span class="token comment" spellcheck="true">//由于div1和div4支持捕获，而div2和div3支持冒泡（默认false为冒泡），所以div1和div4的点击事件在捕获阶段发生，而div3和div2的点击事件在冒泡阶段发生。</span></code></pre>
<img src="/posts/b93/11-1.png" class>

<p>注意：事件流到达目标阶段后将不再往子节点传播，即点击div3时，事件流达到div3后往根节点冒泡，达不到div4，所以div4的点击事件不会发生。</p>
<img src="/posts/b93/11-2.png" class>

<h4 id="3-3、阻止冒泡事件"><a href="#3-3、阻止冒泡事件" class="headerlink" title="3-3、阻止冒泡事件"></a>3-3、阻止冒泡事件</h4><p>阻止冒泡事件是指：子元素接收到事件后，阻止子元素再给父元素传播事件。</p>
<ul>
<li><p>标准浏览器：事件对象.stopPropagration();</p>
</li>
<li><p>非标准浏览器：事件.cancelBubble = true;</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">stopBubble</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="4、事件默认行为"><a href="#4、事件默认行为" class="headerlink" title="4、事件默认行为"></a>4、事件默认行为</h3><p>事件的默认行为，即赋予了元素特殊的操作，如点击链接会跳转到其他的网页，在浏览器中右击鼠标会弹出菜单，当我们不需要这些默认行为的时候，可以手动阻止。</p>
<ul>
<li>元素.事件添加的事件：return false</li>
<li>元素.addEventListener()：e.preventDefault()</li>
<li>元素.attachEvent()：e.returnValue = false</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="5、键盘事件"><a href="#5、键盘事件" class="headerlink" title="5、键盘事件"></a>5、键盘事件</h3><p>常用键盘事件如下，当一个键盘被按下的时候，事件发生次序如下：</p>
<ul>
<li>onkeydown：键盘按下</li>
<li>onkeypress：键盘按下（但是该事件不适用于alt、shift，ctrl、esc等键盘。）</li>
<li>onkeyup：键盘抬起</li>
</ul>
<p>常用属性如下：</p>
<ul>
<li><p>e.keyCode：返回按键对应键位的键值</p>
<p>常用键值为：</p>
<ul>
<li>左上右下：37、38、39、40</li>
<li>Enter：13</li>
<li>Shift：16</li>
<li>Control：17</li>
<li>Alt：18</li>
</ul>
</li>
<li><p>key：返回具体的键名称（ie8以下不支持）</p>
</li>
<li><p>shiftKey：判断shift键是否按下，是则返回true否则返回false。</p>
</li>
<li><p>ctrlKey：判断ctrl键是否按下，是则返回true否则返回false。</p>
</li>
<li><p>altKey：判断alt键是否按下，是则返回true否则返回false。</p>
</li>
<li><p>metaKey：判断meta键（window键）是否按下，是则返回true否则返回false，ie所有版本都不支持。</p>
</li>
</ul>
<pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>altKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>metaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="6、滚轮事件"><a href="#6、滚轮事件" class="headerlink" title="6、滚轮事件"></a>6、滚轮事件</h3><p>鼠标中间的滚轮滚动时，js也能监听到，称为滚轮事件。</p>
<h4 id="6-1、添加滚轮事件"><a href="#6-1、添加滚轮事件" class="headerlink" title="6-1、添加滚轮事件"></a>6-1、添加滚轮事件</h4><p>添加滚轮事件中火狐与其他浏览器有所区别：</p>
<ul>
<li>标准和非标准浏览器：元素.onmousewheel = fun;//可以使用传统方式绑定事件或者使用事件监听绑定</li>
<li>火狐：元素.addEventListener(‘DOMMouseScroll’,fun,false);//火狐只能使用事件监听方式</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">addMousewheel</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>eName<span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span>fun<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eName<span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//标准和非标准</span>
<span class="token function">addMousewheel</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span><span class="token string">'mousewheel'</span><span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//火狐</span>
<span class="token function">addMousewheel</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span><span class="token string">'DOMMouseScroll'</span><span class="token punctuation">,</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="6-2、获取滚轮信息"><a href="#6-2、获取滚轮信息" class="headerlink" title="6-2、获取滚轮信息"></a>6-2、获取滚轮信息</h4><p>滚轮可以上下滚动，滚动方向的信息都存储在对象事件的一个属性中，火狐和其他浏览器有不同的写法。</p>
<ul>
<li>标准和非标准：e.wheelDetal    向上滚动120、向下滚动-120（不同浏览器可能值不一样）</li>
<li>火狐：e.detail    向上滚动-3，向下滚动3</li>
</ul>
<p>由于不同浏览器值不一样，并且快速滚动滚轮时值可能加倍，所以不能用确定值来判断滚动方向，一般用是否大于0来判断。且由于火狐于其他浏览器在滚轮不同方向的值正负不一样，所以一般在判断时乘以-1使其方向相同。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装如下</span>
<span class="token keyword">function</span> <span class="token function">wheelDelta</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="7、事件委托-事件代理"><a href="#7、事件委托-事件代理" class="headerlink" title="7、事件委托/事件代理"></a>7、事件委托/事件代理</h3><p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类的所有事件。</p>
<p>解决的问题：在一类元素中，如果新添加了一个元素，之前添加的事件在该元素上无效，需要重新添加，或者重新获取所有元素。</p>
<p>实现：将事件添加到父元素上，当事件发生时，父元素会找到对应触发事件的子元素去处理，后期添加的子元素依然有该事件。通常结合子元素的nodeName属性对子元素进行判断。</p>
<p>原理：冒泡原理，当里层元素做点击事件的时候，都会冒到外层父元素中，父元素中点击事件的功能都将实现。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector">li</span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> darkkhaki<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//案例：通过给ul添加点击事件，当点击子元素li时，相应li的背景色变红。</span>
<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>scrElement
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">==</span> <span class="token string">'LI'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
ul<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li>&lt;/li>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后期添加的子元素依然有效</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-初识</title>
    <url>/posts/4160.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第一章-JavaScript初识"><a href="#第一章-JavaScript初识" class="headerlink" title="第一章 JavaScript初识"></a>第一章 JavaScript初识</h2><h3 id="1、JavaScript介绍"><a href="#1、JavaScript介绍" class="headerlink" title="1、JavaScript介绍"></a>1、JavaScript介绍</h3><h4 id="1-1、什么是JavaScript？"><a href="#1-1、什么是JavaScript？" class="headerlink" title="1-1、什么是JavaScript？"></a>1-1、什么是JavaScript？</h4><p>JavaScript是一种具有面向对象能力的、解释型的弱类型程序设计语言，是基于对象和事件驱动的并且具有相对安全性的、可跨平台的客户端脚本语言。（不需要在一个语言环境下运行，而只需要支持它的浏览器即可，浏览器可以直接解析js代码。）</p>
<h4 id="1-2、JavaScript的组成？"><a href="#1-2、JavaScript的组成？" class="headerlink" title="1-2、JavaScript的组成？"></a>1-2、JavaScript的组成？</h4><ul>
<li>核心(ECMAScript)</li>
<li>文档流对象(DOM)</li>
<li>浏览器对象模型(BOM)</li>
</ul>
<h4 id="1-3、JavaScript的特点"><a href="#1-3、JavaScript的特点" class="headerlink" title="1-3、JavaScript的特点"></a>1-3、JavaScript的特点</h4><ul>
<li>解释性</li>
<li>基于对象</li>
<li>事件驱动</li>
<li>跨平台</li>
</ul>
<h4 id="1-4、JavaScript的作用"><a href="#1-4、JavaScript的作用" class="headerlink" title="1-4、JavaScript的作用"></a>1-4、JavaScript的作用</h4><ul>
<li>客户端云计算</li>
<li>客户端表单合法验证</li>
<li>浏览器对象的调用</li>
<li>浏览器事件的触发</li>
<li>网页特殊显示效果制作</li>
<li>…</li>
</ul>
<h3 id="2、JavaScript引入方式"><a href="#2、JavaScript引入方式" class="headerlink" title="2、JavaScript引入方式"></a>2、JavaScript引入方式</h3><ul>
<li>行间引入，在标签内部使用js代码，不建议使用。</li>
<li>通过script标签内嵌JavaScript代码，一般放在head标签中或body标签末尾，建议放在body标签末尾。</li>
<li>通过script标签的src属性外链js文件。</li>
</ul>
<blockquote>
<p>js操作a标签时比较特殊，代码如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">'javascript:;'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre>
</blockquote>
<h3 id="3、JavaScript注释"><a href="#3、JavaScript注释" class="headerlink" title="3、JavaScript注释"></a>3、JavaScript注释</h3><ul>
<li>单行注释：//</li>
<li>多行注释：/**/</li>
</ul>
<h3 id="4、JavaScript入门"><a href="#4、JavaScript入门" class="headerlink" title="4、JavaScript入门"></a>4、JavaScript入门</h3><h4 id="4-1、入门三部曲"><a href="#4-1、入门三部曲" class="headerlink" title="4-1、入门三部曲"></a>4-1、入门三部曲</h4><ul>
<li>谁？哪个标签</li>
<li>事？触发了什么事件</li>
<li>做？事件触发之后做了什么事</li>
</ul>
<h4 id="4-2、window-onload"><a href="#4-2、window-onload" class="headerlink" title="4-2、window.onload"></a>4-2、window.onload</h4><p>window.onload的作用是，当文档和资源都加载完成后执行里面的代码。</p>
<p>当我们把script标签放到head里面去获取元素的时候，会发现获取到的值为null，是因为代码从上往下执行，当获取标签的时候，标签还没有被加载。</p>
<pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onload  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span></code></pre>
<p>window.onload每个页面只能出现一次，如果重复，后面的会覆盖前面的，如果window.onload之外的内容多，如页面图片资源过大会导致页面等待时间过长，用户体验差。</p>
<p>更优质的方法是使用事件监听，当页面结构(HTML)加载完成后加载监听事件，可以出现多次。</p>
<pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="4-3、js的鼠标事件"><a href="#4-3、js的鼠标事件" class="headerlink" title="4-3、js的鼠标事件"></a>4-3、js的鼠标事件</h4><ul>
<li>onclick    单击事件</li>
<li>ondblclick    双击事件</li>
<li>onmouseover    移入事件（支持冒泡）</li>
<li>onmouseout    移出事件（支持冒泡）</li>
<li>onmouseenter    鼠标移入事件（不支持冒泡）</li>
<li>onmouseleave    鼠标移出事件（不支持冒泡）</li>
<li>onmousedown    鼠标按下事件</li>
<li>onmouseup    鼠标松开事件</li>
<li>onmousemove    鼠标移动事件</li>
<li>oncontentmenu    右键菜单事件</li>
</ul>
<h3 id="5、JavaScript变量"><a href="#5、JavaScript变量" class="headerlink" title="5、JavaScript变量"></a>5、JavaScript变量</h3><h4 id="5-1、定义方式"><a href="#5-1、定义方式" class="headerlink" title="5-1、定义方式"></a>5-1、定义方式</h4><p>使用var关键字声明。</p>
<ul>
<li><p>1）声明的同时赋值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>2）同时定义多个变量并赋值，每个变量之间用逗号隔开。</p>
<pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> a<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> </code></pre>
</li>
<li><p>同时定义多个变量，并且分别赋值，每个变量之间用逗号隔开。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<p>注意：变量要先声明（定义+赋值）后使用。</p>
<h4 id="5-2、变量的命名规则"><a href="#5-2、变量的命名规则" class="headerlink" title="5-2、变量的命名规则"></a>5-2、变量的命名规则</h4><ul>
<li>只能以数字、字母、下划线、$开头。</li>
<li>不能以数字开头。</li>
<li>不能使用关键字、保留字（现在不是关键字但以后可能成为关键字）。</li>
<li>具有语义化，见名知义。</li>
<li>采用驼峰命名法。</li>
</ul>
<h3 id="6、JavaScript调试语句"><a href="#6、JavaScript调试语句" class="headerlink" title="6、JavaScript调试语句"></a>6、JavaScript调试语句</h3><ul>
<li><p>alert()</p>
<p>js自带的弹出框，具有阻塞作用，只在测试语句时使用。</p>
</li>
<li><p>console.log()</p>
<p>在控制台打印数据，一次可以多个，并且不会阻塞。</p>
</li>
<li><p>prompt()</p>
<p>用于显示可提示用户进行输入的对话框，也具有阻塞作用。</p>
</li>
</ul>
<h3 id="7、JavaScript获取元素"><a href="#7、JavaScript获取元素" class="headerlink" title="7、JavaScript获取元素"></a>7、JavaScript获取元素</h3><ul>
<li><p>document.getElementById()</p>
<p>通过id值获取，只返回一个元素。</p>
</li>
<li><p>document.getElementsByTagName()</p>
<p>通过标签名称获取，获取的标签会形成一个伪数组返回（即使只有一个元素也是返回一个集合），使用其中的具体标签时，需要加下标。</p>
</li>
<li><p>document.getElementsByClassName()</p>
<p>通过类名称获取，获取的标签会形成一个伪数组返回（即使只有一个元素也是返回一个集合），使用其中的具体标签时，需要加下标。</p>
</li>
<li><p>document.querySelector()</p>
<p>该方法接收一个css选择符(与css中如何书写选择符规则相同，如：.nav li &gt; p)，只返回匹配的第一个元素。</p>
</li>
<li><p>document.querySelectorAll()</p>
<p>该方法也是接收一个css选择符，但是返回的是符合匹配的所有元素集合。</p>
</li>
</ul>
<h3 id="8、JavaScript操作元素内容"><a href="#8、JavaScript操作元素内容" class="headerlink" title="8、JavaScript操作元素内容"></a>8、JavaScript操作元素内容</h3><ul>
<li><p>操作表单元素</p>
<p>获取表单元素：表单元素.value</p>
<p>设置表单元素：表单元素.value = 值</p>
</li>
<li><p>操作闭合标签内容</p>
<p>获取内容：标签.innerHTML，标签.innerText</p>
<p>设置内容：标签.innerHTML = ‘值’，标签.innerText = ‘值’</p>
<p>注意：</p>
<ul>
<li><p>操作闭合标签的内容会有覆盖作用，后面写的会覆盖前面写的。</p>
</li>
<li><p>innerHTML能识别标签，而innerText不能识别标签。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;span>一个span&lt;/span>'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//一个span</span>
p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;span>一个span&lt;/span>'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//&lt;span>一个span&lt;/span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="9、JavaScript操作元素属性"><a href="#9、JavaScript操作元素属性" class="headerlink" title="9、JavaScript操作元素属性"></a>9、JavaScript操作元素属性</h3><ul>
<li>获取属性：标签.属性名</li>
<li>设置属性：标签.属性名 = ‘属性值’</li>
</ul>
<p>注意：class是保留字，不能直接使用，操作标签的class属性语法为：标签.className。</p>
<p>上面的操作都是使用点操作符，也可以使用中括号操作符。某一个具体的属性名用点操作符，<strong>当属性存在在变量中，使用中括号操作该属性</strong>。</p>
<h3 id="10、JavaScript操作元素样式"><a href="#10、JavaScript操作元素样式" class="headerlink" title="10、JavaScript操作元素样式"></a>10、JavaScript操作元素样式</h3><ul>
<li>获取属性：元素.style.样式名</li>
<li>设置属性：元素.style.样式名 = ‘值’</li>
</ul>
<p>注意：添加类似font-size、background-color这种由‘-’连接而成的属性时，需要去掉‘-’，并且把后面的单词首字母大写，符合驼峰命名法。</p>
<p>上面的方法每次只能设置一种样式，cssText可以同时设置多种样式，cssText本质是设置HTML元素的style属性，但是它会覆盖原来用cssText给标签设置的行内样式（不会覆盖原css样式），可以使用+操作符解决覆盖问题。在样式值前面加‘ ; ’可以解决兼容问题。</p>
<pre class=" language-js"><code class="language-js">box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText  <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">";width:100px;height:50px;"</span><span class="token punctuation">;</span></code></pre>
<p>使用js设置的样式最终都成为行内样式。</p>
<h3 id="11、其他"><a href="#11、其他" class="headerlink" title="11、其他"></a>11、其他</h3><ul>
<li>js中除了数字和变量，其他数据操作时需要用引号引起来。</li>
<li>js中的单引号与双引号没有区别，但是嵌套使用时需要成对出现，一般双引号嵌套单引号。</li>
<li>一般情况下js每一条语句结束后换行之后，不加分号对后面的语句没有影响，但是建议加上分号，使代码更美观可读，不加分号可能会引起某些不知名错误。</li>
<li>js区分大小写。</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-数据在内存中的存储方式</title>
    <url>/posts/242b.html</url>
    <content><![CDATA[<h1 id="JavaScript中数据在内存中的存储方式"><a href="#JavaScript中数据在内存中的存储方式" class="headerlink" title="JavaScript中数据在内存中的存储方式"></a>JavaScript中数据在内存中的存储方式</h1><h3 id="1、js数据类型分类"><a href="#1、js数据类型分类" class="headerlink" title="1、js数据类型分类"></a>1、js数据类型分类</h3><ul>
<li>简单数据类型：Number、String、Boolean、Undefined、Null</li>
<li>复杂数据类型：Object、Array、Function</li>
</ul>
<p>简单数据类型也称基本数据类型，复杂数据类型也称引用数据类型。</p>
<h3 id="2、数据结构"><a href="#2、数据结构" class="headerlink" title="2、数据结构"></a>2、数据结构</h3><p>数据结构是计算机存储、组织数据的方式。这里只列出分类不做详细解释，常用的数据结构有：数组、栈、堆、列表、链表、树、图、散列表。</p>
<p>本文中只用到这两种数据结构：栈(后进先出，使用堆的一种方法)、堆(特殊的树形结构)</p>
<h3 id="3、简单数据类型存储方式"><a href="#3、简单数据类型存储方式" class="headerlink" title="3、简单数据类型存储方式"></a>3、简单数据类型存储方式</h3><p>简单数据类型保存在栈中，这些类型在内存中别占有固定大小，他们的值保存在栈空间，按值访问。变量在声明过程中，会在栈中开辟一段内存空间，变量值直接存在该内存中，变量读写的是它们实际保存的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/1.png" class>

<p>简单数据数据复制时，会为新声明的变量开辟一段新空间， 然后把值复制到为新变量分配的空间中。 </p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> num<span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> str<span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/2.png" class>

<p>简单数据类在当前执行环境结束时销毁。</p>
<h3 id="4、复杂数据类型存储方式"><a href="#4、复杂数据类型存储方式" class="headerlink" title="4、复杂数据类型存储方式"></a>4、复杂数据类型存储方式</h3><p>复杂数据类型是不固定大小的数据，但是存放他们的地址大小是固定的，所以把地址保存在栈中，值保存在堆中。复杂数据类型是一个指针，指针保存在栈中，但是指针指向的是堆。即存储复杂数据类型的变量保存在栈中，数据本身保存在堆中。读取其数据时，先访问栈中的地址，通过地址找到存在堆中的数据。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/3.png" class>

<p>复杂数据类型进行浅拷贝时，复制的是引用地址。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> object1<span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span></code></pre>
<img src="/posts/242b/4.png" class>

<p>由于浅拷贝指向的是同一个地址，所以当object2和arr2的值改变时，object1和arr1的值也随之改变。</p>
<p>与浅拷贝对应的是深拷贝，深拷贝是将引用类型的值全部拷贝一份，并且存放在不同的内存中，形成一个新的引用类型，修改它的值不会影响原来的值。</p>
<p>复杂数据类型不会随着当前执行环境结束而销毁，只有存放变量的地址不存在时，内存才会被垃圾回收机制回收。</p>
<p>但是这里有一个特殊的地方，就是null，null类型虽然是简单数据类型，但实际是一个特殊的对象，存放null的变量在栈中，指针指向堆中的一段空内存。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-数据类型</title>
    <url>/posts/2ddf.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第二章-JavaScript数据类型"><a href="#第二章-JavaScript数据类型" class="headerlink" title="第二章 JavaScript数据类型"></a>第二章 JavaScript数据类型</h2><h3 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h3><h4 id="1-1、为什么需要数据类型？"><a href="#1-1、为什么需要数据类型？" class="headerlink" title="1-1、为什么需要数据类型？"></a>1-1、为什么需要数据类型？</h4><p>不同的数据类型占用的内存大小不一样，为了合理有效地分配内存空间，划分了数据类型。</p>
<h4 id="1-2、数据类型分类"><a href="#1-2、数据类型分类" class="headerlink" title="1-2、数据类型分类"></a>1-2、数据类型分类</h4><ul>
<li><p>简单数据类型：Number、String、Boolean、Undefined、Null</p>
</li>
<li><p>复杂数据类型：Object、Array、Function</p>
</li>
</ul>
<h4 id="1-3、Number类型"><a href="#1-3、Number类型" class="headerlink" title="1-3、Number类型"></a>1-3、Number类型</h4><p>Number即数值类型，主要用于参与数学运算，包含：整数、小数、进制、无穷大、无穷小、NaN</p>
<p>注意：</p>
<ul>
<li>NaN证明运算表达式是一个非法运算，算数运算不能得到正常地数字都会返回NaN，并且任意两个NaN都是不相等的。</li>
<li>精度缺失，小数之间进行运算，由于计算机是通过二进制进行计算，存储时会导致精度缺失，<strong>因此不能使用小数作为判断条件</strong>。解决方法：将运算的小数乘以100，再将结果除以100。</li>
</ul>
<h4 id="1-4、String类型"><a href="#1-4、String类型" class="headerlink" title="1-4、String类型"></a>1-4、String类型</h4><p>即字符串类型，用单引号或双引号引起来的数据，有长度有下标，只可读不可写。需要注意的是，所有从键盘输入到界面的数据都是字符串类型。</p>
<p>基本的操作方法有：</p>
<ul>
<li>.length：获取字符串长度，包括空格。</li>
<li>字符串[下标]：获取对应下标的字符，ie7及以下获取到undefined。</li>
<li>.charAt(下标)：获取字符串对应下标的字符，下标从0开始。</li>
<li>.charCodeAt(下标)：返回对应下标的字符在ASCII表中的值。数字范围：48-57，大写字母范围：65-90，小写字母范围：97-122。</li>
</ul>
<h4 id="1-5、Boolean类型"><a href="#1-5、Boolean类型" class="headerlink" title="1-5、Boolean类型"></a>1-5、Boolean类型</h4><p>真：true（1）、假：false（0），数字0和空字符串为假，其他都为真。</p>
<p>if语句中的判断条件，都会转成Boolean类型。</p>
<h4 id="1-6、null和undefined"><a href="#1-6、null和undefined" class="headerlink" title="1-6、null和undefined"></a>1-6、null和undefined</h4><p>null：Null类型，是js中的一个关键字，代表空值，代表一个空指针对象，使用typeof运算得到“object”，存放null的变量存在堆中，null值本身存在栈中，可以认为他是特殊的对象值。</p>
<p>undefined：undefined类型，当变量声明了未初始化时，得到的就是undefined。在ECMAScript第三版引入，为了区分空指针对象和未初始化的变量，它是一个预定义的全局变量。没有返回值的函数为undefined，没有实参的形参也是undefined。</p>
<h4 id="1-7、Object"><a href="#1-7、Object" class="headerlink" title="1-7、Object"></a>1-7、Object</h4><p>对象通过键值对的方式存储数据，键值对之间以逗号隔开。</p>
<p>声明方式</p>
<ul>
<li><p>new实例化对象</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>字面量形式声明对象</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h4 id="1-8、Function"><a href="#1-8、Function" class="headerlink" title="1-8、Function"></a>1-8、Function</h4><p>函数的作用是用来存储代码块，调用时才执行，typeof运算结果为function。</p>
<p>声明方式</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    代码块<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>调用方式：函数名()</p>
<h4 id="1-9、Array"><a href="#1-9、Array" class="headerlink" title="1-9、Array"></a>1-9、Array</h4><p>数组可以存放任意类型的数据，有长度有下标（从0开始），typeof运算结果为object。</p>
<h4 id="1-10、拓展"><a href="#1-10、拓展" class="headerlink" title="1-10、拓展"></a>1-10、拓展</h4><p>在ECMA中，除了Number，String，null，undefined，Boolean，其它的实例都会归为object。而创建Function或者Array这些类型的实例的时候，其实都是基于Object实例进行的一种扩展。只是多了一些特有属性。判断一个对象是一个数组还是普通的Object可以使用Array.isArray的方法。然而这个方法会因为在跨iframe的情况下失效。最简单的办法是Object.prototype.toString.call(array)的方式。因为只有通过Object的原型的toString方法才能拿到每个实例的[class]内部属性。 </p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Array]</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Function]</span></code></pre>
<h3 id="2、数据类型转换"><a href="#2、数据类型转换" class="headerlink" title="2、数据类型转换"></a>2、数据类型转换</h3><ul>
<li><p>强制类型转换</p>
<ul>
<li><p>Number()</p>
<p>将其他数据类型转为数值类型，返回一个新的数值，不改变变量本身。</p>
<p>只能转换纯数字和空字符串(0)，其他的都是NaN，Boolean类型也能转换但是是隐式转换。</p>
</li>
<li><p>parseInt()</p>
<p>转换为Number类型，取整，舍弃小数部分。</p>
<p>该方法还有第二个参数radix，<strong>代表第一个参数以什么进制参与转换，最终的结果都是转为十进制</strong>。注意：当省略第二个参数且数字以0开头时，在IE8及以下浏览器中会将它当作八进制进行转换，所以建议一般加上第二个参数。</p>
</li>
<li><p>parseFloat()</p>
<p>转换为Number类型，保留小数，最后的0自动省略。</p>
<p>parseFloat().toFxid(n)，代表保留小数点后n位。</p>
</li>
</ul>
<blockquote>
<p>parseInt()与parseFloat()方法解析的原则是<strong>尽可能从前往后解析，若有能实别的数字就解析，遇到不能实别的就结束转换，即使后面还有数字也不转换</strong>。如果第一位就不是数字就返回NaN。</p>
</blockquote>
<ul>
<li><p>isNaN()</p>
<p>is not a number是不是不是一个数字类型，内部调用Number()方法，如果能成功转成数字类型，返回false，不成功返回true。</p>
</li>
<li><p>变量.toString()和String()</p>
<p>两个方法将其他类型转成字符串类型，不会改变原来的值。</p>
<p>String(变量)能针对任何数据类型，而变量.toString()不能转换undefined和null。</p>
</li>
<li><p>Boolean()</p>
<p>可以将任何值转为布尔值。</p>
<p>除了undefined、null、false、0、NaN、空字符串 这六个值之外，其他值均是真值。包括{}和[]。</p>
</li>
</ul>
</li>
</ul>
<h3 id="3、运算符"><a href="#3、运算符" class="headerlink" title="3、运算符"></a>3、运算符</h3><ul>
<li>算数运算符：+ - * / % ++ –</li>
<li>赋值运算符：= += -= *= /=</li>
<li>比较运算符：&gt; &lt; &gt;= &lt;= == !==  !=  === </li>
<li>逻辑运算符：&amp;&amp; || ！</li>
<li>三目运算符：条件 ？ 条件成立的代码 ： 条件不成立的代码</li>
</ul>
<h3 id="4、数据类型的隐式转换"><a href="#4、数据类型的隐式转换" class="headerlink" title="4、数据类型的隐式转换"></a>4、数据类型的隐式转换</h3><ul>
<li><p>“+”进行运算时，只要两边有一边是字符串，“+”就当作字符串连接符，这时候会将两边的数据都调用String()转成字符串进行拼接。两边都是数字或Boolean、null时，才是算数运算符，这时将调用Number()方法将两边的数据转成Number类型进行运算。</p>
<img src="/posts/2ddf/2-1.jpg" class>
</li>
<li><p>当关系运算符两边有一边是字符串时，会将其他数据类型使用Number()转换，然后比较。</p>
</li>
<li><p>当关系运算符两边都是字符串时，会同时转成Number然后比较关系，但是此时并不是按照Number()的形式转成数字，而是按照字符串对应的ASCII编码，比较ASCII的大小，并且是从左往右依次比较，如果不相等直接得出结果，如果相等则继续比较第二个字符。</p>
<img src="/posts/2ddf/2-2.jpg" class>
</li>
<li><p>复杂数据类型在隐式转换时会先转成String，然后再转成Number运算。</p>
<img src="/posts/2ddf/2-3.jpg" class>
</li>
<li><p>空数组的toString()方法会得到空字符串，而空对象的toString()方法会得到字符串‘[object Object]’。</p>
<img src="/posts/2ddf/2-4.jpg" class>

<img src="/posts/2ddf/2-5.jpg" class>



</li>
</ul>
<p>说明：隐式转换参考（及图片）自：传智播客官方博客 文章：<a href="https://blog.csdn.net/itcast_cn/article/details/82887895%EF%BC%8C%E6%84%9F%E8%B0%A2%E3%80%82">https://blog.csdn.net/itcast_cn/article/details/82887895，感谢。</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-数组对象</title>
    <url>/posts/357e.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第八章-JavaScript数组对象"><a href="#第八章-JavaScript数组对象" class="headerlink" title="第八章 JavaScript数组对象"></a>第八章 JavaScript数组对象</h2><h3 id="1、数组对象"><a href="#1、数组对象" class="headerlink" title="1、数组对象"></a>1、数组对象</h3><p>数组：使用单独的变量名来储存一系列的值，数组可以存储任意数据类型的数据，具有长度和下标。</p>
<h3 id="2、创建数组"><a href="#2、创建数组" class="headerlink" title="2、创建数组"></a>2、创建数组</h3><ul>
<li><p>字面量方式创建</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ahb'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'sd'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>构造函数创建</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]空数组</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>
<span class="token comment" spellcheck="true">//注意：如果参数只有一个值且是数值，代表创建一个该长度的空数组</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[empty × 4]长度4的空数组</span></code></pre>
</li>
</ul>
<h3 id="3、遍历数组"><a href="#3、遍历数组" class="headerlink" title="3、遍历数组"></a>3、遍历数组</h3><ul>
<li><p>使用for循环遍历配合下标和长度遍历</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr4<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//1 2 3 4 "a" "b" "c"</span></code></pre>
</li>
<li><p>for-in()，遍历对象的标配方法，遍历数组时返回的数组下标是字符串，所以不常用，使用时需注意。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> arr4<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token keyword">typeof</span> key<span class="token punctuation">,</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*
0 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
1 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
2 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
3 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
4 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
5 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
6 string (7)&amp;nbsp;[1, 2, 3, 4, "a", "b", "c"]
*/</span></code></pre>
</li>
</ul>
<p>4、数组的操作方法</p>
<ul>
<li><p>栈方法：在数组末尾操作元素，可以改变原数组。</p>
<ul>
<li><p>push()：在数组末尾添加任意个数的元素，<strong>改变原数组，返回新数组长度</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;["a", "b", "c", "d", "e"]</span></code></pre>
</li>
<li><p>pop()：从数组末尾移除最后一项，没有参数，不能指定删除元素，<strong>改变原数组，返回的是被删除的元素</strong>，一次只能删除一个。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ab'</span><span class="token punctuation">,</span><span class="token string">'cd'</span><span class="token punctuation">,</span><span class="token string">'ef'</span><span class="token punctuation">,</span><span class="token string">'jh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//jh</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)&amp;nbsp;["ab", "cd", "ef"]</span></code></pre>
</li>
</ul>
</li>
<li><p>队列方法：在数组头部操作元素，可以改变原数组。</p>
<ul>
<li><p>unshift()：在数组前端添加任意个数的元素，<strong>改变原数组，并返回新数组的长度</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;["d", "e", "a", "b", "c"]</span></code></pre>
</li>
<li><p>shift()：从数组前端移除第一项，没有参数，不能指定删除元素，<strong>改变原数组，返回的是被删除的元素</strong>，一次只能删除一个。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ab'</span><span class="token punctuation">,</span><span class="token string">'cd'</span><span class="token punctuation">,</span><span class="token string">'ef'</span><span class="token punctuation">,</span><span class="token string">'jh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ab</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)&amp;nbsp;["cd", "ef", "jh"]</span></code></pre>
</li>
</ul>
</li>
<li><p>splice()：删除、添加、替换</p>
<p>在当前数组中删除一段连续的元素，并且可以在被删除的位置上添加新的元素，<strong>改变原数组</strong>，<strong>以数组的形式返回被删除的元素</strong>。</p>
<p>splice(start,deleteCount,item1,…,itemX)</p>
<ul>
<li><p>删除</p>
<p>splice(起始位置，删除项数)，从起始下标位置开始删除包括该位置，删除项数是Number类型，如果删除项数省略则默认删到末尾。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;["c", "d"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;["a", "b"]</span></code></pre>
</li>
<li><p>添加</p>
<p>splice(添加位置所在下标，0，’添加元素1‘，…，’添加元素n‘)，添加位置所在下标会将原来该位置的元素往后移。第二个参数为0，表示不删除，第二个参数之后可以是多个被添加的参数。返回值为空值，因为没有删除元素。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(6)&amp;nbsp;["a", "b", "e", "f", "c", "d"]</span></code></pre>
</li>
<li><p>替换</p>
<p>splice(起始位置，删除项数，’替换元素1‘，…，’替换元素n‘)，从起始下标位置开始替换包括该位置，删除项数是Number类型，第二个参数之后可以是多个替换的参数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;["c", "d"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;["a", "b", "f", "g", "e"]</span>
<span class="token comment" spellcheck="true">//如果第二个参数省略，则会将后面第一个替换的字符串当作删除的字符串，如果查询不到该字符串则不删除，返回空值，将第二个及后面替换的字符插在相应位置。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(6)&amp;nbsp;["a", "b", "g", "c", "d", "e"]</span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="4、数组去重"><a href="#4、数组去重" class="headerlink" title="4、数组去重"></a>4、数组去重</h3><ul>
<li><p>splice()方法</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除元素后，字符串长度减少，j要相应减少</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(7)&amp;nbsp;[1, 3, 4, 7, 5, 9, 2]</span></code></pre>
</li>
<li><p>indexOf()、push()方法</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(7)&amp;nbsp;[1, 3, 4, 7, 5, 9, 2]</span></code></pre>
</li>
</ul>
<h3 id="5、数组排序"><a href="#5、数组排序" class="headerlink" title="5、数组排序"></a>5、数组排序</h3><ul>
<li><p>sort()</p>
<p>该方法按升序排列数组项，只能排序10以下，不包括10，超过10只比较十位数上的大小，<strong>该方法是在原数组上排序会改变原数组顺序</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[10, 15, 2, 21, 3, 6, 7, 9]</span></code></pre>
<p>该方法可以接收一个匿名函数作为参数，该函数称为比较函数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//return a-b; //从小到大</span>
    <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从大到小</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[21, 15, 10, 9, 7, 6, 3, 2]</span></code></pre>
<p>用sort()方法对中文进行排序。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'刘备'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'孙尚香'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'小乔'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'孙策'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'大乔'</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'zh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//localeCompare:是把中文转成拼音并拿到第一个字的首字母</span>
<span class="token comment" spellcheck="true">//"zh":以中文的方式排序，按abcd...顺序排序。如果是英文则以Unicode编码进行排序。</span></code></pre>
<img src="/posts/357e/8-1.png" class>
</li>
<li><p>排序算法</p>
<ul>
<li><p>选择排序</p>
<p>从第一项起，每一项都和后面所有项依次进行比较，如果后面的数小于前面的数，则交换位置。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[1, 3, 5, 5, 9, 12, 17, 21]</span></code></pre>
</li>
<li><p>冒泡排序</p>
<p>从第一项起，比较相邻的元素，如果前一个比后一个大，则交换位置，最后一个数最大，之后从一个开始重新循环。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[1, 3, 5, 5, 9, 12, 17, 21]</span></code></pre>
</li>
<li><p>快速排序</p>
<p>找到数组的中间项，把中间项用splice删除，然后循环数组，如果比这项小的，放在一个left数组中，如果比这项大的，放在一个right数组中，然后递归调用快速排序方法。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//终止条件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> midIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中间值下标，向下取整</span>
    <span class="token keyword">var</span> midNum <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中间值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>midNum<span class="token punctuation">)</span>
    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左边数组存放小于midNum的值</span>
    <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右边数组存放大于midNum的值</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> midNum<span class="token punctuation">)</span><span class="token punctuation">{</span>
            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小于中间值存放在左边数组</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大于中间值放在右边数组</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>midNum<span class="token punctuation">,</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左右两边数组递归调用本函数循环比较，最终cancat函数进行字符串连接。</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="6、数组的其他方法"><a href="#6、数组的其他方法" class="headerlink" title="6、数组的其他方法"></a>6、数组的其他方法</h3><ul>
<li><p>数组.join()</p>
<p>将数组以特定格式拼接成字符串，该方法只接收一个参数，即用作分隔符的字符串，然后<strong>返回生成的字符串，不改变原数组</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1-2-a-b</span></code></pre>
</li>
<li><p>数组1.concat(数组2，数组3，…)</p>
<p>连接数组，该方法的参数接收一个或多个数组（或任意的值），该方法会将这些数组中的每一项都添加到结果数组中。<strong>不改变原数组，返回新数组。</strong></p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span><span class="token string">'new'</span><span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(8)&amp;nbsp;[1, 2, 3, 666, "new", "a", "d", "c"]</span></code></pre>
</li>
<li><p>数组.reverse()</p>
<p>该方法会反转数组的顺序，<strong>改变原数组并返回</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(5)&amp;nbsp;[5, 4, 3, 2, 1]</span></code></pre>
</li>
<li><p>数组.indexOf()</p>
<p>该方法接收两个参数：要查找的项和查找起点位置的索引，查找无果返回-1。</p>
<p>lastIndexOf()为向后往前找，这两种方法在数组中使用与在字符串中使用情况相同，详细参考第七章字符串对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1，从下标为3的位置开始找2</span></code></pre>
</li>
<li><p>slice()</p>
<p>截取数组：数组.slice(起始下标，结束下标)，不包括结束下标，<strong>不影响原数组，返回新数组</strong>。当两个参数都省略时，相当于复制数组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(3)&amp;nbsp;[3, 4, 5]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(7)&amp;nbsp;[1, 2, 3, 4, 5, 6, 7]</span></code></pre>
</li>
<li><p>Array.isArray(参数)</p>
<p>该方法是一个静态方法（ 静态方法指在构造函数本身上定义的方法，只能通过构造函数本身调用，new出来的对象不能够调用。 ），用来判断是否是一个数组，该方法IE8及以下不支持。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre>
</li>
</ul>
<h3 id="7、数组的迭代方法"><a href="#7、数组的迭代方法" class="headerlink" title="7、数组的迭代方法"></a>7、数组的迭代方法</h3><p>数组迭代，通俗来讲就是数组遍历，js常用的迭代方法有如下：</p>
<ul>
<li><p>forEach(function(value,index){})</p>
<p>简单的循环数组，没有返回值，函数参数分别是数组的项和下标。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
0 1
1 2
2 3
3 4
4 5
*/</span></code></pre>
</li>
<li><p>every(function(value,index,array){})</p>
<p>针对数组元素元素做些判断，如果结果都为true，则返回的结果为true。函数参数分别是数组项、下标、数组本身。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> compare<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
</li>
<li><p>some(function(value,index,array){})</p>
<p>针对数组元素做某些判断，如果有一个为true，则返回的结果为true，且不再比较后面的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> compare<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
</li>
<li><p>filter(function(value,index,array){})</p>
<p>针对数组元素做某些判断，满足条件的元素会生成一个新的数组并返回。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> compare<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">fliter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(2)&amp;nbsp;[4, 5]</span></code></pre>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-流程控制语句</title>
    <url>/posts/1f2d.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第三章-流程控制语句"><a href="#第三章-流程控制语句" class="headerlink" title="第三章 流程控制语句"></a>第三章 流程控制语句</h2><p>JavaScript中的流程控制语句和其他程序设计语言基本时一样的，主要分为：</p>
<ul>
<li>顺序结构：即按顺序执行代码；</li>
<li>条件选择结构（分支语句）：包括if-else以及switch</li>
<li>循环结构：包括for循环、while、do-while，for-in；</li>
<li>其他语句：break、continue</li>
</ul>
<h3 id="1、分支语句"><a href="#1、分支语句" class="headerlink" title="1、分支语句"></a>1、分支语句</h3><ul>
<li><p>if</p>
<p>语法：if（条件）{条件成立执行的代码}</p>
</li>
<li><p>if-else</p>
<p>语法：if（条件）{条件成立执行的代码}else{条件不成立执行的代码}</p>
</li>
<li><p>if-else嵌套</p>
<p>语法：if（条件）{条件成立执行的代码}else if（条件）{条件成立执行的代码}else if（条件）{条件成立执行的代码}else{以上条件都不成立执行的代码}</p>
<p>当然，最后一个else分支可以省略。</p>
</li>
<li><p>switch</p>
<p>语法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> n<span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token operator">...</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<ul>
<li><p>switch语句中比较的是全等（===）。</p>
</li>
<li><p>switch只能使用break，不能使用continue，当匹配到其中一个值时，后面的匹配都不再进行。</p>
</li>
<li><p>default中的break可以省略。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>if能实现的switch不一定能实现，switch能实现的if一定能实现。</li>
<li>当条件是一个范围或值是一个Boolean值的时候用if。</li>
<li>当条件是固定的值或字符时用switch。</li>
</ul>
</blockquote>
<h3 id="2、循环语句"><a href="#2、循环语句" class="headerlink" title="2、循环语句"></a>2、循环语句</h3><p>循环三要素：初始化循环变量、跳出循环的条件、更新循环变量</p>
<ul>
<li><p>for循环</p>
<p>语法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span>初始化循环变量<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>判断条件<span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>更新循环变量<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token number">3</span><span class="token punctuation">.</span>循环体<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//执行的顺序为1->2->3->4->2->3->4(更新循环变量为++i除外)</span></code></pre>
<p>当然，for循环可以嵌套使用，两层嵌套中，外循环执行一次，内循环遍历所有。</p>
</li>
<li><p>for-in</p>
<p>for-in循环是专门为循环对象设置的（数组也可以，但不常用），因为对象没有长度没有顺序，所以不能使用for循环。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span>
    sex<span class="token punctuation">:</span><span class="token string">'man'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//name age sex</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三 21 man</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//由于这里是将对象中的属性赋值给了for-in中的key变量，所以操作属性时用方括号。</span></code></pre>
</li>
<li><p>while</p>
<p>语法</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化循环变量</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环结束条件</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新循环变量</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>do-while</p>
<p>do-while循环先执行后判断。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="3、break与continue"><a href="#3、break与continue" class="headerlink" title="3、break与continue"></a>3、break与continue</h3><p>break与continue的区别是：break结束循环，之后的循环不执行。continue是结束本次循环，直接执行下一次循环。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-面向对象编程</title>
    <url>/posts/c9c1.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="第十三章-面向对象编程"><a href="#第十三章-面向对象编程" class="headerlink" title="第十三章 面向对象编程"></a>第十三章 面向对象编程</h2><h3 id="1、面向对象概念"><a href="#1、面向对象概念" class="headerlink" title="1、面向对象概念"></a>1、面向对象概念</h3><h4 id="1-1、对象基本概念"><a href="#1-1、对象基本概念" class="headerlink" title="1-1、对象基本概念"></a>1-1、对象基本概念</h4><p>ECMAScript有两种开发模式：</p>
<ul>
<li>函数式：面向过程的开发模式，每个步骤都需要自己完成，注重的是实现过程。</li>
<li>面向对象： 将对象作为程序的基本单元，将程序分解为数据和操作的集合。 </li>
</ul>
<p>面向对象基本概念：</p>
<ul>
<li>类：类是对象的类型模板，将具有同一类属性和方法的对象抽象出来称为一个类。</li>
<li>实例：实例时根据类创建的对象，是类的个体表现。</li>
</ul>
<p>但是ECMAScript中没有类的概念，因此它的对象也基于类的语言中的对象有所不同。</p>
<h4 id="1-2、对象的组成及特点"><a href="#1-2、对象的组成及特点" class="headerlink" title="1-2、对象的组成及特点"></a>1-2、对象的组成及特点</h4><p>对象组成：</p>
<ul>
<li>属性：对象的特征描述，静态，名词。</li>
<li>方法：对象的行为，动态，动作功能。</li>
</ul>
<p>对象的基本特征：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<h3 id="2、面向对象的创建"><a href="#2、面向对象的创建" class="headerlink" title="2、面向对象的创建"></a>2、面向对象的创建</h3><h4 id="2-1、字面量创建"><a href="#2-1、字面量创建" class="headerlink" title="2-1、字面量创建"></a>2-1、字面量创建</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>
     run<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三</span></code></pre>
<h4 id="2-2、new实例创建"><a href="#2-2、new实例创建" class="headerlink" title="2-2、new实例创建"></a>2-2、new实例创建</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//box对象本身</span></code></pre>
<p>该方法创建对象有个缺点，想创建类似的对象就会产生大量的代码。</p>
<h4 id="2-3、工厂模式创建对象"><a href="#2-3、工厂模式创建对象" class="headerlink" title="2-3、工厂模式创建对象"></a>2-3、工厂模式创建对象</h4><p>工厂模式创建对象，其实就是函数封装，将创建对象、添加属性和方法的操作封装在函数中，最后返回这个创建出来的对象，在需要创建对象的时候调用这个函数，就能够得到一个创建好的对象。所有的加工都在函数中，而且可以批量生产，因此叫生产模式。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> man1 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> man2 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
man1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//man1对象本身</span>
man2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//man2对象本身</span></code></pre>
<p>工厂模式解决了重复实例化的问题，但是还有一个问题，那就是识别问题，因为根本无法搞清楚他们到底是哪个对象的实例，如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> man1 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> man1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1 <span class="token keyword">instanceof</span> <span class="token class-name">createObject</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<p>instanceof的作用 是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。 以上案例中，man1应该是由createObject实例创建，但是它却返回false，而承认man1是Object的实例。</p>
<h4 id="2-4、构造函数创建对象"><a href="#2-4、构造函数创建对象" class="headerlink" title="2-4、构造函数创建对象"></a>2-4、构造函数创建对象</h4><p>构造函数创建对象，是使用较多的创建对象的方式，它也是将所有的操作都封装在函数中，但是与工厂模式的创建方式有很大不同，而且可以明确区分对象的种类。</p>
<p>构造函数创建对象的特点：</p>
<ul>
<li>构造函数首字母大写（为了区分普通函数，不是必须是约定）</li>
<li>构造函数方法没有显示的创建对象（new Object）</li>
<li>直接将属性和方法赋值给this对象</li>
<li>没有return语句，不需要返回对象</li>
<li>通过构造函数创建对象，必须使用new运算符（直接调用跟普通函数一样）</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不用new Object 直接通过this添加属性和方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> man1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该方法实例化一个对象必须使用new</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<p>以上这种调用构造函数创建对象，实际上会经历以下四个步骤：</p>
<ul>
<li>创建一个新对象；</li>
<li>将构造函数的作用域赋给新对象（this就指向了这个新对象）；</li>
<li>执行构造函数中的代码（为这个新对象添加属性）；</li>
<li>返回新对象（构造函数会自动return this）。</li>
</ul>
<p>new的作用：</p>
<ul>
<li>在内存中开辟一块内存</li>
<li>让this指向这个内存</li>
<li>把对象的属性和方法放到该内存里面</li>
<li>把对象的属性和方法返回</li>
</ul>
<p>构造函数中的this指向实例化的对象</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> that<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> man1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that <span class="token operator">===</span> man1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person&amp;nbsp;{name: "张三", eat: ƒ}</span></code></pre>
<p> 如果你在调用构造器函数时忘记了在前面加new前缀，那么this将不会绑定到一个新对象上，而是一个全局对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> that；
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> man2 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Window&amp;nbsp;{parent: Window, opener: null, top: Window, length: 0, frames: Window,&amp;nbsp;…}</span></code></pre>
<p>同一个方法，对象不同，存储的位置也不同，如果有多个对象则需要分配存储多次，内存消耗巨大。</p>
<h4 id="2-5、原型创造对象"><a href="#2-5、原型创造对象" class="headerlink" title="2-5、原型创造对象"></a>2-5、原型创造对象</h4><ul>
<li><p>prototype</p>
<p>每一个构造函数都会有一个显式属性：peototype属性，该属性指向了prototype对象（原型对象），原型对象上存储了这类构造函数对象共有的属性和方法的集合。当修改了原型对象上的属性和方法之后，被实例化的对象调用这些属性和方法都是被修改之后的，因为原型对象中的内容是共享的。</p>
</li>
<li><p><code>__proto__</code></p>
<p>通过构造函数实例化一个对象，被实例化的对象有一个隐式属性<code>__proto__</code>（对象原型），通过构造函数创建的对象之所以能访问属性和方法，就是因为有隐式属性<code>__proto__</code>指向了原型对象prototype，<code>__ptoto__</code>对象原型是一个非标准属性，是内部的一个指向，在实际开发中不使用。</p>
</li>
<li><p>constructor</p>
<p>原型对象有一个constructor属性，它指向构造函数，用来标识对象类型。我们可以用它来做对象的类型判断。实例化对象通过<code>__proto__</code>指向对象原型，对象原型又通过constructor属性指向构造函数，所以可以判断实例化对象的类型。（实例化对象的隐式属性<code>__proto__</code>也有constructor属性，它可以直接访问构造函数获取私有属性。当构造函数没有共享的属性和方法的时候，对象就直接通过<code>__proto__.constructor</code>指向构造函数。）</p>
</li>
</ul>
<img src="/posts/c9c1/13-1.png" class>

<p>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个constructor属性，该属性包含一个指向prototype属性所在函数的指针。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个构造函数</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>eat <span class="token operator">===</span> s2<span class="token punctuation">.</span>eat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true 通过原型对象创建的方法和属性都是共享的</span></code></pre>
<p>原型对象创建对象解决了内存浪费的问题，但是属性和方法都是共有的，不能传参，无法传入不同对象的私有属性，因此采用构造函数+原型对象混合模式创建对象。</p>
<h4 id="2-6、构造函数-原型对象混合模式创建对象"><a href="#2-6、构造函数-原型对象混合模式创建对象" class="headerlink" title="2-6、构造函数+原型对象混合模式创建对象"></a>2-6、构造函数+原型对象混合模式创建对象</h4><p>构造函数中存放私有属性和方法，通过参数改变，原型对象中存放共享属性和方法，该方法也是ECMAScript中使用最广泛、认同度最高的一种写法。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>address <span class="token operator">=</span> China<span class="token punctuation">;</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name <span class="token operator">+</span> s1<span class="token punctuation">.</span>address<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name <span class="token operator">+</span> s2<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三China 李四China</span>
</code></pre>
<p>当原型对象上以对象的形式存放属性和方法的时候，实例化的对象无法指向构造函数，它不知道自己是被哪个构造函数实例化出来的。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//分开存储，可以指向构造函数</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">'China'</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//ƒ Student(name, age) {</span>
<span class="token comment" spellcheck="true">//          this.name = name;</span>
<span class="token comment" spellcheck="true">//          this.age = age;</span>
<span class="token comment" spellcheck="true">//        }</span>
</code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//以对象形式存储，无法指向创建自己的构造函数</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    address <span class="token punctuation">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>
    eat <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ƒ Object() { [native code] }</span>
</code></pre>
<p>这个时候需要我们手动指向。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    constructor<span class="token punctuation">:</span>Student<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//自动指向</span>
    address <span class="token punctuation">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>
    eat <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//ƒ Student(name, age) {</span>
<span class="token comment" spellcheck="true">//          this.name = name;</span>
<span class="token comment" spellcheck="true">//        this.age = age;</span>
<span class="token comment" spellcheck="true">//  }</span>
</code></pre>
<h4 id="2-7、动态混合模式创建对象"><a href="#2-7、动态混合模式创建对象" class="headerlink" title="2-7、动态混合模式创建对象"></a>2-7、动态混合模式创建对象</h4><p>有人认为混合模式破坏了封装性，提出了动态混合模式创建(也称动态原型模式)。动态原型模式将所有信息封装在了构造函数中，而通过构造函数中初始化原型（仅第一个对象实例化时初始化原型），这个可以通过判断该方法是否有效而选择是否需要初始化原型。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eat<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I am eating</span>
</code></pre>
<h3 id="3、原型链"><a href="#3、原型链" class="headerlink" title="3、原型链"></a>3、原型链</h3><p> 几乎所有 JavaScript 中的对象都是位于原型链顶端的Object的实例 。当对象一个对象访问属性或方法的时候，会在自身查找有没有，如果没有，会通过<code>__proto__</code>到原型对象上查找，如果没有通过prototype原型对象的<code>__proto__</code>往上层层查找，最终找到Object的原型对象，如果还没有则返回null。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    constructor<span class="token punctuation">:</span>Person<span class="token punctuation">,</span>
    address <span class="token punctuation">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>
    eat <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<img src="/posts/c9c1/13-2.png" class>

<img src="/posts/c9c1/13-3.png" class>

<p>数组拓展原型链方法–数组求和</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//把求和的方法放到数组的原型链上</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>
</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js-Web模块</title>
    <url>/posts/4fce.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第六章-Node-js-Web模块"><a href="#第六章-Node-js-Web模块" class="headerlink" title="第六章 Node.js Web模块"></a>第六章 Node.js Web模块</h2><h3 id="什么是Web服务器？"><a href="#什么是Web服务器？" class="headerlink" title="什么是Web服务器？"></a>什么是Web服务器？</h3><p>Web服务器一般指网站服务器，是指驻留与因特网上某种类型计算机的程序，Web服务器的基本功能，就是提供Web信息浏览服务。它只需要支持HTTP协议、HTML文档格式及URL，与客户端的网络浏览器配合。</p>
<p>大多数web服务器都支持服务端的脚本语言php、python、ruby等，并通过脚本语言从数据库获取数据，将结果返回给客户浏览器。</p>
<p>目前最主流的web服务器是Apache、Nginx、IIS。</p>
<h3 id="Web应用架构"><a href="#Web应用架构" class="headerlink" title="Web应用架构"></a>Web应用架构</h3><ul>
<li>Client：客户端，一般指浏览器，浏览器可以通过HTTP协议向服务器请求数据。</li>
<li>Server：服务端，一般指Web服务器，可以接收客户端请求，并向客户端发送响应数据。</li>
<li>Business：业务层，通过Web服务器处理应用程序，如数据库交互、逻辑运算、调用外部程序等。</li>
<li>Data：数据层，一般由数据库组成。</li>
</ul>
<h3 id="使用Node创建Web服务器"><a href="#使用Node创建Web服务器" class="headerlink" title="使用Node创建Web服务器"></a>使用Node创建Web服务器</h3><p>Node.js提供了http模块，http模块主要用于搭建HTTP服务端和客户端，使用HTTP服务器或客户端功能必须调用http模块。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个服务，如果有url访问到了这个服务，回调函数执行。</span>
<span class="token comment" spellcheck="true">//回调函数形参request代表请求对象，里面存储请求的信息。</span>
<span class="token comment" spellcheck="true">//形参response代表响应对象</span>
http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//把服务监听3000端口号</span>
serve<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>request对象中有以下属性：</p>
<ul>
<li>url：请求的url地址</li>
</ul>
<p>response响应对象中有如下方法：</p>
<ul>
<li>write()：向响应对象添加信息</li>
<li>end()：代表本次响应结束</li>
<li>writeHead(status,{‘Content-Type’:‘text/html;charset=utf-8’})：设置响应头，有两个参数，第一个参数是状态码，第二个参数是对象，包含响应类型和编码格式。</li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP协议（超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的www文件都必须遵守这个标准。HTTP是一个基于TCP/IP通信协议来传递数据。（HTTP协议属于应用层，TCP/IP协议属于传输层和网络层，关于网络通信详见<a href="https://baike.baidu.com/item/TCP/IP%E5%8D%8F%E8%AE%AE/212915">TCP/IP协议</a>百度百科。）</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><p>支持客户端/服务器模型</p>
</li>
<li><p>简单快速</p>
<p>向服务器请求服务时，只需要传送请求方法和路径。请求方法常用的有GET、POST、HEAD。每种方法规定了客户于服务器的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度快。</p>
</li>
<li><p>灵活</p>
<p>HTTP允许传输任意类型对的数据对象，正在传输的类型由Content-Type加以标记，Content-Type类型可以百度MIME类型。</p>
</li>
<li><p>无连接</p>
<p>无连接的含义是限制每次连接只处理一个请求，服务器处理完客户端的请求，然后响应，并且收到应答之后就断开连接，这种方式可以节省传输时间。</p>
</li>
<li><p>无状态</p>
<p>HTTP协议是无状态协议，无状态协议是指协议对于事物处理没有记忆能力，这种方式的坏处就是如果后续的处理需要用到之前的信息，则必须要重传，这样就导致了每次连接传输的数据量增大。好处就是如果后续的连接不需要之前提供的信息，响应就会比较快，而为了解决HTTP的无状态特性，出现了Cookie和Session技术。</p>
</li>
</ul>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>HTTP协议是一个基于请求和应答模式的，存在于传输层的之上的应用协议，是一个无状态的协议，通常是基于TCP的连接方式。HTTP的URL是一中特殊类型的URL，包含了用于定位查找某个网络资源的路径，格式为包括如下：</p>
<ul>
<li>协议</li>
<li>域名/IP</li>
<li>端口号</li>
<li>相对路径</li>
</ul>
<h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>HTTP请求信息由如下三部分组成：</p>
<ul>
<li>请求方法URL协议/版本</li>
<li>请求头（Request Header）</li>
<li>请求正文</li>
</ul>
<h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h4><p>在接收和解释请求信息后，服务器返回一个HTTP响应信息。</p>
<p>HTTP响应由三部分组成：</p>
<ul>
<li>状态行，常见状态代码、状态描述、说明有：<ul>
<li>200：OK    //客户端请求成功</li>
<li>400：Bad Request    //客户端请求有语法错误，不能被服务器所理解</li>
<li>401：Unauthorized    //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</li>
<li>403：Forbidden    //服务器收到请求，但是拒绝提供服务。</li>
<li>404：Not Found    //请求资源不存在，如URL错误</li>
<li>500：Internal Server Error    //服务器发生不可预期的错误</li>
<li>503：Server Unavailiable    //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li>
</ul>
</li>
<li>消息报头：响应报头后述</li>
<li>响应正文：服务器返回的资源内容</li>
</ul>
<h4 id="HTTP工作过程"><a href="#HTTP工作过程" class="headerlink" title="HTTP工作过程"></a>HTTP工作过程</h4><ul>
<li><p>客户端连接到web服务器</p>
<p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认80）建立一个TCP套接字连接。</p>
</li>
<li><p>客户端发送HTTP请求</p>
<p>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头、空行、请求体四个部分构成。</p>
</li>
<li><p>服务器就收解释请求并返回HTTP响应</p>
<p>Web解析请求，定位请求资源，服务器将资源复写到TCP套接字，由客户端获取，一个响应由状态行、响应头、空行、响应数据4个部分。</p>
</li>
<li><p>客户端释放TCP连接</p>
<p>若Connection模式为close，则服务器主动关闭TCP连接，客户端被动关闭TCP连接，释放TCP连接。若Connection为keepalive，则该连接会保存一段时间，该时间内可以持续使用该连接接收请求，做出响应。</p>
</li>
</ul>
<h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><h4 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h4><p>专注于文件路径</p>
<h4 id="URL模块"><a href="#URL模块" class="headerlink" title="URL模块"></a>URL模块</h4><p>专注于处理url地址</p>
<h4 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h4><p>专注于url中使用get请求后面参数解析</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Web服务器</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js基础</title>
    <url>/posts/42fa.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第四章-Node-js基础"><a href="#第四章-Node-js基础" class="headerlink" title="第四章 Node.js基础"></a>第四章 Node.js基础</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node js"></a>Node js</h3><p>Node js基于google v8引擎，在服务器端支持JavaScript的一种运行环境。</p>
<p>Node.js主要用于编写想Web服务器一样的网络应用，这和PHP、Pyhton是类似的，但是Node.js与其他语言最大的不同之处在于，PHP等语言是阻塞的而Node.js是非阻塞的。Node.js是事件驱动的，开发者可以在不使用线程的情况下开发出一个能够承载高并发的服务器。其他服务端语言难以开发高并发应用，即使可以，性能也不尽人意。Node.js正是在这个前题下被创造出来。Node.js把JS的易学易用和Unix网络编程的强大结合在了一起。</p>
<p>Node.js和其他语言相比：</p>
<ul>
<li>Node.js不是一种独立语言，与PHP、JSP、Python的“既是语言又是平台”不同，Node.js使用JavaScript进行编程，运行在JavaScript引擎上（V8）。</li>
<li>与PHP，JSP相比（PHP、JSP、.net都需要运行在服务器程序上，Apache、Nginx、IIS。），Node.js跳过了这些HTTP服务器，它自己不用建设在任何服务器软件之上。Node.js的许多设计理念与经典架构（LAMP=Linux+Apache+MySQL+PHP）有很大的不同，可以提供强大的伸缩能力。</li>
</ul>
<h4 id="Node-js特点"><a href="#Node-js特点" class="headerlink" title="Node js特点"></a>Node js特点</h4><ul>
<li><h5 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h5><p>在Java、PHP等服务端语言中，会为每个客户端连接创造一个新的线程，因此，用户数量越多，服务器数量就越多，成本越大。</p>
<p>Node.js不为每个客户创建新的线程，而仅仅使用一个线程。Node.js处理请求是单线程的，但是后台拥有一个I/O线程池。当有用户连接了，就触发一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js宏观上也是并行的。</p>
<p>PHP等多线程中，每个线程耗费大约2M，一个8GB内存服务器同时连接的最大用户数量为4000个。使用Node.js一个8BG内存可以同时处理4万用户的连接。</p>
<p>单线程的好处还有：操作系统完全不再有线程创建、销毁的时间开销。但是坏处是，一个用户造成了线程的崩溃，整个服务器都崩溃了，其他用户也会崩溃。</p>
</li>
<li><h5 id="非阻塞I-O"><a href="#非阻塞I-O" class="headerlink" title="非阻塞I/O"></a>非阻塞I/O</h5><p>I/O操作指的是对磁盘的读写操作。异步I/O的概念和同步I/O相对。一个异步过程调用发出之后，调用者不能立即得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。在一个CPU密集型的应用中，有一些需要处理的数据可能放在磁盘上，预先直到这些数据位置，所以预先发起异步I/O读请求。等到真正需要用到这些数据的时候，再等待异步I/O完成。使用了异步I/O，在发起I/O请求到实际使用这些数据的这段时间内，程序还可以继续做其他事情。</p>
<p>当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。</p>
</li>
<li><h5 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h5><p>在Node.js中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node.js中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数时，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。</p>
<p>Node.js底层是C++(V8也是C++写的)。在底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度。用一个线程，担负了处理非常多的任务使命。</p>
</li>
</ul>
<p>由于单线程，如果一个事情进入，但是I/O被阻塞了，这个线程就被阻塞了。</p>
<p>但由于非阻塞I/O，不会等待I/O结束，而会执行后面的语句。</p>
<p>但如果在处理A业务的同时，B的I/O回调完成怎么办？</p>
<p>事件机制（事件环），不管是新用户的请求还是老用户的I/O完成，都将以事件方式加入事件换，等待调度。</p>
<h4 id="Node-js适合开发什么？"><a href="#Node-js适合开发什么？" class="headerlink" title="Node.js适合开发什么？"></a>Node.js适合开发什么？</h4><p>Node.js善于I/O，不善于计算。因为Node最擅长的就是任务调度，如果业务上有很多的CPU计算，实际上也相对于这个计算阻塞了单线程，就不适合Node.js开发。</p>
<p>当应用程序需要大量并发的I/O，而在客户端发出响应之前，应用程序内部不需要非常复杂处理的时候，Node.js非常合适。Node.js也非常适合与web socket配合，开发长连接的实时交互应用程序。如：</p>
<ul>
<li>Web服务API，比如REST。</li>
<li>实时多人游戏</li>
<li>后端的Web服务，如跨域、服务端的请求。</li>
<li>基于Web的应用</li>
<li>多客户端的通信，如即时通信。</li>
</ul>
<h4 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h4><p>Node.js官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>在LTS(稳定版)下，根据不同平台系统选择需要的Node.js安装包下载。安装过程中，均默认即可，安装目录可自定义选择。</p>
<h4 id="顶层对象"><a href="#顶层对象" class="headerlink" title="顶层对象"></a>顶层对象</h4><ul>
<li><p>浏览器：window</p>
</li>
<li><p>node js：global</p>
</li>
<li><p>ES6为了统一顶层对象，建议顶层对象为：globalThis。</p>
<p>在浏览器中它会自动为window，在node js中它自动为global。</p>
<p>并且，<strong>ES6中顶层对象的属性与全局变量脱离关系，即ES6中通过let、const等声明的全局变量不再global属性上。</strong></p>
</li>
</ul>
<h4 id="默认的全局变量"><a href="#默认的全局变量" class="headerlink" title="默认的全局变量"></a>默认的全局变量</h4><ul>
<li>__filename：当前js文件名(绝对路径)</li>
<li>__dirname：当前js文件路径(绝对路径)</li>
</ul>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><ul>
<li><p>指定大小创建，没有值时，默认为0</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;Buffer 00 00 00 00 00 00 00 00 00 00></span></code></pre>
</li>
<li><p>用字符串创建，类型必须是字符串(建议使用)</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'create a buffer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;Buffer 63 72 65 61 74 65 20 61 20 62 75 66 66 65 72></span></code></pre>
</li>
</ul>
<h4 id="buffer转字符串"><a href="#buffer转字符串" class="headerlink" title="buffer转字符串"></a>buffer转字符串</h4><p>Buffer.toString()，带一个参数，参数是编码方法，一般为utf-8。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'create a buffer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//create a buffer</span></code></pre>
<h4 id="写入缓存"><a href="#写入缓存" class="headerlink" title="写入缓存"></a>写入缓存</h4><p>Buffer.write(string[,offset[,length]] [,encoding])</p>
<p>参数分别是：写入缓冲的字符串、缓冲区开始写入的索引值（默认为0）、写入字节的长度（默认全度写入）、使用的编码方式（默认utf8），除第一个外其他都可省略。</p>
<p>返回实际写入的大小，如果buffer空间不足，则只会写入部分字符串。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;Buffer 61 62 63 64 00 00 00 00 00 00></span></code></pre>
<h4 id="读取缓存"><a href="#读取缓存" class="headerlink" title="读取缓存"></a>读取缓存</h4><p>Buffer.toString([encoding[,start[,end]]])</p>
<p>三个参数均可省略，分别是编码方式（默认utf8）、指定读取开始位置、结束位置。</p>
<p>返回读取的指定编码的字符串。</p>
<pre class=" language-js"><code class="language-js">buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//abcd</span></code></pre>
<h4 id="将Buffer转换为JSON对象"><a href="#将Buffer转换为JSON对象" class="headerlink" title="将Buffer转换为JSON对象"></a>将Buffer转换为JSON对象</h4><p>语法：Buffer.toJSON()，返回一个JSON对象。</p>
<p>当字符串实例化一个Buffer实例时，JSON.stringify()会隐式地调用toJSON()。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> json <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{ type: 'Buffer', data: [ 49, 50, 51, 52, 53 ] }</span></code></pre>
<h4 id="缓冲区合并"><a href="#缓冲区合并" class="headerlink" title="缓冲区合并"></a>缓冲区合并</h4><p>语法：Buffer.concat(list[,totalLength])，返回一个新合成的Buffer。</p>
<p>参数描述：</p>
<ul>
<li>list：用于合并的Buffer对象数组列表。</li>
<li>totalLength：指定合并后Buffer对象总长度。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buffer1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buffer2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buffer3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buffer1<span class="token punctuation">,</span>buffer2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三18</span></code></pre>
<h4 id="缓冲区长度"><a href="#缓冲区长度" class="headerlink" title="缓冲区长度"></a>缓冲区长度</h4><p>Buffer.length，返回Buffer对象所占据的内存长度。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">'张三18岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//11</span></code></pre>
<h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><p>模块：按照特定格式写出来的js文件。</p>
<p>Nodejs中采用CommonJS规范，按照规范书写和引用js文件。</p>
<h4 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h4><ul>
<li>module.exports. = { 自定义名1:模块名1,自定义名2:模块名2 }，简写为module.exports. = { 模块名1,模块名2 }：推荐使用</li>
<li>module.exports.自定义名 = 模块名</li>
<li>exports.自定义名 = 模块名：不推荐使用，因为一旦文件中出现了module.exports，用exports方法引用就失效了，它们不能同时出现。</li>
</ul>
<h4 id="引用模块"><a href="#引用模块" class="headerlink" title="引用模块"></a>引用模块</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>module：变量存放模块，可以是对象；require：模块引用关键字；filename：被引用的js文件名，后缀.js可以省略。</p>
<p>模块定义</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>sum<span class="token punctuation">,</span>sub<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>模块引用</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./25-module定义'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>
module<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre>
<h4 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h4><p>模块标识其实就是传递给require()方法的参数，它必须是符合小驼峰命名的字符串，或者相对路径/绝对路径，它可以没有文件名后缀.js。模块的定义十分简单，接口也十分简洁。它的意义在在于将聚类的方法和变量等限定在私有作用域中。每个模块具有独立的空间，它们互不干扰，在引用时也显得干净利落。</p>
<p>模块的标识就是模块的名字或路径，Node.js通过模块的标识来寻找模块。</p>
<p>对于核心模块，直接使用模块的名字对其进行引入。</p>
<p>对于自定义的模块，需要通过文件的路径来对模块进行引入。</p>
<h4 id="内置模块-核心模块"><a href="#内置模块-核心模块" class="headerlink" title="内置模块/核心模块"></a>内置模块/核心模块</h4><p>nodejs存在内置模块，require()总是会优先加载核心模块。</p>
<ul>
<li><p>http模块</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>fs模块</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></code></pre>
</li>
<li><p>事件模块</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="事件模块"><a href="#事件模块" class="headerlink" title="事件模块"></a>事件模块</h3><p>大多数Node.js核心API构建于惯用的异步事件驱动架构，其中某些类型的对象（又称触发器，Emitter）会触发命名事件来调用函数（又称监听器，Listener）。例如，net.Server会在每次有连接时触发事件，fs.ReadStream会在打开文件时触发事件，stream会在数据可读时触发事件。</p>
<p>所有能触发事件的对象都是EventEmitter类的实例。这些对象有一个eventEmitter.on()函数，用于将一个或多个函数绑定到命名事件上。事件的命名通常是驼峰式的字符串。当EventEmitter对象触发一个事件时，所有绑定在该事件上的函数都会被同步地调用。</p>
<h4 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//加载事件模块</span>
<span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//实例化一个事件对象</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//实例提供了两个方法</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'event1事件发生了'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把事件触发</span></code></pre>
<p>nodejs中没有固定事件，事件是自定义的，也存在事件对象e。event.emit()中第一个参数为事件名称，之后所有的参数都会当作参数传到事件的功能函数中，第一个参数事件名称不会当作参数传过去。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event2'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event2'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//[ 10, 20, 30 ]</span></code></pre>
<p>除了用on方法进行注册事件之外，还有以下方法进行事件注册。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//addListener()方法注册事件</span>
<span class="token keyword">let</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span>
<span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
event<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">'event3'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is event3!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//once()方法注册事件，该方法注册的事件只能只能执行一次，之后会被注销</span>
event<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'event4'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is event4!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre>
<h4 id="事件移除"><a href="#事件移除" class="headerlink" title="事件移除"></a>事件移除</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//该方法接收两个参数，一个是事件名称，第二个是回调函数名称</span>
<span class="token comment" spellcheck="true">//注意：该方法移除的事件，事件在添加事件时，必须是通过函数名添加的，如果是一个匿名函数添加事件，是没法用该方法移除的。</span>
event<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">'eName'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//移除该事件的所有事件</span>
event<span class="token punctuation">.</span><span class="token function">removeAllListeners</span><span class="token punctuation">(</span><span class="token string">'eName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="数量限制"><a href="#数量限制" class="headerlink" title="数量限制"></a>数量限制</h4><p>默认情况下，EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。 </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js文件系统</title>
    <url>/posts/ea0.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第五章-Node-js文件系统"><a href="#第五章-Node-js文件系统" class="headerlink" title="第五章 Node.js文件系统"></a>第五章 Node.js文件系统</h2><h3 id="文件系统简介"><a href="#文件系统简介" class="headerlink" title="文件系统简介"></a>文件系统简介</h3><p>Node.js提供一组类似UNIX标准的文件操作API，Node导入文件系统模块（fs）语法如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></code></pre>
<p>所有的文件系统操作都具有同步的、回调的、以及基于promise的形式。</p>
<h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><p>异步获取文件信息语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>stats<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>path：文件路径，如果是相对路径，参照路径不是当前文件，而是控制台node的启动路径。</p>
<p>callback：回调函数，带有两个参数（err，stats），err是异常，stats是fs.Stats对象，包含了文件的信息。</p>
<p>stats具有如下两个常用方法：</p>
<ul>
<li>stats.isFile()：判断是否是文件，是则返回true。</li>
<li>stats.isDirectory()：判断是否为目录，是则返回true。</li>
</ul>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>异步读取文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>同样也有path和callback两个参数，但是它还有另一个参数code为编码格式。</p>
<p>与fs.stats()不同的是，fs.readFile()回调函数中有两个参数（err,data），err是异常，data是读取到的数据。</p>
<p>同步读取文件语法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>code<span class="token punctuation">)</span></code></pre>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>异步覆盖写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>同步覆盖写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">)</span></code></pre>
<p>异步追加写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">appendFlie</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>同步追加写入文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>data<span class="token punctuation">)</span></code></pre>
<p>注意：</p>
<ul>
<li><p>写入文件时，当文件不存在时会创建文件，当path是带有文件夹的文件名时，文件不存在也能创建，但如果文件夹也不存在时，就会报错。</p>
</li>
<li><p>异步是通过err的形参接收异常，而同步如果发生错误则会直接报错。</p>
</li>
</ul>
<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>异步修改文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>oldName<span class="token punctuation">,</span>newName<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>除了修改文件，该方法还能修改路径，如果路径不存在则会报错。</p>
<p>同步修改文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span>oldName<span class="token punctuation">,</span>newName<span class="token punctuation">)</span></code></pre>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>异步删除文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>同步删除文件语法：</p>
<pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span></code></pre>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>如果path中被创建目录的父级目录存在才能创建，如果包含不存在的父级目录，则无法创建。</p>
<h3 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h3><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>回调函数中files参数是被读取目录下的文件/目录组成的数组，且只能读取一层。</p>
<h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>删除一个一个空目录。</p>
<p>以上方法创建和删除目录无法递归创建或者删除。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//同步方法递归删除</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> stats <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//如果是文件，直接删除</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//如果是文件夹，先读取所有子文件</span>
        <span class="token keyword">var</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//用path包提供的join()方法把要删除的目录及子文件拼成一个完整的路径</span>
            <span class="token function">deleteDir</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//子文件删除完之后删除自己</span>
        fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//异步方法</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token punctuation">;</span>
<span class="token keyword">const</span> Path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> stats <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> files <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Nodejs官方文档中，fs.redir()和fs.redirSync()方法给出了可以递归删除的参数，将{recursive:true}作为第二个参数，但是文档中说明了递归删除是实验的。</p>
<h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><h4 id="读取流"><a href="#读取流" class="headerlink" title="读取流"></a>读取流</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//创建一个读取流</span>
<span class="token keyword">var</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//设置读取流的编码</span>
readStream<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//绑定一个事件，每次读取一块内容都会触发data事件</span>
<span class="token comment" spellcheck="true">//在回调函数中，能够设置一个形参chunk，接收每次读取的那一小块内容</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    data <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//end事件代表所有内容读取完成</span>
readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//error事件代表程序出现错误</span>
readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建写入流</span>
<span class="token keyword">var</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//写入数据</span>
writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//标记文件末尾</span>
writeStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//处理流事件</span>
writeStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writeStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h3><p>管道提供了一个输出流到输入流的机制。通常我们从一个流中获取数据传递到另一个流中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建读取流</span>
<span class="token keyword">var</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//创建写入流</span>
<span class="token keyword">var</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//管道操作读写</span>
readStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node开发-ES6语法三</title>
    <url>/posts/cab8.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第三章-ES6语法三"><a href="#第三章-ES6语法三" class="headerlink" title="第三章 ES6语法三"></a>第三章 ES6语法三</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>JavaScript中生成实例对象的传统方法是通过构造函数和原型对象混合方法，但是这种写法跟传统的面向对象语言（如c++,java）差异很大。ES6提供了更接近传统面向对象编程的语法，引入了Class类的概念。但是它不过是一个语法糖，它的绝大部分功能ES5都可以做到，class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<p>注意点：类不可重复声明、类定义不会被提升、类中方法不需要function关键字、类中方法见不能加分号。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//传统写法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//class写法</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<p>表明：<strong>类的数据类型就是函数，类本身就指向构造函数。</strong></p>
<p>实际上，类的所有方法都定义在类的prototype属性上面。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//等同于</span>
Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>与ES5原型对象创建不同的是，class内部定义的方法是不可枚举的，ES5中原型对象的方法可枚举。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[]</span>

<span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person { eat: [Function] }</span></code></pre>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p>prototype</p>
<p>ES6中依旧存在prototype属性，虽然可以直接在类中定义方法，但是本质上还是定义在prototype上的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eat<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I am eating!</span></code></pre>
</li>
<li><p>静态属性</p>
<p>class本身的属性，用state关键字声明。<strong>静态属性、静态方法与类的普通属性、普通方法是两套机制，即使是同名属性和方法也不冲突，普通this指向普通属性，静态属性的this指向对应的静态属性。</strong></p>
</li>
<li><p>name</p>
<p>返回类名</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person</span></code></pre>
</li>
</ul>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>该方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类中必须有constructor方法，如果没有，一个空的constructor方法会被默认添加。</p>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>class通过extends和super关键字实现类的继承。</p>
<p>需要注意的是，在子类的构造函数中，只有调用super关键字后才能使用this，因为子类实例的构建基于父类实例，而只有super方法才能调用父类实例，<strong>所以this关键字必须在super之后</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address
    <span class="token punctuation">}</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I can run'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I can sing'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span>address<span class="token punctuation">,</span>sId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sId <span class="token operator">=</span> sId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法可以重写</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I can not run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am eating'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> s<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'jx'</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I can sing</span>
s<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I can not run</span>
s<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//I am eating</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>sId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//zs  1001</span></code></pre>
<p>ES6语法学习资料大多来自如下，致谢：</p>
<ul>
<li>阮一峰《ECMAScript6入门教程》<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li>
<li>菜鸟教程<a href="https://www.runoob.com/w3cnote/es6-tutorial.html">https://www.runoob.com/w3cnote/es6-tutorial.html</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>React入门</title>
    <url>/posts/e289.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第十四章-React入门"><a href="#第十四章-React入门" class="headerlink" title="第十四章 React入门"></a>第十四章 React入门</h2><h3 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>React是Facebook内部的一个JavaScript类库。</p>
<p>React用于创建Web用户交互界面。</p>
<p>React不是一个完整的MVC框架，只负责MVC中的V(View)视图层，甚至React不认可MVC开发模式。</p>
<p>React的设计思想极其独特，属于革命性创新，性能出众，代码逻辑简单。</p>
<p>React引入了虚拟DOM(Virtual DOM)的机制。</p>
<p>React引入了组件化的思想，一切皆组件。</p>
<p>React使用Facebook专门为其开发的一套语法糖–jsx。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li><p>虚拟DOM</p>
</li>
<li><p>组件化</p>
</li>
<li><p>JSX语法</p>
</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>组件化开发</li>
<li>引入虚拟DOM，性能好，响应速度快。</li>
<li>JSX语法</li>
<li>单向数据绑定</li>
<li>跨浏览器兼容</li>
<li>完善的生态圈和活跃的社区</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>不是完整的MVC框架</li>
<li>React本身不适合大型项目开发，但是如果要开发大型项目，可以借助react-router-dom、redux实现。</li>
</ul>
<h3 id="脚手架安装"><a href="#脚手架安装" class="headerlink" title="脚手架安装"></a>脚手架安装</h3><pre class=" language-shell"><code class="language-shell">#安装脚手架
cnpm i create-react-app -g

#创建项目
creeate-react-app reactdemo

#进入项目
cd reactdemo

#启动项目
npm start</code></pre>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><pre class=" language-markdown"><code class="language-markdown">-public    服务器目录

​    favicon.ico     页面图标

​    index.html    页面主入口

​    manifest.json    页面配置文件

-src     项目源码

​    index.js     入口文件

​    App.js     根组件

​    App.test.js    根组件测试

​    index.css    全局css样式

​    App.css    根组件样式

​    serviceWorker.js    离线访问服务

index.js与App.js是最重要的文件，其他文件均可根据需求可有可无。</code></pre>
<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// import './index.css';</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// import * as serviceWorker from './serviceWorker';</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token comment" spellcheck="true">// React.StrictMode为严格模式</span>
  <span class="token comment" spellcheck="true">//&lt;React.StrictMode></span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">//&lt;/React.StrictMode>,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// If you want your app to work offline and load faster, you can change</span>
<span class="token comment" spellcheck="true">// unregister() to register() below. Note this comes with some pitfalls.</span>
<span class="token comment" spellcheck="true">// Learn more about service workers: https://bit.ly/CRA-PWA</span>
<span class="token comment" spellcheck="true">// serviceWorker.unregister();</span></code></pre>
<h4 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// import logo from './logo.svg';</span>
<span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'张三'</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//return 里返回一段嵌套js的html代码</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>React中组件通过function App(){}中return返回，采用的是jsx语法。</p>
<p>()中书写html代码，{}中书写js代码，两者可以相互嵌套。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*一段注释*/</span><span class="token punctuation">}</span></code></pre>
<p>由于()中是html语法，所以不能直接使用<code>//</code>注释。也不能使用<code>{//}</code>注释。</p>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h4 id="非表单元素"><a href="#非表单元素" class="headerlink" title="非表单元素"></a>非表单元素</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> name <span class="token operator">=</span><span class="token string">"百度"</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>name<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h4 id="媒体元素-属性绑定"><a href="#媒体元素-属性绑定" class="headerlink" title="媒体元素/属性绑定"></a>媒体元素/属性绑定</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> imgUrl <span class="token operator">=</span> <span class="token string">""</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>imgUrl<span class="token punctuation">}</span></span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>imgUrl<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>采用三元运算符进行条件渲染</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>isShow <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>开启<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>结束<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></code></pre>
<h3 id="列表渲染-循环渲染"><a href="#列表渲染-循环渲染" class="headerlink" title="列表渲染/循环渲染"></a>列表渲染/循环渲染</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"王五"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
    <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">':'</span><span class="token operator">+</span> item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre>
<h3 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h3><p>React中的样式类名用className属性而不是class属性。</p>
<h4 id="动态类名"><a href="#动态类名" class="headerlink" title="动态类名"></a>动态类名</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*通过js逻辑选择类名*/</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h4 id="动态行间样式"><a href="#动态行间样式" class="headerlink" title="动态行间样式"></a>动态行间样式</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>background<span class="token punctuation">:</span><span class="token string">"orange"</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span><span class="token string">"#fff"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>这里出现了双大括号，外面的大括号表示js语法，里面的括号表示一个json格式。</p>
<p>这里不能使用以前的写法直接在style属性写样式，比如以下写法是错误的：</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background</span><span class="token punctuation">:</span><span class="token string">'orange'</span>,<span class="token property">color</span><span class="token punctuation">:</span><span class="token string">'#fff'</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="箭头函数绑定事件"><a href="#箭头函数绑定事件" class="headerlink" title="箭头函数绑定事件"></a>箭头函数绑定事件</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<h4 id="bind绑定"><a href="#bind绑定" class="headerlink" title="bind绑定"></a>bind绑定</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<p>通过bind绑定，bind第一个参数是this。</p>
<h4 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h4><p>箭头函数绑定事件传参直接传</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<p>bind绑定事件第一个参数是this，想传递的参数从第二个开始。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<h4 id="事件对象event"><a href="#事件对象event" class="headerlink" title="事件对象event"></a>事件对象event</h4><p>箭头函数绑定事件的event，通过箭头函数的参数传递event，而fun()中接收的位置可以自定义，如下第二个参数是event。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>e<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<p>bind绑定事件的event最后一个参数就是event，但是省略不写，接收的时候是最后一个参数接收。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><p>jsx接近原生js，不像Vue有修饰符，React中阻止默认事件需要通过原生js的事件对象实现。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>注意：React中不能用return false来阻止默认事件。</p>
<h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>也是采用原生js的事件对象实现。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="捕获事件"><a href="#捕获事件" class="headerlink" title="捕获事件"></a>捕获事件</h4><p>在事件名后加上Capture就是捕获事件。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClickCapture</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre>
<h4 id="弹窗案例"><a href="#弹窗案例" class="headerlink" title="弹窗案例"></a>弹窗案例</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token punctuation">,</span><span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token string">'../App.css'</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>

state<span class="token operator">=</span><span class="token punctuation">{</span>
    hideTag <span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    hideTag <span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">stopPro</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        hideTag<span class="token punctuation">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span class="token function">hide2</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//实现vue中的.self</span>
    <span class="token comment" spellcheck="true">// if(e.target.className ==="mask"){</span>
    <span class="token comment" spellcheck="true">//     this.hide();</span>
    <span class="token comment" spellcheck="true">// }</span>

    <span class="token comment" spellcheck="true">//短路实现</span>
    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">'mask'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">rightClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//有生命周期</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token comment" spellcheck="true">// 阻止传播实现弹窗消失</span>
        <span class="token comment" spellcheck="true">//    &lt;div></span>
        <span class="token comment" spellcheck="true">//        &lt;button onClick={this.show.bind(this)}>mask&lt;/button></span>
        <span class="token comment" spellcheck="true">//        {this.state.hideTag ? ( </span>
        <span class="token comment" spellcheck="true">//        &lt;div className="mask" onClick={this.hide.bind(this)}></span>
        <span class="token comment" spellcheck="true">//         &lt;div className="content" onClick={this.stopPro.bind(this)}></span>
        <span class="token comment" spellcheck="true">//             &lt;p>你确定要删除吗？&lt;/p></span>
        <span class="token comment" spellcheck="true">//             &lt;div className="btn"></span>
        <span class="token comment" spellcheck="true">//                 &lt;button onClick={()=>this.hide()} >取消&lt;/button></span>
        <span class="token comment" spellcheck="true">//                 &lt;button onClick={(e)=>this.hide(e)} >确定&lt;/button></span>
        <span class="token comment" spellcheck="true">//             &lt;/div></span>
        <span class="token comment" spellcheck="true">//         &lt;/div></span>
        <span class="token comment" spellcheck="true">//   &lt;/div>): null}</span>
        <span class="token comment" spellcheck="true">//    &lt;/div></span>

        <span class="token comment" spellcheck="true">//判断是否点击自身实现弹窗消失</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onContextMenu</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rightClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>mask<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hideTag <span class="token operator">?</span> <span class="token punctuation">(</span> 
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hide2<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你确定要删除吗？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ClassComponent</code></pre>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>与Vue一样，React中每个组件，但不同的是React中所有组件都是局部组件，要用需要引入，没有全局组件。</p>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><ul>
<li>组件名字首字母必须大写</li>
<li>且与vue不同的是，React中组件名字中间出现大写字母是可以的，不需要改成‘-小’写的形式。</li>
</ul>
<h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><h5 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token punctuation">,</span><span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>
    name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//可以自定函数绑定事件</span>
<span class="token function">changeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//有生命周期</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这是一个类定义组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ClassComponent</code></pre>
<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>函数定义组件相对来说更简单，但是无法绑定事件，也没有生命周期。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span>
<span class="token keyword">function</span> <span class="token function">FunComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这是一个函数定义组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> FunComponent</code></pre>
<h4 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> ClassComponent <span class="token keyword">from</span> <span class="token string">"./components/ClassComponent"</span>
<span class="token keyword">import</span> FunComponent <span class="token keyword">from</span> <span class="token string">"./components/FunComponent"</span>

<span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClassComponent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClassComponent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FunComponent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FunComponent</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre>
<h4 id="函数定义组件与类定义组件的区别"><a href="#函数定义组件与类定义组件的区别" class="headerlink" title="函数定义组件与类定义组件的区别"></a>函数定义组件与类定义组件的区别</h4><ul>
<li>类定义组件有生命周期，而函数定义的组件没有。</li>
<li>类定义组件接收父组件传递的值的this.props，函数定义的组件接收父组件传递的值是props。</li>
<li>类定义组件有state，函数定义的组件没有，state中数据改变会引起页面的重新渲染。</li>
</ul>
<h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><p>父组件通过自定义属性给子组件传值，函数定义的子组件通过函数参数接收，类定义的组件通过this.props接收。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*父组件传值给函数定义的子组件*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FunComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FunComponent</span><span class="token punctuation">></span></span>

<span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*父组件传值给类定义的子组件*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClassCom</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClassCom</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*类子组件接收父组件传的值*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*函数子组件接收父组件传的值*/</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">FunComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><p>父组件通过给子组件绑定自定义属性，值是一个函数，子组件通过this.props或者props触发。</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*函数定义的子组件 函数接收一个参数props*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>props<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>childData<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

<span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*类定义的子组件*/</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>childDta<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FunComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FunComponent</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClassCom</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">change</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hang</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClassCom</span><span class="token punctuation">></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite2+Vue3+TS+Eslint(Airbnb)+ElementPlus开发记录</title>
    <url>/posts/e1cc.html</url>
    <content><![CDATA[<h1 id="记录第一次使用Vite2-Vue3-TS-Eslint：使用Fabric-js做一个标注画板"><a href="#记录第一次使用Vite2-Vue3-TS-Eslint：使用Fabric-js做一个标注画板" class="headerlink" title="记录第一次使用Vite2+Vue3+TS+Eslint：使用Fabric.js做一个标注画板"></a>记录第一次使用Vite2+Vue3+TS+Eslint：使用Fabric.js做一个标注画板</h1><h3 id="使用Vite2创建项目"><a href="#使用Vite2创建项目" class="headerlink" title="使用Vite2创建项目"></a>使用Vite2创建项目</h3><p>Vite官网：<a href="https://www.vitejs.net/guide/">https://www.vitejs.net/guide/</a></p>
<p>以往Vue的项目如果使用cli需要先全局安装脚手架，再用命令创建项目，Vite创建项目跳过了这一步骤，详情可参考：<a href="https://www.pipipi.net/questions/13332.html">npm init @vitejs/app 到底干了什么</a>。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init @vitejs/app</code></pre>
<p>输入创建命令之后，npx会装一些依赖包，然后输入项目名选择模板，我这里选择vue，选择了vue之后还有一个vue-ts模板选项。</p>
<img src="/posts/e1cc/1.png" class>

<p>也可以直接通过指定项目名称和模板名称（具体模板名称见官网）：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init @vitejs/app my-vue-app --template vue</code></pre>
<p>npm版本不同命令会有所差别，具体查看官网。</p>
<h3 id="使用Eslint"><a href="#使用Eslint" class="headerlink" title="使用Eslint"></a>使用Eslint</h3><p>Eslint官网：<a href="http://eslint.cn/docs/user-guide/getting-started">http://eslint.cn/docs/user-guide/getting-started</a></p>
<p>Vue中使用Eslint单独安装一个eslint是不够的，还需要一些其他的包支持，如下：。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-vue -D</code></pre>
<p>说明：这里使用了<a href="https://github.com/lin-123/javascript">airbnb</a>语法规范，是一个比较流行的JavaScript语法规范。</p>
<p>安装完依赖包之后在项目根目录新增<code>.eslintrc.js</code>文件，配置如下，可自行修改：</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/vue3-essential'</span><span class="token punctuation">,</span> <span class="token string">'airbnb-base'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      ecmaVersion<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
      sourceType<span class="token punctuation">:</span> <span class="token string">'module'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 自己写一些想配置的规则</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    overrides<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 这里写覆盖vue文件的规则</span>
          <span class="token comment" spellcheck="true">//...</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>之后打开Vscode编辑器的Eslint功能即可。</p>
<p>使用参考：<a href="https://www.cnblogs.com/wenxinsj/p/14626660.html">vite2+Vue3+elementPlus+eslint</a></p>
<h3 id="让Eslint能够检测TS代码"><a href="#让Eslint能够检测TS代码" class="headerlink" title="让Eslint能够检测TS代码"></a>让Eslint能够检测TS代码</h3><p>上面已经默认安装ts，但要想让eslint检查ts语法，还需要安装另外两个插件(这两个插件的版本要保持一致)：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev</code></pre>
<p>然后在<code>.eslintrc.js</code>文件中添加配置：</p>
<pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/vue3-essential'</span><span class="token punctuation">,</span> <span class="token string">'airbnb-base'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    ecmaVersion<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
    sourceType<span class="token punctuation">:</span> <span class="token string">'module'</span><span class="token punctuation">,</span>
    parser<span class="token punctuation">:</span> <span class="token string">'@typescript-eslint/parser'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token string">'@typescript-eslint'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 自己写一些想配置的规则</span>
    <span class="token comment" spellcheck="true">//...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  overrides<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 这里写覆盖vue文件的规则</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*.ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    parser<span class="token punctuation">:</span> <span class="token string">'@typescript-eslint/parser'</span><span class="token punctuation">,</span>
    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@typescript-eslint'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 这里写覆盖ts文件的规则</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>如果发现对ts文件无效，可能是vscode配置中没有添加eslint对ts的支持，需要在vscode的setting.json文件的<code> "eslint.validate"</code>中加上一行：<code>"javascriptreact"</code>，表示对ts文件进行检查，如下：</p>
<pre class=" language-json"><code class="language-json">  // 添加对文件的支持
  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"javascript"</span><span class="token punctuation">,</span>
    <span class="token string">"vue"</span><span class="token punctuation">,</span>
    <span class="token string">"html"</span><span class="token punctuation">,</span>
    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre>
<p>参考：<a href="https://www.cnblogs.com/yshenhua/p/14255379.html">如何让 ESLint 同时检测 js 和 ts</a></p>
<p>致谢：<a href="https://www.pandaomeng.com/2019/05-06-vscode-eslint-typscript/">VScode下搭配ESLint、typescript-eslint的代码检查配方</a></p>
<h3 id="Eslint错误处理"><a href="#Eslint错误处理" class="headerlink" title="Eslint错误处理"></a>Eslint错误处理</h3><p>这个项目也是第一次使用Eslint，以前觉得麻烦不想用，现在逐渐觉得代码规范很有必要，因此开始逐渐尝试，也会遇到很多问题，需要耐心，一个个去解决，慢慢就会越来越熟练了。</p>
<p>就比如我的项目开启eslint后，出现如下问题：</p>
<p>缩进格式报错<code>Expected indentation of 4 spaces but found 6.</code>：</p>
<img src="/posts/e1cc/2.png" class>

<p>将光标移动到红色区域，点击<code>快速修复</code>选择<code>Fix all indent problems</code>或者<code>Fix all auto-fixable problems</code>即可自动修复。</p>
<p>另外，文件末尾报错<code>Newline required at end of file but not found</code>：</p>
<img src="/posts/e1cc/3.png" class>

<p>提示是eslint中的<code>eol-last</code>规则，需要在文件末尾以换行结束。</p>
<p>但是我换行后保存，光标又自动回到了上一行然后保存，猜测应该是vscode自动保存的设置。</p>
<p>查阅之后将vscode的保存自动格式化(Format On Save)关闭即可：<code>"editor.formatOnSave":  false </code>。</p>
<p>如果你的vscode中的eslint配置了每次保存时按eslint格式保存并修复：<code>"source.fixAll.eslint":  true </code>，以上错误都不需要我们手动修复，直接保存文件，大部分错误eslint都够按配置自动修复。</p>
<h3 id="使用Element-Plus"><a href="#使用Element-Plus" class="headerlink" title="使用Element-Plus"></a>使用Element-Plus</h3><p>由于vue3.0在插件install函数的入参从Vue原型（类）改成了app（vue实例），导致element-ui中<code>Vue.prototype.*</code>这样的代码已经全都失效了。所以element-ui不兼容vue3，需要使用Vue3专属的Element-Plus。</p>
<p>Element-Plus官网：<a href="https://element-plus.org/#/zh-CN/component/installation">https://element-plus.org/#/zh-CN/component/installation</a></p>
<p>安装</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> element-plus --save</code></pre>
<p>main.ts引入</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>

<span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'element-plus/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre>
<p>————————————-6月25日更————————————-</p>
<p>项目已经完成，用ts开发到一半放弃了，等之后ts熟练了再用吧，还是继续用js，项目结构没变，把Vue页面的script中<code>lang</code>改为javascript即可，继续记录。</p>
<h3 id="使用fabric-js"><a href="#使用fabric-js" class="headerlink" title="使用fabric.js"></a>使用fabric.js</h3><p>安装</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i fabric --save</code></pre>
<p>在vue中引入</p>
<pre class=" language-vue"><code class="language-vue">import { fabric } from 'fabric';</code></pre>
<h3 id="使用iconfont"><a href="#使用iconfont" class="headerlink" title="使用iconfont"></a>使用iconfont</h3><p>iconfont官网：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p>
<p>找好图标后，将图标加入到一个项目，我这里选择symbol方式下载到本地使用。</p>
<p>在项目目录src/assets中新建iconfont目录，目录下新建iconfont.css和iconfont.js文件。</p>
<p>iconfont图标项目中点击生成的js代码，将其中所有复制到iconfont.js中，如果开启了eslint，最好在第一行加这一行代码，让eslint不检查改文件。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* eslint-disable */</span></code></pre>
<p>将如下内容，复制到iconfont.css中：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.icon</span> </span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> -<span class="token number">0.15</span>em<span class="token punctuation">;</span>
    <span class="token property">fill</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>在mian.ts中引入：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'./assets/iconfont/iconfont.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">'./assets/iconfont/iconfont'</span><span class="token punctuation">;</span></code></pre>
<p>使用图标，<code>#</code>号后面就是线上iconfont图标项目中各个图标的代码。</p>
<pre class=" language-vue"><code class="language-vue"><svg class="icon" aria-hidden="true">
  <use xlink:href="#icon-gudingdaxiao"></use>
</svg></code></pre>
<h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><p>运行<code>npm run bulid</code>命令可将项目打包成静态文件，如果报错查看<code>package.json</code>文件中build指令后是否将<code>tsc --noEmit</code>加入，这是检查ts语法，将其删除，只用<code>vite bulid</code>命令打包即可。</p>
<p>具体功能就不详细描述了，最终效果如下：</p>
<img src="/posts/e1cc/4.png" class>

<p>线上地址：<a href="http://drawingboard.eternitywith.xyz/">http://drawingboard.eternitywith.xyz/</a></p>
<p>代码仓库：<a href="https://gitee.com/eternitywith/fabric.js_drawing-board">gitee</a>、<a href="https://github.com/eternitywith/fabric.js_annotation">github</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Fabric.js</tag>
        <tag>Vite</tag>
        <tag>TypeScript</tag>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-入门</title>
    <url>/posts/84c5.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第一章-Vue入门"><a href="#第一章-Vue入门" class="headerlink" title="第一章 Vue入门"></a>第一章 Vue入门</h2><h3 id="节点赋值（复习）"><a href="#节点赋值（复习）" class="headerlink" title="节点赋值（复习）"></a>节点赋值（复习）</h3><ul>
<li><p>非表单元素</p>
<p>js：innerHTML</p>
<p>jQuery：html()</p>
</li>
<li><p>表单元素</p>
<p>js：value()</p>
<p>jquery：val()</p>
</li>
<li><p>媒体元素</p>
<p>js：src</p>
<p>jQuery：attr(‘src’,‘1.jpg’)</p>
</li>
</ul>
<h3 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h3><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p>
<p>Vue是一款渐进式JavaScript框架，采用自底向上增量开发的设计，只关注视图层，易于上手。</p>
<p>Vue核心：数据驱动+组件系统</p>
<p>优点：</p>
<ul>
<li>模块友好化</li>
<li>易用、灵活、高校</li>
<li>SPA(single page application)单页面应用，用户体验好</li>
</ul>
<p>缺点：</p>
<ul>
<li>Vue不兼容ie8及以下版本</li>
<li>首屏加载慢</li>
<li>不利于SEO优化</li>
</ul>
<p>安装：</p>
<ul>
<li><p>CDN引入</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 生产环境版本，优化了尺寸和速度 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>NPM下载</p>
<pre class=" language-shell"><code class="language-shell">npm install vue</code></pre>
</li>
<li><p>cli（脚手架）</p>
<p>详见Vue组件章节。</p>
</li>
</ul>
<h3 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>
        src<span class="token punctuation">:</span><span class="token string">'1.jpg'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="el：挂载点"><a href="#el：挂载点" class="headerlink" title="el：挂载点"></a>el：挂载点</h4><ul>
<li>不能挂载到body、html上，要挂载到正常的元素上。</li>
<li>一个vue实例只能挂载到一个节点上，所以一般使用id选择器。</li>
<li>如果有好几个元素都满足el的选择，vue实例挂载到满足条件的第一个节点上。</li>
</ul>
<h4 id="data：属性"><a href="#data：属性" class="headerlink" title="data：属性"></a>data：属性</h4><p>存放vue对象的属性（变量），需要先声明后使用，且只有在vue对象内的变量才在该vue实例中有用。</p>
<h4 id="methods：方法"><a href="#methods：方法" class="headerlink" title="methods：方法"></a>methods：方法</h4><p>存放vue对象的方法。</p>
<h3 id="绑定数据（非表单元素）"><a href="#绑定数据（非表单元素）" class="headerlink" title="绑定数据（非表单元素）"></a>绑定数据（非表单元素）</h3><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><p>要在HTML元素中使用vue，可以使用双大括号，双大括号内必须使用js语法，但是每一个双大括号内只能有一句js，可以是变量、三目运算符、方法等，但是不能有if、for等，且双大括号内不能有{}。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span><span class="token punctuation">></span></span> {{name+':'+age}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- zs:18 --></span></code></pre>
<p>优点：方便、简单</p>
<p>缺点：不能解析标签；首屏会出现闪屏问题（vue加载有延迟，造成双大括号暂时无法解析。）</p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>hello,<span class="token punctuation">'</span>+name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- hello,zs --></span></code></pre>
<p>优点：可以解析标签（一般用在首屏和详情页）</p>
<p>缺点：不方便</p>
<h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>hello,<span class="token punctuation">'</span>+name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- hello,zs --></span></code></pre>
<p>缺点：不方便，不能解析标签。</p>
<h3 id="MVVM模式（表单元素）"><a href="#MVVM模式（表单元素）" class="headerlink" title="MVVM模式（表单元素）"></a>MVVM模式（表单元素）</h3><p>v-model</p>
<p>M-model模型、V-view视图、VM-viewModel视图模型</p>
<p>模型通过 视图模型 控制视图，视图通过 视图模型 修改模型。</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- div中的name会随着input中的输入值改变而改变 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>name<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="属性绑定（媒体元素）"><a href="#属性绑定（媒体元素）" class="headerlink" title="属性绑定（媒体元素）"></a>属性绑定（媒体元素）</h3><p>v-bind</p>
<p>可以绑定已有或者自定义属性。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>src<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 可以简写成 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>src<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>注意点：当HTML标签的属性绑定了vue之后的变量之后，该属性后面引号内的值就是js语法，这里会出现数据类型的问题。</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 这里的age是字符串类型的10 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>10<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 这里的age是数值类型的10 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>10<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 这里的age是字符串类型的10 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div<span class="token punctuation">'</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>10<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>v-if：条件渲染，如果条件为true则节点显示，条件为false则节点消失（节点不加载/惰性加载）。</p>
<p>v-show：条件渲染，如果条件为true则节点显示，条件为false则节点消失（新增属性display：none）。</p>
<p>使用：频繁切换时使用v-show，不频繁切换使用v-if。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>false<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>v-else可以与v-if搭配使用，但是相邻的两个之间不能有任何元素间隔。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h3 id="循环渲染"><a href="#循环渲染" class="headerlink" title="循环渲染"></a>循环渲染</h3><p>v-for</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ul<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{index}}：{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'ul'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        comment<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'非常好'</span><span class="token punctuation">,</span><span class="token string">'一般般'</span><span class="token punctuation">,</span><span class="token string">'很棒，下次还来买！'</span><span class="token punctuation">,</span><span class="token string">'赞'</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>与key关键字搭配使用，实现Vue的v-for更新DOM时实现就地更新，只渲染被改变的DOM，提高更新性能。key后面跟上数据的唯一标识，并且用v-bind指令绑定该属性。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in data<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item.id<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="动态行间样式"><a href="#动态行间样式" class="headerlink" title="动态行间样式"></a>动态行间样式</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--语法--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value">json</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>bg<span class="token number">1</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">bg<span class="token number">2</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>NNNN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        bg1<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">,</span>
        bg2<span class="token punctuation">:</span><span class="token punctuation">{</span>
            background<span class="token punctuation">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span>
            borderRadius<span class="token punctuation">:</span><span class="token string">'5px'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="动态类名"><a href="#动态类名" class="headerlink" title="动态类名"></a>动态类名</h4><ul>
<li><p>变量：v-bind:class=‘变量’</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>className<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>三元运算符：:class=‘[逻辑]’，虽然不用[]也可以实现，但是Vue官方建议用[]包裹运算逻辑。</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--通过控制isRed变量的值来控制选择是red类名还是blue类名，这种情况只能控制两种类--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[isRed?<span class="token punctuation">'</span>red<span class="token punctuation">'</span>:<span class="token punctuation">'</span>blue<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>多类名使用：:class=“{class1:true,class2:false,…}”，类名后面可以跟逻辑运算，该方法可以便捷实现隔行变色。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in arr<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span>:index%3<span class="token punctuation">=</span><span class="token punctuation">=</span>0,<span class="token punctuation">'</span>blue<span class="token punctuation">'</span>:index%3<span class="token punctuation">=</span><span class="token punctuation">=</span>1,<span class="token punctuation">'</span>yellow<span class="token punctuation">'</span>:index%3<span class="token punctuation">=</span><span class="token punctuation">=</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-监听器、计算属性、过滤器和过渡动画</title>
    <url>/posts/26f7.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第三章-Vue监听器、计算属性、过滤器和过渡动画"><a href="#第三章-Vue监听器、计算属性、过滤器和过渡动画" class="headerlink" title="第三章 Vue监听器、计算属性、过滤器和过渡动画"></a>第三章 Vue监听器、计算属性、过滤器和过渡动画</h2><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>Vue提供了watch选择项，这是一个更通用的方法来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有效的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//浅监听，参数可省略</span>
        <span class="token function">value</span><span class="token punctuation">(</span>newV<span class="token punctuation">,</span>oldV<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//逻辑</span>
        <span class="token punctuation">}</span>，
        <span class="token comment" spellcheck="true">//深度监听不建议使用，因为会造成页面卡顿，如果要使用的话，建议转换成简单类型使用。</span>
        json<span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//逻辑</span>
            <span class="token punctuation">}</span>，
            deep<span class="token punctuation">:</span><span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>注意：优就业课本上说监听数组也需要深度监听，但是亲测，监听数组不需要深度监听，浅监听就可以，不管是一层还是嵌套多层。如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>arr[0]<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arr1[2][1]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        arr1<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr改变了！'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">arr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr1改变了！"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//改变输入框的值，均能触发监听器。</span></code></pre>
<p>有博主分析Vue源码得出结论，watch监听判断的是数据否是对象类型，是对象类型则必须使用深度监听，不论是一层才是多层。</p>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Vue允许自定义过滤器，可用于一些常见的文本格式化。</p>
<p>目的：转换数据</p>
<p>使用： 双括号、v-bind</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--{{ | }}--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    {{变量 | 过滤器名称}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!--v-bind，该方法从2.1.0版本之后开始支持--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变量 | 过滤器名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>定义：推荐全局定义</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局定义</span>
Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"过滤器名称"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>过滤对象<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//逻辑 </span>
    <span class="token keyword">return</span> <span class="token string">"你要的结果"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//局部定义</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    filters<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//全局定义</span>
        <span class="token function">过滤器名称</span><span class="token punctuation">(</span>过滤对象<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//逻辑 </span>
            <span class="token keyword">return</span> <span class="token string">"你要的结果"</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>Vue提供了计算属性，它不需要在data里面定义，就能返回需要的值，并且能进行大量计算。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    computed<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//计算属性</span>
        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">10</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">ava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//运算逻辑</span>
            <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
                sum<span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">.</span>score
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">//通过return返回</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>sum<span class="token operator">/</span><span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>在Vue中，计算属性可以被视为是data一样的，可以读取和设值，因此在计算属性中可以分成getter和setter，一般情况下是没有setter的，computed预设只有getter，也就是只能读取，不能改变，设值，但是可以通过依赖变量改变值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        b<span class="token punctuation">:</span> <span class="token number">4</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//计算属性</span>
        c<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c被获取了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//设置的值</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set：'</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//实际c的值</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>a<span class="token punctuation">'</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>b<span class="token punctuation">'</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>=
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>原始状态</p>
<img src="/posts/26f7/3-1.png" class>

<p>改变a时，get()方法被调用。</p>
<img src="/posts/26f7/3-2.png" class>

<p>改变c绑定的输入框，c的值并不会被改变，只是set()方法被调用了。</p>
<img src="/posts/26f7/3-2.png" class>

<p>注意：</p>
<p>1、v-for和v-if不能作用在同一个标签，虽然有时候有效果，但是Vue官方声明该语法不合法。这时候可以用计算属性computed解决该方面的需求。</p>
<p>参考：<a href="https://cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8">https://cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8</a></p>
<p>2、如果数组数据改变，页面不渲染，可以采用以下方法解决。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1、this.arr.splice(下标,1,新值);</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//2、vm.$set(arr,下标,新值)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span>index<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//3、Vue.set(arr,下标,新值)</span>
Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">,</span>index<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span></code></pre>
<p>3、如果是json数据发生了改变，页面不渲染，可以用以下方法解决。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1、vm.$set</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>json<span class="token punctuation">,</span>改变的属性<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//2、Vue.set</span>
Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>json<span class="token punctuation">,</span>改变的属性<span class="token punctuation">,</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>ajax不能跨域 get、post</p>
<p>jsonp可以跨域，只能以 get方式请求</p>
<p>jsonp跨域的要求：提供回调函数（一般是callback或cb）和数据接口的规则。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
        results<span class="token punctuation">:</span> <span class="token string">''</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//console.log(this.value)</span>
                <span class="token comment" spellcheck="true">//创建script标签</span>
                <span class="token keyword">var</span> os <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//设置src属性</span>
                os<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://api.asilu.com/fanyi?callback=cbb&amp;q="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//将src属性添加到页面中</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//回调函数必须是全局函数</span>
<span class="token keyword">function</span> <span class="token function">cbb</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vm<span class="token punctuation">.</span>results <span class="token operator">=</span> d<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>Vue在插入、更新或者移除DOM时，提供多种不同方式的应用过渡效果，包括以下工具：</p>
<ul>
<li>在CSS过渡和动画中自动应用class</li>
<li>可以配合使用第三方CSS动画库，如Animate.css</li>
<li>在过渡钩子函数中使用js直接操作DOM</li>
<li>配合使用第三方js动画库，如Velocity.js</li>
</ul>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p> Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡 。</p>
<ul>
<li>条件渲染（v-if）</li>
<li>条件展示（v-show）</li>
<li>动态组件</li>
<li>路由</li>
</ul>
<p>当插入或删除包含在 <code>transition</code> 组件中的元素时，Vue 将会做以下处理：</p>
<ul>
<li>1-自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。</li>
<li>2-如果过渡组件提供了 <a href="https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90">JavaScript 钩子函数</a>，这些钩子函数将在恰当的时机被调用。</li>
<li>3-如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 <code>nextTick</code> 概念不同)</li>
</ul>
<h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p> 在进入/离开的过渡中，会有 6 个 class 切换：</p>
<ul>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-enter-to</code>：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li>
<li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-leave-to</code>：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>!isshow<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>animate<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box<span class="token punctuation">'</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isshow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre>
<p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>，则 `v-` 是这些类名的默认前缀。如果你使用了 </code>（如上面取名为<code>‘animate’</code>），那么 <code>v-enter</code> 会替换为<code>animate-enter</code>。 </p>
<p> <code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入/离开过渡的不同的缓和曲线 。</p>
<p>这里只简要介绍了Vue动画的部分内容，详情参考<a href="https://cn.vuejs.org/v2/guide/transitions.html">官网</a>。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-表单数据绑定、修饰符和生命周期</title>
    <url>/posts/a0dc.html</url>
    <content><![CDATA[<h1 id="前端框架学习笔记"><a href="#前端框架学习笔记" class="headerlink" title="前端框架学习笔记"></a>前端框架学习笔记</h1><h2 id="第二章-Vue表单数据绑定、修饰符、生命周期"><a href="#第二章-Vue表单数据绑定、修饰符、生命周期" class="headerlink" title="第二章 Vue表单数据绑定、修饰符、生命周期"></a>第二章 Vue表单数据绑定、修饰符、生命周期</h2><h3 id="表单数据绑定"><a href="#表单数据绑定" class="headerlink" title="表单数据绑定"></a>表单数据绑定</h3><p>所有表单元素都可以使用v-model绑定数据。</p>
<h5 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h5><p>表单中的文本包括文本框和文本域，都可以通过v-model进行数据的双向绑定。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>value<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>value<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre>
<h5 id="单选钮"><a href="#单选钮" class="headerlink" title="单选钮"></a>单选钮</h5><p>单选钮中v-model绑定的是value，哪一个被选中，被绑定的变量的值就是对应的value值。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>sex<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>man<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>男
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>sex<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>women<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>女
<span class="token comment" spellcheck="true">&lt;!--男被选中sex值为man，女被选中sex值为women--></span></code></pre>
<h5 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h5><p>复选框中，v-model绑定的也是value，但是区分单个和多个。</p>
<p>如果只有一个复选框或者绑定的变量hobby为一个字符串（这种情况即使有多个复选框，只要改变一个复选框的状态，其他复选框状态也会跟着被改变。），则hobby的值为true（被选中）或false（未选中）。</p>
<p>如果被绑定的变量hobby为一个数组，则数组的值就是对应的value值，值的排列顺序为复选框被选中的先后顺序。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>音乐
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>舞蹈
<span class="token comment" spellcheck="true">&lt;!--依次选中舞蹈和音乐，hobby的值为['1','0']--></span></code></pre>
<p>拓展：上述案例中如果需要把hobby的值变为数值类型，则需要<strong>在被绑定的属性前使用v-bind指令，将被绑定的属性后面变为js语法</strong>，如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>音乐
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hobby<span class="token punctuation">'</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>舞蹈
<span class="token comment" spellcheck="true">&lt;!--依次选中舞蹈和音乐，hobby的值为[1,0]--></span></code></pre>
<h5 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h5><p>v-model绑定选择列表（列表多选需要加上mutiple属性），和复选框一样，被选择的选项的value组成数组。</p>
<h4 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h4><ul>
<li>.lazy-默认情况下通常是输入数据时绑定数据，如果加上了改修饰符，则被绑定的值不会立即改变，而是会等到输入框失去焦点时改变。</li>
<li>.number-将绑定的数据的数据类型转为number类型，当然，仅限数值类型的字符串。</li>
<li>.trim-该修饰符能够自动过滤用户输入的首尾空白字符串。</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击绑定fun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 可以简写成如下 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击绑定fun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--当函数没有参数时，可以省略括号--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击绑定fun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<h4 id="事件对象：-event"><a href="#事件对象：-event" class="headerlink" title="事件对象：*$event*"></a>事件对象：*<code>$event</code>*</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--显示获取event对象--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun($event)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>获取event<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--隐式获取event对象，绑定函数时，圆括号不写，默认参数就是event对象。如果写了圆括号但是没有参数，则e就是undefined。--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>获取event<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h4 id="阻止事件默认行为"><a href="#阻止事件默认行为" class="headerlink" title="阻止事件默认行为"></a>阻止事件默认行为</h4><p>vue修饰符写法：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@contextmenu.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>阻止右键默认行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!--还可以搭配按键码使用--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@keydown.38.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>阻止上方向键的按下默认行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!--38代表的是上方向键，在输入框中输入文字后按下上方向键焦点会从文字末尾跳到文字最前面，有些情况需要阻止该默认行为。--></span>
</code></pre>
<p>也可以在函数中自动阻止：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'app'</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//由于vue不支持低版本，不需要考虑低版本兼容。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>原生兼容封装写法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">stopDefault</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h4><p>vue修饰符写法：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fun<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>阻止点击事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>在函数中手动阻止：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span><span class="token string">'app'</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token function">fun</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//由于vue不支持低版本，不需要考虑低版本兼容。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>原生兼容封装写法：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">stopBubble</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul>
<li>.prevent-阻止默认行为</li>
<li>.stop-阻止事件传播</li>
<li>.once-控制指定的事件只执行一次</li>
<li>.self-触发的目标元素是自身才执行</li>
<li>.capture-捕获</li>
<li>.native-解决组件绑定不上事件</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--阻止右击默认事件--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">@contextmenu.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="键盘修饰符"><a href="#键盘修饰符" class="headerlink" title="键盘修饰符"></a>键盘修饰符</h4><p>键盘修饰符可以是按键名称，也可以时是对应的编码值。</p>
<ul>
<li>.left(.37)</li>
<li>.up(.38)</li>
<li>.right(.39)</li>
<li>.down(.40)</li>
<li>.enter(.13)</li>
<li>.tab</li>
<li>.delete(包括delete和backspace键)</li>
<li>.esc</li>
<li>.space-特定键盘按键的修饰符。</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keydown.left.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">@keydown.right</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h4><ul>
<li>.left-鼠标左键</li>
<li>.middle-鼠标中间滚轮</li>
<li>.right-鼠标右键</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.right</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<p>注意和上面的键盘修饰符区分，前面的事件有所不同。</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Vue实例在被创建之前都要有一个初始化过程，有一个完整的生命周期，也就是从创建开始、数据初始化、编译模板、挂载DOM、渲染、更新、卸载等一系列过程，被称为Vue的生命周期。同时在这个过程中也会运行一些叫做声明周期钩子的函数，可以在不同阶段的函数内添加代码。</p>
<img src="/posts/a0dc/2-1.png" class>



<pre><code class="js">var vm = new Vue({
    el: "#app",
    data: {
        name: '百念成诗',
        nowTime: new Date(),
        arr: [{
            id: 1,
            name: '甄姬'
        }, {
            id: 2,
            name: "虞姬"
        },
         {
            id: 3,
            name: '阿离'
          }
         ]
    },
    /*-------------------创建期：创建vue实例--------------------*/
    //创建之前
    beforeCreate() {
        console.group('创建之前');
        console.log('el', this.$el);
        console.log("data", this.$data);
        console.log('name', this.name);
        console.groupEnd();
    },
    //创建完成：vue实例数据初始化完成，el还是undefined
    created() {
        console.group("创建完成");
        console.log('el', this.$el);
        console.log("data", this.$data);
        console.log('name', this.name);
        console.groupEnd();
    },
    /*--------------------挂载期---------------------------*/
    //挂载之前：找到了要挂载的节点，但是{{}}、指令等还没有被解析。
    beforeMount() {
        console.group("挂载之前");
        console.log('el', this.$el);
        console.log("data", this.$data);
        console.log('name', this.name);
        console.groupEnd();
    },
    //挂载完成：页面初始化完成，可以进行开启计时器、轮播图、Ajax、操作DOM节点、给window/document添加事件等。
    mounted() {
        console.group("挂载完成");
        console.log('el', this.$el);
        console.log("data", this.$data);
        console.log('name', this.name);
        console.groupEnd();

        this.timer = setInterval(() =&gt; {
            this.nowTime = new Date();
        }, 1000)
    },
    /*----------------更新期----------------*/
    //页面更新之前：不是数据变化之前，而是数据以及变了，页面重新渲染之前。
    beforeUpdate() {
        console.group("更新之前");
        console.log('el', this.$el);
        console.log("data", this.$data);
        console.log('name', this.name);
        console.groupEnd();
    },
    //页面更新完成：数据变了，页面再次渲染完成
    update() {
        console.group("更新完成");
        console.log('el', this.$el);
        console.log("data", this.$data);
        console.log('name', this.name);
        console.groupEnd();
    },
    /*-----------------销毁期--------------*/
    //卸载之前：善后工作。清除定时器、轮播图、window/document置空等
    beforeDestroy() {
        console.log("销毁之前");
        console.log(this.name);
        window.onscroll = null;
    },
    //卸载完成
    destroyed() {
        console.log("销毁完成");
        console.log(this.name);
    }
})
//点击按钮销毁vue实例，$destory()方法可以触发beforeDestory函数
document.querySelector('button').onclick = function () {
    vm.$destroy()
}
//点击挂载到指定标签，$mount()方法可以触发beforeMount函数
document.querySelectorAll('button')[1].onclick = function(){
    vm.$mount("#app")
}

```

```html
</code><div id="app"><code class="js">
    <input type="text" v-model="name">
    <br>
    </code><h3><code class="js">{{name}}&lt;/h3&gt;
    &lt;p&gt;当前时间：{{nowTime.toLocaleTimeString()}}&lt;/p&gt;
    &lt;ul&gt;
        &lt;li v-for='item in arr' :key='item.id'&gt;{{item.name}}&lt;/li&gt;
    &lt;/ul&gt;
    &lt;button&gt;销毁vue实例&lt;/button&gt;
    &lt;button&gt;挂载vue实例&lt;/button&gt;
&lt;/div&gt;
</code></h3></div></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建博客教程</title>
    <url>/posts/1cf0.html</url>
    <content><![CDATA[<h1 id="hexo搭建博客教程-matery主题"><a href="#hexo搭建博客教程-matery主题" class="headerlink" title="hexo搭建博客教程(matery主题)"></a>hexo搭建博客教程(matery主题)</h1><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h3><p>这篇教程是我搭建个人博客的路程经历和经验总结，matery主题挺多人用，网上也有各种详细教程，没时间我就不出详细教程了，这里给出其他大佬的教程链接，还有我自己总结的经验。本教程中搭建完博客之后的其他优化可以根据自己的需求选择配置即可，没有顺序。</p>
<p>如果你有前端基础，在个性化定制博客时可能有些效果不满意，可以自己在控制台修改调试，然后在相应的文件中修改。仔细观察框架目录和文件内容，基本都能知道对应的css和js在哪，比如我自己的博客中就修改了挺多样式（不得不说<code>!important</code>用起来真方便）。如果修改自己不熟悉的文件还是建议先备份一下，防止意外。</p>
<p>如果在某些配置中出错，百度找不到解决方案的话，可以去主题Github的issues中，有些主题的问题会在里面有讨论，或许会给你帮助。</p>
<h3 id="hexo博客基础搭建"><a href="#hexo博客基础搭建" class="headerlink" title="hexo博客基础搭建"></a>hexo博客基础搭建</h3><h4 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h4><p>我是看b站羊哥（ <a href="https://space.bilibili.com/384068749">CodeSheep</a> ）的教程入坑的，视频地址：<a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>
<p>这篇虽然他是用苹果系统操作的，但是windows系统操作起来几乎是一样，新人小白可以注意看弹幕，不同的地方弹幕都有提示。</p>
<h4 id="hexo官网"><a href="#hexo官网" class="headerlink" title="hexo官网"></a>hexo官网</h4><p>根据视频操作完了之后，个人博客其实就搭建完成了，后面可以根据个人喜好在hexo官网选择博客主题，hexo官网也有一些教程，如果能看懂也可以跟着官网教程进行配置。hexo官网：<a href="https://hexo.io/">https://hexo.io/</a></p>
<p>安装好主题之后就再根据主题官网进行主题的配置，如果主题官网看不懂可以直接百度去搜主题配置教程。这里建议小白选择比较大众的主题，不然之后配置出错了在网上都找不到解决方法，很多人用的主题，功能相对也多，教程也多。我选择的主题是matery。</p>
<h3 id="Matery主题配置"><a href="#Matery主题配置" class="headerlink" title="Matery主题配置"></a>Matery主题配置</h3><p>matery主题教程较多，主题<a href="https://github.com/blinkfox/hexo-theme-matery">官网</a>对于一些基本配置已经介绍地挺详细了。</p>
<p>该主题的作者是<a href="http://blinkfox.com/">闪烁之狐</a>，里面也有主题配置教程。</p>
<p>我参考的主要是 <a href="https://yafine-blog.cn/">Yafine</a>和<a href="https://zhangxiaocai.cn/">张小菜苔</a>两位大佬的。</p>
<p>两位大佬的教程很全面，我就不重复罗列，如果上面找不到想要的配置，下面的教程也可以参考。</p>
<ul>
<li><p>超逸の博客 ：<a href="https://blog.csdn.net/weixin_42429718/article/details/105723193">https://blog.csdn.net/weixin_42429718/article/details/105723193</a></p>
</li>
<li><p>这么多年的技术：<a href="https://chen-shang.github.io/2019/08/15/ji-zhu-zong-jie/hexo/hexo-theme-matery-zhu-ti-you-hua/">https://chen-shang.github.io/2019/08/15/ji-zhu-zong-jie/hexo/hexo-theme-matery-zhu-ti-you-hua/</a></p>
</li>
<li><p>cungudafa：<a href="https://cungudafa.blog.csdn.net/article/details/106278206">https://cungudafa.blog.csdn.net/article/details/106278206</a></p>
</li>
</ul>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>这里收录一些网上讲解不太详细的教程。</p>
<h4 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h4><p>Live2D Widget：<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p>
<p>这个看板娘应该是我能找到的最灵性的看板娘了。</p>
<p>最简单的使用方法（matery主题），在主题配置目录的<code>hexo-theme-matery\layout\layout.ejs</code>底部之前加如下代码即可：</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>如果你懂前端的话，可以修改看板娘位置，可以在主题目录的<code>hexo-theme-matery\layout\_partial\head.ejs</code>中用<code>!important</code>强制修改位置，代码我就不解释了，我的写法是：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>
<span class="token id">#waifu</span></span><span class="token punctuation">{</span>
    <span class="token property">left</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">140</span>px <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
&lt;/style></code></pre>
<p>如果你是大佬，也可以直接按照Live2D Widget的官方教程按自己的想法改。</p>
<h4 id="代码块方括号不转义问题"><a href="#代码块方括号不转义问题" class="headerlink" title="代码块方括号不转义问题"></a>代码块方括号不转义问题</h4><p>这个在matery主题的issues中有讨论，之前大部分的解决办法是hexo降级，但是我降级之后也没解决这个问题，于是我在issues中看到xmuli给的方法：升级到Hexo 5.1.1。升级教程他也给了。</p>
<p>该issues地址：<a href="https://github.com/blinkfox/hexo-theme-matery/issues/503">https://github.com/blinkfox/hexo-theme-matery/issues/503</a></p>
<h4 id="切换页面音乐播放器重新加载问题"><a href="#切换页面音乐播放器重新加载问题" class="headerlink" title="切换页面音乐播放器重新加载问题"></a>切换页面音乐播放器重新加载问题</h4><p>很多教程都是用pjax解决，但我看了下感觉挺复杂的，有空再去研究，如果你会用pjax就可以使用它解决，不会的话可以用下面的方法凑合一下。</p>
<p>我的解决方案是将主页跳转文章页的跳转方式改为<code>_blank</code>(在新标签页打开)。具体改动方法是：在主题目录的hexo-theme-matery\layout\index.ejs文件中，找到三个a标签(大概在60、95、113行)，给他们各添加一个<code>target="_blank"</code>属性。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for(post.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for(category.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-category<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for(tag.path) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>文章推荐卡片同理，在<code>hexo-theme-matery\layout\_widget\recommend.ejs</code>中修改，头部导航在<code>hexo-theme-matery\layout\_partial\navigation.ejs</code>中修改，logo跳转在<code>hexo-theme-matery\layout\_partial\header.ejs</code>中修改。</p>
<p>这种方法的缺点是在主页进文章详情页/标签/分类页会打开新的页面，只要主页不关，音乐就一直在。</p>
<h3 id="用了图片懒加载之后小屏下侧导航中图片无法加载"><a href="#用了图片懒加载之后小屏下侧导航中图片无法加载" class="headerlink" title="用了图片懒加载之后小屏下侧导航中图片无法加载"></a>用了图片懒加载之后小屏下侧导航中图片无法加载</h3><p>我这里的懒加载用了这个教程：<a href="https://yafine-blog.cn/posts/fc0.html">Hexo+Github 博客搭建之博客优化篇</a></p>
<p>但是在小屏下打开侧导航，图片无法加载出来，看了上面教程的懒加载优化，我找到了灵感。</p>
<p>在依赖包中找到<code>hexo-lazyload-image</code>插件源码，在<code>simple-lazyload.js</code>文件有这一段代码：</p>
<img src="/posts/1cf0/1.png" class>

<p>这应该是懒加载过程中规定的某个范围，将<code>&amp;&amp; rect.left &gt;= 0</code>这行代码注释或删除就可以解决该问题。</p>
<h3 id="将博客部署到个人服务器"><a href="#将博客部署到个人服务器" class="headerlink" title="将博客部署到个人服务器"></a>将博客部署到个人服务器</h3><p>前提是要有自己的服务器和域名，并且要在工信部备案。</p>
<p>网上有挺多教程，但是有的教程没有将git更换版本，导致我一直配置不成功。</p>
<p>下面两个教程是我试过没出错的，这里教程使用的服务器是centos，我的服务器是腾讯云centos7.6。</p>
<ul>
<li><p>不使用宝塔面板：<a href="https://blog.csdn.net/weixin_45682081/article/details/105278898">https://blog.csdn.net/weixin_45682081/article/details/105278898</a></p>
</li>
<li><p>使用宝塔面板：<a href="https://zhuanlan.zhihu.com/p/128649492">https://zhuanlan.zhihu.com/p/128649492</a></p>
</li>
</ul>
<p>cdn加速这里就不给教程，上面的大佬有各种教程。我用的是腾讯云免费送的cdn流量包，像腾讯云/阿里云它们官网都有各自的教程，仔细看文档就可以。</p>
<p>如果还有其他补充，我会在该教程的基础上更新。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>博客教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>js确定数据类型的方式详解</title>
    <url>/posts/36a8.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="js确定数据类型"><a href="#js确定数据类型" class="headerlink" title="js确定数据类型"></a>js确定数据类型</h2><h3 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a>1、typeof</h3><p>适用与简单数据类型</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"abcd"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//string</span>

<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//number</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//bollean</span>

<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//object</span>

<span class="token keyword">let</span> u<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//object</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//object</span>

<span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function</span></code></pre>
<p>由此可见，该方法除了对除null之外的简单数据类型有效外，对引用类型没有得出我们想要的结果。</p>
<p>解释：</p>
<ul>
<li>null在js中被认为是一个特殊的对象，是一个空指针对象，所以返回object。</li>
<li>创建Function或者Array这些类型的实例的时候，其实都是基于Object实例进行的一种扩展，所以都归为object。至于Function会返回function的原因，JavaScript权威指南中给出的解释是，函数有它特有的特性。</li>
</ul>
<h3 id="2、instanceof"><a href="#2、instanceof" class="headerlink" title="2、instanceof"></a>2、instanceof</h3><p>instanceof检测的是原型，适合用来检测引用类型。（关于原型，参考阅读：<a href="https://www.eternitywith.xyz/posts/c9c1.html">面向对象编程</a>）</p>
<p>A instanceof B用来判断A是否是B的实例，如果A是B的实例则返回true，否则返回false。</p>
<p>但是也有个缺点，因为function和array都是object的实例，所以当它们对object进行检测时，也都返回true。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<h3 id="3、constructor"><a href="#3、constructor" class="headerlink" title="3、constructor"></a>3、constructor</h3><p>constructor是原型对象的一个属性，它指向了对象原型本身。</p>
<p>constructor是原型对象的属性，之所以我下面的例子可以直接用实例.constructor判断是因为这里涉及到了原型链。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//string()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Number()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Boolean()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Array()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Function()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object()</span></code></pre>
<p>但是这种方法判断也是有问题的：</p>
<ul>
<li>null和undefined没有constructor，所以无法用这种方法判断。</li>
<li>如果原型对象被重写，那么constructor就可能被丢失。</li>
</ul>
<h3 id="4、Object-prototype-toString-call"><a href="#4、Object-prototype-toString-call" class="headerlink" title="4、Object.prototype.toString.call()"></a>4、Object.prototype.toString.call()</h3><p>toString()是Object的原型方法，调用该方法，默认返回当前对象的[[class]]。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object String]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object Number]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object Boolean]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object Array]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[object Function]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object Null]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object Undefined]</span></code></pre>
<p>该方法是最合适用来判断数据类型的方法。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js逻辑操作符详解</title>
    <url>/posts/a754.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p>js中的逻辑操作符，也称布尔操作符或者逻辑表达式。当用逻辑操作符操作简单的布尔类型值得时候，我们很容易得出结果，但是如果操作数/表达式结果（以下简称为操作数）不是纯布尔类型的值，就没那么简单得出结论了。</p>
<h3 id="1、逻辑非（-）"><a href="#1、逻辑非（-）" class="headerlink" title="1、逻辑非（!）"></a>1、逻辑非（!）</h3><p>先从最简单的逻辑非讲起，它放置在一个单独的操作数之前，作用是将该操作数的布尔值进行取反。</p>
<p>它的运算规则是：先将操作数转换为布尔值，然后再对布尔值求反。</p>
<p>也就是说不论操作数是什么类型，都会先将其转换成布尔值，js中除了空字符串、null、undefined、0、false、NaN是假值之外，其他均是真值，包括{}、[]。</p>
<h3 id="2、逻辑与（-amp-amp-）"><a href="#2、逻辑与（-amp-amp-）" class="headerlink" title="2、逻辑与（&amp;&amp;）"></a>2、逻辑与（&amp;&amp;）</h3><p>逻辑与和逻辑非不同，对于不同的数据类型的操作数，逻辑与的执行规则是不一样的。</p>
<h4 id="2-1、操作数都是布尔值"><a href="#2-1、操作数都是布尔值" class="headerlink" title="2-1、操作数都是布尔值"></a>2-1、操作数都是布尔值</h4><p>操作数都是布尔值的时候，当两边都是true的时候，结果为true，如果有一方或者两方都是false，则返回false。</p>
<h4 id="2-2、操作数有非布尔值"><a href="#2-2、操作数有非布尔值" class="headerlink" title="2-2、操作数有非布尔值"></a>2-2、操作数有非布尔值</h4><p>当操作数有非布尔值的时候，整个表达式返回的值就不一定是布尔类型的true和false了，我们把操作符两方的数据类型分为两种，真值和假值，当然这个真值或假值可以是数字、字符串、布尔类型、表达式的结果等等，上面已经提到，除了空字符串、null、undefined、0、false、NaN是假值之外，其他均是真值。</p>
<p>运算的结果也是分两种：真值和假值。和&amp;&amp;操作纯布尔值一样，如果两边都是真值，则返回真值，如果两方有一方为假值，则返回假值，但是具体返回哪个真值哪个假值则需要具体讨论。</p>
<p>具体规则为：</p>
<ul>
<li>如果左操作数值为假值，则返回左操作数的值。因为有一方为假值，则必然为假，这时不会对右操作符进行操作，形成“逻辑短路”（逻辑短路是对于逻辑运算而言，是指仅计算逻辑表达式中的一部分便能确定结果，而不对整个表达式进行计算的现象。）。</li>
<li>如果左操作数是真值右操作数为假值，则整个表达式为假值，并以右操作数的值作为整个表达式的结果。</li>
<li>如果左操作数和右操作数都为真值，则整个表达式为真值，并以右操作数的值作为整个表达式的结果。</li>
</ul>
<h3 id="3、逻辑或（-）"><a href="#3、逻辑或（-）" class="headerlink" title="3、逻辑或（||）"></a>3、逻辑或（||）</h3><p>理解了逻辑与，逻辑或就好理解了。</p>
<h4 id="3-1、操作数都是布尔值"><a href="#3-1、操作数都是布尔值" class="headerlink" title="3-1、操作数都是布尔值"></a>3-1、操作数都是布尔值</h4><p>操作数都是布尔值的时候，当两边都是false的时候，结果为false，如果有一方或者两方都是true，则返回true。</p>
<h4 id="2-2、操作数有非布尔值-1"><a href="#2-2、操作数有非布尔值-1" class="headerlink" title="2-2、操作数有非布尔值"></a>2-2、操作数有非布尔值</h4><p>运算的结果也是分两种：真值和假值。和&amp;&amp;操作纯布尔值一样，如果两边都是假值，则返回假值，如果两方有一方为真值，则返回真值，但是具体返回哪个真值哪个假值则需要具体讨论。</p>
<p>具体规则为：</p>
<ul>
<li>如果左操作数值为真值，则返回左操作数的值。因为有一方为真值，则必然为真，这时不会对右操作符进行操作，也是“逻辑短路”的一种现象。</li>
<li>如果左操作数是假值右操作数为真值，则整个表达式为真值，并以右操作数的值作为整个表达式的结果。</li>
<li>如果左操作数和右操作数都为假值，则整个表达式为假值，并以右操作数的值作为整个表达式的结果。</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>一文详解js执行上下文、作用域链、闭包、this之间的关系</title>
    <url>/posts/d94f.html</url>
    <content><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="一文详解js执行上下文、作用域链、闭包、this之间的关系"><a href="#一文详解js执行上下文、作用域链、闭包、this之间的关系" class="headerlink" title="一文详解js执行上下文、作用域链、闭包、this之间的关系"></a>一文详解js执行上下文、作用域链、闭包、this之间的关系</h2><p>闭包是js中的一大难点，想要理解闭包，只知道它的特性是不够的，只有知道了它的执行原理才能融汇贯通运用它。</p>
<p>这篇文章就通过js执行上下文、作用域链这几个js的重难点知识来理解闭包，以及js中的另一个难点this。</p>
<p>本篇篇幅较长，但是讲解详细，如果有基础可以根据目录跳着看。</p>
<h3 id="1、执行上下文"><a href="#1、执行上下文" class="headerlink" title="1、执行上下文"></a>1、执行上下文</h3><p>js中的执行上下文是一个比较抽象的概念，js中变量或函数的执行上下文决定了它们可以访问哪些数据及行为。</p>
<p><strong>变量对象</strong>：每个上下文都有一个关联的变量对象，它保存了这个上下文中定义的所有变量和函数。如果上下文是函数，则其活动对象就是变量对象。</p>
<p><strong>全局上下文</strong>：全局上下文是最外层的上下文（根据ECMAScript实现的宿主环境，全局上下文可能会不一样。），在浏览器中通常的全局上下文是window对象，所有var定义的变量和函数都会成为window对象的属性和方法（let和const声明的变量和函数不会）。</p>
<p>函数在调用的时候会创建自己的执行上下文，当代码执行留进入函数的时候，函数的上下文被推到一个上下文栈上，在函数执行完毕之后，上下文栈会弹出该函数上下文。</p>
<h3 id="2、作用域链"><a href="#2、作用域链" class="headerlink" title="2、作用域链"></a>2、作用域链</h3><p>上下文中的代码在执行的时候，会创建变量的作用域链，作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。</p>
<p>函数的变量对象最初只有arguments(全局上下文中没有这个变量)，当当前上下文中每声明一个变量或这函数时，就会把该变量或加入到变量对象中。</p>
<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>每声明一个函数，就会生成一个该函数的作用域链，该作用域链预装载全局变量对象，并存于函数的[[Scope]]（域）中。</p>
<img src="/posts/d94f/%E9%97%AD%E5%8C%85-1.png" class>

<h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>调用该函数时，就会生成自己的执行上下文，并复制[[Scope]]生成作用域链。然后生成活动对象，把该活动对象放入到该函数作用域链的最前端。</p>
<img src="/posts/d94f/%E9%97%AD%E5%8C%85-2.png" class>

<p>每创建一个内嵌函数，内嵌函数就会把父作用域链中的活动对象放入到自己的作用域链中，并把自己活动对象加入到它作用域链的最前端。</p>
<img src="/posts/d94f/%E9%97%AD%E5%8C%85-3.png" class>

<p>函数内部使用变量时，能从自己作用域链的最前端依次往后查找，直到找到全局变量对象。</p>
<p>而全局上下文对象始终在每个作用域的最后，也就是说，所有函数都能访问全局作用域中的变量。</p>
<h4 id="函数执行完毕"><a href="#函数执行完毕" class="headerlink" title="函数执行完毕"></a>函数执行完毕</h4><p>对于上下文而言，自己上下文中的所有代码都执行完毕后，该上下文包括定义在它上面的所有变量和函数都会被销毁。</p>
<p>注意：在函数嵌套中，虽然外部函数的arguments对象在外部函数的活动对象中，并且存在在了内部函数的作用域内，但由于每个函数都有自己的arguments对象和this，内部函数也有自己的arguments和this，所以<strong>内部函数并不能直接访问外部函数的的arguments和this</strong>。</p>
<p>如果内部函数需要访问外部函数的arguments和this，就需要用另外的变量存储它（arguments或this），该变量就能通过作用域链被内部函数访问到，这也就是下面要讲的闭包的最经典案例：函数嵌套。</p>
<h3 id="3、闭包"><a href="#3、闭包" class="headerlink" title="3、闭包"></a>3、闭包</h3><p>闭包是指引用了另一个函数作用域中变量的函数。</p>
<p>上面讲了，当函数某个函数执行完毕，该函数的上下文会被销毁。但是如果有另一个函数是闭包，它引用了该函数中的变量，由于js的垃圾回收机制，被执行完毕的函数被销毁时，会保留它的活动对象，使闭包中的函数依旧能使用其中的变量。</p>
<h4 id="闭包使变量长期存在"><a href="#闭包使变量长期存在" class="headerlink" title="闭包使变量长期存在"></a>闭包使变量长期存在</h4><pre class=" language-JS"><code class="language-JS">const countFun = function(){
    let count = 0;
    count++;
    console.log(count)
    return count;
}
countFun()//1
countFun()//1</code></pre>
<p>这样的常规函数，每次调用执行完之后，都会被销毁，所以再一次调用，count变量重新赋值为0，每次调用结果都是1。如果想每次调用，能保存上一次的count记录，然后count在原来的基础上+1，我们可以用闭包来实现。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> countFun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">countFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1</span>
<span class="token function">countFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre>
<p>首先解释一下函数的书写：首先声明外部匿名函数，并返回了一个内部匿名函数，然后执行了外部匿名函数，相当于把外部匿名函数的执行结果（也就是内部匿名函数）返回给了countFun。</p>
<p>为什么说这里用到了闭包？</p>
<p>因为外部匿名函数是个自执行函数（即声明时调用），这时候它已经执行完了，按理外部匿名函数上下文被销毁，它的活动对象也会被销毁，但是由于内部函数通过作用域链用了外部函数的count变量（内部函数成了一个闭包），所以外部函数的活动对象不会被销毁，count一直被保存着。每次调用countFun()就相当于执行了内部函数，count自增。</p>
<p>注意不要搞混了，count依旧是在外部函数的活动变量，并没有跑到内部函数中，因为它是外部函数的上下文中创建了，它只是没有被销毁，通过作用域链被内部函数一直使用着。</p>
<h4 id="闭包避免全局变量污染"><a href="#闭包避免全局变量污染" class="headerlink" title="闭包避免全局变量污染"></a>闭包避免全局变量污染</h4><p>上面这种方法也避免了全局变量的污染，由于自执行函数，创建后被执行，对于全局变量对象来说，count是被销毁了的，因此可以重新用var定义count变量。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> countFun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//55</span>
<span class="token function">countFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>
<span class="token function">countFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span></code></pre>
<h4 id="闭包模拟私有属性"><a href="#闭包模拟私有属性" class="headerlink" title="闭包模拟私有属性"></a>闭包模拟私有属性</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        changeValue<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            value<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span></code></pre>
<p>上述代码中value就相当于对象obj的私有属性，因为前面作用域链讲了，函数形成的私有作用域，外部不能直接访问该作用域的变量。通过函数返回一个对象，模拟了实例化对象的方法和属性，而value只能通过changeValue方法进行访问。</p>
<p>这里对比一下通过构造函数创建对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>changeValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre>
<p>这里的value也相当于obj的私有属性，外部不能访问，只能通过changValue访问。</p>
<p>那为何构造函数里通过this添加的方法和属性能被外部访问？这里就要谈到new的作用了。</p>
<p>创建一个实例，使用new操作符之后，会进行以下操作：</p>
<ul>
<li>在内存中创建一个新对象。</li>
<li>新对象内的[[prototype]]特性被赋值为构造函数的prototype属性。</li>
<li>构造函数中的this指向了新对象。</li>
<li>执行构造函数内的代码，即创建属性和方法。</li>
<li>如果构造函数返回一个非空对象，则返回该非空对象，否则返回新创建的对象。</li>
</ul>
<p>这就能解释为何this添加的属性在外部能被直接访问了。</p>
<h4 id="闭包的优点"><a href="#闭包的优点" class="headerlink" title="闭包的优点"></a>闭包的优点</h4><ul>
<li>变量长期保存，不被销毁。</li>
<li>避免全局变量的污染。</li>
<li>模拟私有属性。</li>
</ul>
<h4 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h4><ul>
<li>内存常驻，增加内存使用量。</li>
<li>使用不当容易造成内存泄漏。</li>
</ul>
<h3 id="4、this"><a href="#4、this" class="headerlink" title="4、this"></a>4、this</h3><p>主要有以下几种形式：</p>
<ul>
<li>this在函数中是函数调用时所在的执行上下文。如果是在全局作用域中调用，则在非严格模式下this是指widow，严格模式下则是指undefined。</li>
<li>在对象中，this指实例的对象本身。</li>
<li>在方法（对象中的函数）中，this指方法所属对象本身。</li>
<li>在事件中，this指触发事件的对象。</li>
</ul>
<p>由于函数中有时候比较复杂，this指向并不明确，我们通过案例来理解一下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"window"</span>

<span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'object'</span><span class="token punctuation">,</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//window</span></code></pre>
<p>上面说了方法中的this指向对象本身，这里却指向了window，是因为这里方法返回了一个匿名函数，调用的时候<code>object.getName()</code>实际上是匿名函数本身，后面再加一个()是匿名函数被调用，匿名函数被调用时所在的执行上下文就是全局window，函数的this指向就是全局上下文window。而且上面作用域链的时候也讲过，内部函数无法直接访问外部函数的this，两者的原理是一样的。</p>
<p>那我们需要获得对象的name怎么办？</p>
<p>这就需要我们上面讲到的闭包了。虽然被返回的匿名函数this指向不是object，但是getName()方法的中的this指向是object对象，所以可以通过新建一个变量把保存getName()中的this，返回的匿名函数使用该变量，匿名函数就成了一个闭包。代码如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"window"</span>

<span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">'object'</span><span class="token punctuation">,</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//object</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>mac安装mysql并在Django中使用</title>
    <url>/posts/7ec7.html</url>
    <content><![CDATA[<h1 id="mac安装mysql并在Django中使用"><a href="#mac安装mysql并在Django中使用" class="headerlink" title="mac安装mysql并在Django中使用"></a>mac安装mysql并在Django中使用</h1><p>最近开始学python，想尝试用Django做web开发，按照django的安装指南，需要安装数据库，我选择了mysql，按<a href="https://docs.djangoproject.com/zh-hans/2.2/ref/databases/#mysql-notes">教程</a>使用mysql需要先安装mysqlclient，直接安装出错，在此记录。</p>
<img src="/posts/7ec7/1.png" class>

<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>一开始我使用<code>pip insatll mysql</code>安装失败。</p>
<p>然后直接在网上下载安装包，下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p>
<p>下载后直接安装就行，安装最后需要设置数据库密码，设置完之后最好记住。</p>
<p>配置环境变量</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/profile</code></pre>
<p>输入密码，打开后按<code>i</code>切换输入模式，在最后一行输入</p>
<pre class=" language-bash"><code class="language-bash">PATH<span class="token operator">=</span><span class="token variable">$PATH</span>:/usr/local/mysql/bin</code></pre>
<p>按esc，再按<code>:wq</code>保存退出。</p>
<p>source使环境变量立即生效</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre>
<p>查看mysql是否配置成功，如果出现版本号则配置成功。</p>
<pre class=" language-bash"><code class="language-bash">mysql --version
mysql_config --version</code></pre>
<h3 id="安装mysqlclient"><a href="#安装mysqlclient" class="headerlink" title="安装mysqlclient"></a>安装mysqlclient</h3><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> mysqlclient</code></pre>
<p>以上安装过程参考：<a href="https://blog.csdn.net/weixin_44129085/article/details/110815601">https://blog.csdn.net/weixin_44129085/article/details/110815601</a></p>
<h3 id="安装连接器"><a href="#安装连接器" class="headerlink" title="安装连接器"></a>安装连接器</h3><img src="/posts/7ec7/2.png" class>

<p>点击这里跳转到的连接器下载页面，发现该最新版本的连接器没有对应的mac</p>
<p>系统可选择，只好切换到Archives选择旧版本的下载。</p>
<h3 id="安装mysql可视化工具Navicate"><a href="#安装mysql可视化工具Navicate" class="headerlink" title="安装mysql可视化工具Navicate"></a>安装mysql可视化工具Navicate</h3><p>如果不需要mysql可视化工具可以忽略这一步骤。</p>
<p>这里是在xclient中下载的破解版：</p>
<p>下载地址：<a href="https://xclient.info/s/navicat-premium.html#versions">https://xclient.info/s/navicat-premium.html#versions</a></p>
<p>如果不考虑汉化版，直接翻到最下面，在历史版本中选择一个版本下载，如果需汉化版，在需要找到汉化版对应的版本下载。</p>
<p>下载完打开解压后的压缩包后，先看使用教程，需要关闭SIP则<a href="https://xclient.info/a/2fc28a8f-038d-e2a8-749c-5624ba1344b9.html">关闭SIP</a>，安装完直接打开使用即可。</p>
<p>如果需要汉化，按照汉化教程操作即可。mac在应用程序中找到应用图标右键，显示包内容就能找到对应目录。</p>
<h3 id="django项目中连接mysql"><a href="#django项目中连接mysql" class="headerlink" title="django项目中连接mysql"></a>django项目中连接mysql</h3><p>在django项目的setting.py中进行配置</p>
<pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'default'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span><span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#mysql数据库引擎</span>
        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'django'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#数据库名称</span>
        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#数据库用户名</span>
        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span><span class="token string">'12345678'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#数据库密码</span>
        <span class="token string">'HOST'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#数据库服务所在的主机ip</span>
        <span class="token string">'PORT'</span><span class="token punctuation">:</span><span class="token string">'3306'</span> <span class="token comment" spellcheck="true">#数据库服务端口</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>然后，按照教程运行<code>python manage.py migrate</code>命令时报错如下：</p>
<pre class=" language-bash"><code class="language-bash">NameError: name <span class="token string">'_mysql'</span> is not defined</code></pre>
<p>原因是Mysqldb 不兼容 python3.5 以后的版本，使用pymysql代替MySQLdb。</p>
<p>安装pymysql</p>
<pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> pymysql</code></pre>
<p>settings.py同级目录下的<code>__init__.py</code>文件下加入以下代:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql
pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>参考：<a href="https://blog.csdn.net/m0_47970692/article/details/114106262">https://blog.csdn.net/m0_47970692/article/details/114106262</a></p>
<p>再运行<code>python manage.py migrate</code>命令即可成功。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>从编译原理开始讲作用域、闭包、this</title>
    <url>/posts/b6ca.html</url>
    <content><![CDATA[<h1 id="从编译原理开始讲作用域、闭包、this"><a href="#从编译原理开始讲作用域、闭包、this" class="headerlink" title="从编译原理开始讲作用域、闭包、this"></a>从编译原理开始讲作用域、闭包、this</h1><h3 id="从编译原理开始讲"><a href="#从编译原理开始讲" class="headerlink" title="从编译原理开始讲"></a>从编译原理开始讲</h3><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><p><strong>编译型语言</strong>：提前将所有源代码一次性转换成机器可识别的二进制指令，也就是形成一个可执行程序（如.exe），如C、C++、Go。</p>
<p><strong>解释型语言</strong>：一边执行一边转换，需要哪些源代码就转换哪些源代码，不需要生成可执行程序。如Python、JavaScript、PHP。</p>
<h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><p>传统的编译语言在代码执行之前有一个编译的过程，大概分为三部：分词、解析、代码生成。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<p>以这段代码为例：</p>
<p><strong>分词阶段</strong>：</p>
<p>这段代码将被分成各个词法单元：<code>var</code>、<code>a</code>、<code>=</code>、<code>1</code>、<code>;</code>，至于空格是否会分为词法单元，取决于空格在这门语言中的意义。</p>
<p><strong>解析阶段</strong>：</p>
<p>将词法单元生成AST，上面代码的AST部分结构(JSON)如下：</p>
<pre class=" language-json"><code class="language-json">  <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclaration"</span><span class="token punctuation">,</span>
      <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token property">"declarations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclarator"</span><span class="token punctuation">,</span>
          <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
          <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>
            <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
            <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token property">"init"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>
            <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
            <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">"raw"</span><span class="token operator">:</span> <span class="token string">"1"</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"var"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre>
<p><strong>代码生成</strong>：</p>
<p>将AST生成机器可识别代码。</p>
<h4 id="JavaScript的编译"><a href="#JavaScript的编译" class="headerlink" title="JavaScript的编译"></a>JavaScript的编译</h4><p>JavaScript虽然是解释型语言，但是它也有一个预编译的过程，这个过程发生在代码执行之前几微秒，预编译也包含以上三步骤，但不完全一样，而且远不止这三步骤，还包含其他许多的优化处理。</p>
<p>下面将JavaScript运行简单模拟成三种角色：</p>
<ul>
<li><p>编译器：用于预编译</p>
</li>
<li><p>引擎：用于执行代码</p>
</li>
<li><p>作用域：确定当前执行的代码对一些标志符访问权限</p>
</li>
</ul>
<h5 id="JavaScript中的查询"><a href="#JavaScript中的查询" class="headerlink" title="JavaScript中的查询"></a>JavaScript中的查询</h5><p>JavaScript中有两种查询操作：</p>
<p><strong>LHS</strong>：当变量出现在赋值操作的左侧时，进行LHS查询。</p>
<p><strong>RHS</strong>：当变量出现在赋值操作的右侧时，进行RHS查询。</p>
<blockquote>
<p>赋值操作不代表着“=”，JavaScript中存在许多隐式赋值操作，如++，–，函数的形参等。</p>
</blockquote>
<p>当引擎遇到<code>var a = 1;</code>这句代码时会分别有LHS和RHS两次查找操作，两次查询操作也分别在不同阶段执行：</p>
<p>编译时（<code>var a</code>）：编译器会沿作用域链查找是否之前有声明过a变量，如果没有则会在当前作用域新生成一个变量（非严格模式，严格模式抛出ReferenceError异常），如果有，则会忽略本次声明，这是LHS查询。（let、const声明有所不同，它们在声明位置之前无法使用。）</p>
<p>运行时（<code>a = 1</code>）：这部分代码是引擎负责执行，也就是进行RHS查询，引擎首先会沿作用域链查找a变量，如果找到就对它赋值，如果没有，则抛出ReferenceError异常。</p>
<h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>通过理解JavaScript代码执行过程可以看到，在编译阶段，根据写代码时变量和块作用域所处的位置，词法作用域就已经确定了。</p>
<p>这和动态作用域不同，动态作用域则是在运行时确定的。</p>
<blockquote>
<p>编译时确定和运行时确定的规则是不同的，<strong>JavaScript中作用域是编译时确定，而this则是在运行时确定，分清楚这一点很重要。</strong>当然，JavaScript中也可以通过一些方法在运行时改变作用域，之后再讨论。</p>
</blockquote>
<h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>“作用域”定义了一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行查找变量。在作用域中查找变量的过程会形成一个链式结构，称为作用域链。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>以上就形成了三个作用域：</p>
<img src="/posts/b6ca/1.png" class>

<p>查找变量的时候只能从内部往外部查找，而不能反过来，所以上面这种画法并不准确，而应该是下面这种。</p>
<img src="/posts/b6ca/2.png" class>

<h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>通过理解上面编译过程还可以知道，在每个作用域中的所有变量在编译阶段就已经被找了出来，并且与该作用域形成了关联。这个过程叫变量提升。</p>
<p>因此，一个变量在某个作用域中如果有声明语句，那么这个变量在该作用域内的任何地方都能被访问到，但变量的值则依赖于赋值语句的位置。</p>
<p><code>var a = 1;</code>虽然是一条语句，但根据编译原理，它被分为了<code>var a</code>和<code>a = 1</code>两个部分，也就是声明和赋值两个部分。</p>
<p><code>a = 1</code>是在运行时被处理的，因此变量提升指的是变量声明提升，不是变量赋值提升。</p>
<p>因此在js中一下代码会输出undefined而不是报错，也不输出1：</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>每声明一个函数就会形成一个该函数的作用域，属于这个函数的全部变量都可以在整个函数范围内使用和复用。</p>
<h5 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h5><p>区分函数声明与函数表达式是有必要的，因为函数声明会被提升，而函数表达式不会被提升。</p>
<p>如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>以上函数能正常调用，但是下面就不行：</p>
<pre class=" language-js"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Cannot access 'foo' before initialization</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>是因为函数定义被包含在变量的初始化语句中。</p>
<p>此外，我常听见的匿名函数、IIFE（立即执行函数）等也都是函数表达式，而不是函数声明，即使是具名函数的IIFE函数，也是函数表达式。</p>
<p>如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>结果如下：</p>
<pre class=" language-bash"><code class="language-bash">111
<span class="token punctuation">[</span>Function: foo<span class="token punctuation">]</span>
ReferenceError: foo is not defined:foo is not defined</code></pre>
<p>立即执行函数内部可以访问函数本身，但外部不可以。</p>
<h5 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h5><p>函数声明和变量声明都会被提升，但是函数优先级更高。</p>
<p>如下，即使是变量后声明，也无法覆盖函数声明：</p>
<pre class=" language-js"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 说明声明无法覆盖</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> foo<span class="token punctuation">;</span>
foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 赋值可以覆盖</span></code></pre>
<blockquote>
<p>即使是函数优先，也不建议用相同的名称同时声明函数和变量。</p>
</blockquote>
<h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>在es6之前，只有在with、try/catch中（catch中）存在块作用域。es6之后，let、const可以将变量绑定到任意的块作用域中，通常是某个<code>{}</code>中。</p>
<blockquote>
<p>try/catch是es6之前块级作用域的代替方案之一，IIFE也能创建块作用域，但是代码语义就改变了。</p>
</blockquote>
<h5 id="块作用域的作用"><a href="#块作用域的作用" class="headerlink" title="块作用域的作用"></a>块作用域的作用</h5><p>常见的，块作用域用于for循环中，用let声明循环变量时，每次迭代都是对循环变量的重新绑定，该循环变量只存在本次迭代的作用域中。</p>
<p>此外，显示的声明一个块作用域可以用于优化垃圾回收。</p>
<p>如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
  <span class="token keyword">var</span> someReallyBigData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
  <span class="token function">process</span><span class="token punctuation">(</span>someReallyBigData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//形成了覆盖整个作用域的闭包</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//为了闭包体现更加明显，这里修改了《你不知道的JavaScript》（上卷）代码案例</span></code></pre>
<p>click的回调不需要someReallyBigData，process()执行后大量的数据可以被垃圾回收机制回收了，但是由于click形成了覆盖整个作用域的闭包，JavaScript可能会保留该作用域所有内容。</p>
<p>但如果我们对占据了大量空间且执行完后不需要的结构显示地声明一个块作用域，引擎就可以对该结构进行垃圾回收。如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 该块级作用域中的内容执行完可以销毁  </span>
    <span class="token keyword">var</span> someReallyBigData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
      <span class="token function">process</span><span class="token punctuation">(</span>someReallyBigData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>                      
  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//形成了覆盖整个作用域的闭包</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span></code></pre>
<h4 id="遮蔽效应"><a href="#遮蔽效应" class="headerlink" title="遮蔽效应"></a>遮蔽效应</h4><p>多层的嵌套作用域中可以定义（通过var）同名的标识符（变量），但是作用域会在找到一个匹配的标识符时停止。这就形成了一个遮蔽效应，内部的标识符遮蔽了外部的标识符。</p>
<p>由于通过全局变量会自动成为全局对象的属性，所以被遮蔽的全局变量可以通过全局对象的属性来访问，但被遮蔽的非全局变量就无法被访问了。</p>
<h4 id="运行时修改词法作用域"><a href="#运行时修改词法作用域" class="headerlink" title="运行时修改词法作用域"></a>运行时修改词法作用域</h4><p>eval：eval()函数接收一个字符串作为参数，并且以JavaScript代码执行该字符串。</p>
<p>with：用于拓展语句的作用域链。</p>
<p>eval和with会在运行时创建或修改新的作用域，但是由于JavaScript引擎在编译阶段会进行许多性能优化（前面说的静态词法分析就是其中之一），如果引擎发现了eval和with，引擎会认为这些优化是无效的（因为在词法分析阶段无法明确eval和with会对作用域进行什么修改）。编译时无法优化，运行时就要花更大的代价运行代码。</p>
<p>所以无论何时都不建议使用eval和with，即使是eval的代替方案new Function()也不建议使用。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包，简单来说就一句话：引用了另一个作用域中的变量的函数就形成了闭包。</p>
<p>但它的作用却很强大。</p>
<p>当函数执行完毕后，一般来说js引擎的GC（垃圾回收）机制会回收该部分内存空间，但是闭包能让GC在某个函数执行完毕后不回收该部分内存。当然，也正是由于这个特点，会导致部分内存常驻，使用不当也会导致内存泄漏。</p>
<p>下面引用《JavaScript权威指南》（第七版）中对闭包的描述：</p>
<blockquote>
<p>与多数现代编程语言一样，JavaScript使用词法作用域。这意味着函数执行时使用的是定义函数时生效的变量作用域，而不是调用函数时生效的变量作用域。为了实现词法作用域，JavaScript函数对象的内部状态不仅要包括函数代码，还要包括对函数定义所在作用域的引用。这种函数对象与作用域（即一组变量绑定）组合起来解析变量的机制，在计算机科学文献中被称作闭包。</p>
<p>严格来讲，所有JavaScript函数都是闭包。但由于多数函数调用与函数定义都在同一作用域内，所以闭包的存在无关紧要。闭包真正值得关注的时候，是定义函数与调用函数的作用域不同的时候。最常见的情形就是一个函数返回了在它内部定义的的嵌套函数。很多强大的编程技术都是建立在这种嵌套函数闭包之上的，因此嵌套函数闭包在JavaScript程序中也变得比较常见。乍一接触闭包难免不好理解，但只有真正理解了，才能用好它们。</p>
</blockquote>
<p>可见，不同地方对闭包的定义有所不同，但核心要义都差不多。</p>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>this是JavaScript中存在于函数内部的关键字，其指向是运行时确定的，需要判断函数中this的绑定，就需要找到这个函数的直接调用位置。</p>
<blockquote>
<p>用chrome开发者工具进行断点调试的时候，Call Stack的第二个就是函数的直接调用位置，或者Scope.Local中可直接查看this指向。</p>
</blockquote>
<p>找到函数的直接调用位置后根据以下四条规则进行判断，就可得到该函数中this的指向。</p>
<p>JavaScript中this绑定有以下四条规则，优先级从上到下：</p>
<ul>
<li>函数由new创建，this绑定的是新创建的对象。</li>
<li>函数由call/apply/bind调用，this绑定到指定的对象。</li>
<li>函数由上下文对象调用，this绑定到上下文对象。</li>
<li>默认情况下，this绑定到全局对象，严格模式下为undefined。</li>
</ul>
<p>可以在控制台调试如下代码进行理解：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  baz<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  bar<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  foo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//为了深入理解，这里修改了《你不知道的JavaScript》（上卷）代码案例</span>
<span class="token comment" spellcheck="true">// foo 4 baz 4 bar 1 1 foo 2 foo 1</span></code></pre>
<p>之前为了理解作用域、闭包和this，特意看了红宝书，也写了一篇文章：<a href="https://www.eternitywith.xyz/posts/d94f.html">《一文详解js执行上下文、作用域链、闭包、this之间的关系》</a>，但是个人觉得本篇从编译原理讲更易理解。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>包与NPM</title>
    <url>/posts/9c2a.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="包与NPM"><a href="#包与NPM" class="headerlink" title="包与NPM"></a>包与NPM</h2><h3 id="NPM概述"><a href="#NPM概述" class="headerlink" title="NPM概述"></a>NPM概述</h3><p><strong>模块</strong>：按照CommonJS规范写的js文件。</p>
<p><strong>包</strong>：包含js文件和其他附带信息的整体。</p>
<p><strong>npm</strong>：包的管理工具。</p>
<ul>
<li>根据包的名字下载并安装（npmjs.com）。</li>
<li>解决了包之间的依赖关系。</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><pre class=" language-shell"><code class="language-shell">npm install <Module Name>
#简写
npm i <Module Name></code></pre>
<p>如果不指定包名，就会在项目的package.json中寻找相关依赖包并下载。</p>
<h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4><pre class=" language-shell"><code class="language-shell">npm uninstall <Module Name></code></pre>
<p>卸载全局安装的包需要加上*<code>-g</code>*。</p>
<h4 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h4><pre class=" language-shell"><code class="language-shell">npm update <Module Name></code></pre>
<h4 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h4><pre class=" language-shell"><code class="language-shell">npm search <Module Name></code></pre>
<h4 id="查看包"><a href="#查看包" class="headerlink" title="查看包"></a>查看包</h4><pre class=" language-shell"><code class="language-shell">#查看当前目录下已经安装的包
npm list
#查看全局安装的包
npm list -g
#查看某个包的版本号
npm list <Module Name></code></pre>
<h4 id="查看npm版本"><a href="#查看npm版本" class="headerlink" title="查看npm版本"></a>查看npm版本</h4><pre class=" language-shell"><code class="language-shell">npm -v</code></pre>
<h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>package.json记录npm对包管理的信息。</p>
<ul>
<li><strong>name</strong> - 包名。</li>
<li><strong>version</strong> - 包的版本号。</li>
<li><strong>description</strong> - 包的描述。</li>
<li><strong>homepage</strong> - 包的官网 url 。</li>
<li><strong>author</strong> - 包的作者姓名。</li>
<li><strong>contributors</strong> - 包的其他贡献者姓名。</li>
<li><strong>dependencies</strong> - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li>
<li><strong>devDependencies</strong>-开发依赖包列表，将安装包放在c盘/usr/local下或者node的安装目录。</li>
<li><strong>repository</strong> - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li>
<li><strong>main</strong> - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</li>
<li><strong>keywords</strong> - 关键字</li>
</ul>
<pre class=" language-shell"><code class="language-shell">#输入npm init之后，根据自己情况输入包的信息，输入完成后会生成package.json文件。
npm init
#然后使用以下命令在npm资源库中注册用户
npm adduser
#然后使用以下命令来发布模块，模块发布之后就可以使用npm下载使用了
npm publish</code></pre>
<h3 id="局部安装-本地安装"><a href="#局部安装-本地安装" class="headerlink" title="局部安装/本地安装"></a>局部安装/本地安装</h3><p>将安装包放在./node_modules下（运行npm命令时所在的目录），如果没有该目录，会在当前执行npm命令的目录下生成node_modules目录。</p>
<p>可以通过require()用来引入本地安装的包。</p>
<pre class=" language-shell"><code class="language-shell"># 本地安装express
npm install express</code></pre>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>将安装包放在c盘/usr/local下或者node的安装目录。</p>
<p>可以直接在命令行里使用。</p>
<pre class=" language-shell"><code class="language-shell"># 全局安装express
npm install express -g</code></pre>
<h3 id="淘宝镜像cnpm"><a href="#淘宝镜像cnpm" class="headerlink" title="淘宝镜像cnpm"></a>淘宝镜像cnpm</h3><p>使用淘宝镜像进行安装npm包，淘宝npm镜像是一个完整的npmjs.org镜像，目前同步频率为10分钟与官网同步一次。</p>
<h4 id="方法一：临时使用"><a href="#方法一：临时使用" class="headerlink" title="方法一：临时使用"></a>方法一：临时使用</h4><pre class=" language-shell"><code class="language-shell">npm --registry https://registry.npm.taobao.org install <Module Name></code></pre>
<h4 id="方法二：永久使用"><a href="#方法二：永久使用" class="headerlink" title="方法二：永久使用"></a>方法二：永久使用</h4><p>将配置文件下载源改为淘宝镜像，然后就可以使用cnpm或npm命令安装。</p>
<pre class=" language-shell"><code class="language-shell">npm config set registry https://registry.npm.taobao.org</code></pre>
<p>可以用*<code>npm config get registry</code>*验证配置是否成功。</p>
<h4 id="方法三：不改下载源镜像，用cnpm。（不推荐使用）"><a href="#方法三：不改下载源镜像，用cnpm。（不推荐使用）" class="headerlink" title="方法三：不改下载源镜像，用cnpm。（不推荐使用）"></a>方法三：不改下载源镜像，用cnpm。（不推荐使用）</h4><pre class=" language-shell"><code class="language-shell">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre>
<p>然后就可以使用cnpm代替npm。</p>
<h4 id="恢复npm使用"><a href="#恢复npm使用" class="headerlink" title="恢复npm使用"></a>恢复npm使用</h4><pre class=" language-shell"><code class="language-shell">npm config set registry https://registry.npmjs.org</code></pre>
<h3 id="依赖和开发依赖"><a href="#依赖和开发依赖" class="headerlink" title="依赖和开发依赖"></a>依赖和开发依赖</h3><p><strong>开发依赖</strong>（devDependencies）：像less这种只有在开发的时候用到的，在项目运行的时候是不需要的，就是开发依赖。在安装开发依赖时，需要加上*<code>--save-dev</code><em>，可以简写成</em><code>-D</code>*。</p>
<p><strong>依赖</strong>（dependencies）：像jQuery这种不管是运行期还是开发期都需要的，就属于依赖，需要包含在项目中。在安装依赖包时，需要加上*<code>--save</code><em>，可以简写成</em><code>-S</code>*。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>原生js+jQuery实现瀑布流布局</title>
    <url>/posts/5d51.html</url>
    <content><![CDATA[<h1 id="前端常见效果实现"><a href="#前端常见效果实现" class="headerlink" title="前端常见效果实现"></a>前端常见效果实现</h1><h2 id="原生js-jQuery实现瀑布流布局"><a href="#原生js-jQuery实现瀑布流布局" class="headerlink" title="原生js+jQuery实现瀑布流布局"></a>原生js+jQuery实现瀑布流布局</h2><p>在制作相册的时候发现使用瀑布流更合适，因此研究了一番，本篇记录通过原生js计算及使用jQuery辅助实现瀑布流布局。</p>
<p>参考自：<a href="https://blog.csdn.net/weixin_44135121/article/details/98629830">3种方式实现瀑布流布局</a></p>
<p>该方法为响应式，无需固定子项宽度，子项宽度可根据窗口宽度而改变。</p>
<p>核心思路：通过父元素宽度及列数动态计算子项宽高，第一行排列完后每一列就有了高度，之后每增加一项就找出最小高度列，将子项放到该列中，并将该列高度增加，之后每加一个子项则重复上面的操作。</p>
<p>核心代码如下，为了方便使用将它封装成了一个函数，参数分别是：每个子项具有的公共类名、父元素宽度、列数、每列间距、上下间距。</p>
<p>注意：</p>
<ul>
<li>该方法使用了jQuery，需提前引入。</li>
<li>该方法使用了定位，动态生成子项的left和top值，需给父元素相对定位，子项设置绝对定位。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*
        item:子项类名，注意要加.,如“.item”
        fatherWidth:父元素宽度
        columns:列数
        spacingRight:每列间距
        spacingTop:上下间距
    */</span>
<span class="token keyword">function</span> <span class="token function">waterfall</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>fatherWidth<span class="token punctuation">,</span>columns<span class="token punctuation">,</span>spacingRight<span class="token punctuation">,</span>spacingTop<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//确定每个子项的宽度</span>
    <span class="token keyword">var</span> itemWidth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>fatherWidth<span class="token operator">/</span>columns<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//设置item的宽度</span>
    <span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span>itemWidth<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//存储每一行的最小子项的高度</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// console.log(i);</span>
        <span class="token comment" spellcheck="true">//每个子项的高度</span>
        <span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>columns<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//第一行</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                top<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>
                left<span class="token punctuation">:</span><span class="token punctuation">(</span>itemWidth<span class="token punctuation">)</span><span class="token operator">*</span>i <span class="token operator">+</span>spacingRight<span class="token operator">*</span>i<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//将第一行每个子项的行高存储到arr中</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第二行及以后</span>
            <span class="token comment" spellcheck="true">//获取现在状态下（不包含第i个的状态）最小的列的高度</span>
            <span class="token keyword">var</span> minHeight <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存最小高度</span>
            <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存索引</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>minHeight <span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    minHeight <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    index <span class="token operator">=</span>j<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//设置第i个子项的位置</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                top<span class="token punctuation">:</span>minHeight<span class="token operator">+</span>spacingTop<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//已知的最小列高度+上下间距</span>
                left<span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//最小列最后一个子项的left值</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">//修改第i个子项所在列的高度</span>
            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> minHeight <span class="token operator">+</span>height<span class="token operator">+</span>spacingTop<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>如果需要做到响应式，则需要在页面尺寸改变时动态获取视口大小。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取视口宽函数</span>
<span class="token keyword">function</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        width<span class="token punctuation">:</span>window<span class="token punctuation">.</span>innerWeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
        height<span class="token punctuation">:</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//设置参数</span>
<span class="token keyword">var</span> fatherWidth <span class="token operator">=</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
<span class="token keyword">var</span> columns <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> spacingRight <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> spacingTop <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token string">".item"</span>

<span class="token comment" spellcheck="true">//初始化</span>
window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">waterfall</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>fatherWidth<span class="token punctuation">,</span>columns<span class="token punctuation">,</span>spacingRight<span class="token punctuation">,</span>spacingTop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//页面尺寸改变时触发</span>
window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//如果父元素宽度随窗口变化，每次变化重新获取父元素宽度</span>
    fatherWidth <span class="token operator">=</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token function">waterfall</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>fatherWidth<span class="token punctuation">,</span>columns<span class="token punctuation">,</span>spacingRight<span class="token punctuation">,</span>spacingTop<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>组件库</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>简单实现mustache模板引擎-mustache介绍</title>
    <url>/posts/8602.html</url>
    <content><![CDATA[<h1 id="简单实现mustache模板引擎之mustache介绍"><a href="#简单实现mustache模板引擎之mustache介绍" class="headerlink" title="简单实现mustache模板引擎之mustache介绍"></a>简单实现mustache模板引擎之mustache介绍</h1><p>最近开始学习vue源码，会慢慢记录一些笔记。首先开始学的是mustache模板引擎，因为vue进行数据绑定使用的是mustache语法。</p>
<h3 id="什么是模板引擎？"><a href="#什么是模板引擎？" class="headerlink" title="什么是模板引擎？"></a>什么是模板引擎？</h3><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。 </p>
<p>简单来说，在前端领域它是将数据变为视图的最优解决方案。</p>
<p>在模板引擎之前，也有许多的其他解决方案，内容挺长，我直接放其他博主的文章，有兴趣可以自行学习：<a href="https://blog.csdn.net/weixin_43690348/article/details/113103697">https://blog.csdn.net/weixin_43690348/article/details/113103697</a></p>
<h3 id="mustache实现原理"><a href="#mustache实现原理" class="headerlink" title="mustache实现原理"></a>mustache实现原理</h3><p>一句概括就是：将模板字符串转换成tokens（一个js嵌套数组）后，将tokens结合数据再转换成dom树。</p>
<p>如下图：</p>
<img src="/posts/8602/1.png" class>

<p>将模板字符串编译成tokens如下：</p>
<img src="/posts/8602/2.png" class>

<p>再将tokens转为dom字符串，通过innerHTML赋给dom节点。</p>
<p>下面两篇文章分别详细介绍两个主要功能：</p>
<p><a href="https://www.eternitywith.xyz/posts/af35.html">简单实现mustache模板引擎之将模板字符串编译成tokens</a></p>
<p><a href="https://www.eternitywith.xyz/posts/51d7.html">简单实现mustache模板引擎之将tokens变为dom</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Vue源码解析</category>
      </categories>
      <tags>
        <tag>mustache</tag>
      </tags>
  </entry>
  <entry>
    <title>简单实现mustache模板引擎-实现tokens</title>
    <url>/posts/af35.html</url>
    <content><![CDATA[<h1 id="简单实现mustache模板引擎之将模板字符串编译成tokens"><a href="#简单实现mustache模板引擎之将模板字符串编译成tokens" class="headerlink" title="简单实现mustache模板引擎之将模板字符串编译成tokens"></a>简单实现mustache模板引擎之将模板字符串编译成tokens</h1><p>这里使用了webpack进行项目开发，所以在写源码之前先说明如何建项目。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>新建项目</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init</code></pre>
<p>安装依赖包</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D webpack@4 webpack-cli@3 webpack-dev-server@3</code></pre>
<p>书写webpack配置文件</p>
<p>在项目目录下新建webpack.config.js文件，配置内容如下，可自行修改：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//模式：开发模式</span>
    mode<span class="token punctuation">:</span><span class="token string">"development"</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//入口文件</span>
    entry<span class="token punctuation">:</span><span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//出口 打包到什么文件</span>
    output<span class="token punctuation">:</span><span class="token punctuation">{</span>
        filename<span class="token punctuation">:</span><span class="token string">"bundle.js"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//配置一下webpack-dev-server</span>
    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true">//静态文件根目录</span>
       contentBase<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">//是否压缩</span>
       compress<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">//端口号</span>
       port<span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">,</span>
       <span class="token comment" spellcheck="true">//虚拟打包的路径，bundle.js文件没有真正地生成</span>
       publicPath<span class="token punctuation">:</span><span class="token string">"/xuni/"</span><span class="token punctuation">,</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>上面的入口文件为src/index.js，静态文件为www，所以在项目根目录中新建src和www目录，并在src中新建index.js文件，在www中新建index.html文件，并在index.html中引入上面设置的虚拟打包文件。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xuni/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><img src="/posts/af35/1.png" class>

<p>Scanner.js为实现对模板字符串中的字符进行逐个扫描；</p>
<p>parseTemplateToTokens.js实现将模板字符串变为数组，但这时候还不是真正的tokens；</p>
<p>nestTokens.js将parseTemplateToTokens.js中生成的数组变为真正的tokens。</p>
<p>模板字符串生成的dom字符串，在渲染成dom树时，空字符串会影响布局，handleSpace.js对空字符串进行了处理，它有没有并不影响其他的功能。</p>
<p>其他文件在下一章中进行介绍，与该章功能无关。</p>
<h3 id="实现Scanner字符扫描"><a href="#实现Scanner字符扫描" class="headerlink" title="实现Scanner字符扫描"></a>实现Scanner字符扫描</h3><p>通过实别双大括号来实别数据，所以需要对字符进行扫描，这里专门写一个类来处理。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*
    扫描器类
*/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Scanner</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//将模板字符串放在实例上</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr <span class="token operator">=</span> templateStr<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//指针</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//尾巴（未扫描的内容），开始时后就是模板字符串原文</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> templateStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//跳过指定内容</span>
    <span class="token function">scan</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//尾巴的第一个字符就是tag</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//tag有多长，比如{{长度是2，就让指针后移多少位</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token operator">+</span><span class="token operator">=</span>tag<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//改变尾巴为从当前指针这个字符开始，到最后的全部字符</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//让指针进行扫描，直到遇见指定内容结束，并且能够返回结束之前扫描的内容</span>
    <span class="token function">scanUtil</span><span class="token punctuation">(</span>stopTag<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//记录一下执行该方法时候的pos值</span>
        <span class="token keyword">const</span> pos_back <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//当尾巴没有到头且尾巴的开头不是stopTag的时候，说明还没有扫描到stopTag</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>stopTag<span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//改变尾巴未从当前指针这个字符开始，到最后的全部字符</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//返回已经被扫描过的内容</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos_back<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//指针是否到头，返回布尔值 end of string</span>
    <span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">>=</span><span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token template-string"><span class="token string">``</span></span><span class="token template-string"><span class="token string">`

### 将模板字符串变为临时数组tempTokens

也就是parseTemplateToTokens.js的内容，这里需要用到上面的扫描器类对模板字符串进行扫描，然后根据字符不同把数据变量和普通字符区分开。

`</span></span><span class="token template-string"><span class="token string">``</span></span>js
<span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">"./Scanner.js"</span>
<span class="token keyword">import</span> nestTokens <span class="token keyword">from</span> <span class="token string">"./nestTokens.js"</span>
<span class="token keyword">import</span> handleSpace <span class="token keyword">from</span> <span class="token string">"./handleSpace.js"</span>
<span class="token comment" spellcheck="true">/*
    将模板字符串变为tempTokens数组
*/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tempTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//创建扫描器</span>
    <span class="token keyword">var</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> words<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//让扫描器工作</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>scanner<span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//没有到末尾</span>
        <span class="token comment" spellcheck="true">//收集开始{{之前的文字</span>
        words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token string">"{{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>words <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//处理空字符串</span>
            <span class="token keyword">var</span> _words <span class="token operator">=</span> <span class="token function">handleSpace</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//存起来</span>
            tempTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">,</span> _words<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//跳过{{</span>
        scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"{{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开始收集{{}}中间的内容</span>
        words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token string">"}}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>words <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//此时words就是{{}}中间的内容</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//数据的开始标签</span>
                <span class="token comment" spellcheck="true">//跳过#，从下标为1的项开始存</span>
                tempTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"#"</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//数据的结束标签</span>
                tempTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/"</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//普通内容</span>
                tempTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> words<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//跳过}}</span>
        scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"}}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//调用nestTokens()将tempTokens变为最终tokens</span>
    <span class="token keyword">var</span> nestedTokens <span class="token operator">=</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span>tempTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nestedTokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="handleSpace-js处理空字符串"><a href="#handleSpace-js处理空字符串" class="headerlink" title="handleSpace.js处理空字符串"></a>handleSpace.js处理空字符串</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*
    该方法用来处理空格，为了避免空格对dom树渲染造成布局影响。
    标签外的空字符串需要去除，标签&lt;>内的空字符不需要去除。
*/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handleSpace</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//isNull标记是否是标签标签内部</span>
    <span class="token keyword">let</span> isNull <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//结果字符串</span>
    <span class="token keyword">var</span> _words <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//循环遍历判断</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//判断是否在标签里</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            isNull <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            isNull <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//如果这项不是空格，拼接上</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/\s/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            _words <span class="token operator">+</span><span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//是空格</span>
            <span class="token comment" spellcheck="true">//且在标签内部，则拼接该空格</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>isNull<span class="token punctuation">)</span><span class="token punctuation">{</span>
                _words <span class="token operator">+</span><span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> _words<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>如果是但这里生成的tempTokens并不是最后的tokens，只是对双大括号进行了实别并将模板字符串中不同的内容区分开然后存入数组中。然后在最后调用了下面要讲到的nestTokens函数将tempTokens转为最终的tokens。</p>
<img src="/posts/af35/2.png" class>

<p>这个数组中的每一项小数组都是一个token，这个概念下面要用。</p>
<h3 id="生成真正的嵌套的tokens"><a href="#生成真正的嵌套的tokens" class="headerlink" title="生成真正的嵌套的tokens"></a>生成真正的嵌套的tokens</h3><p>nestTokens.js通过循环遍历上面生成的tempTokens每一个token，判断处理后，生成最终的tokens。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*
    该函数的功能是折叠tokens,将#和/之间的tokens整合起来，作为下标为2的项
*/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//结果数组</span>
    <span class="token keyword">var</span> nestedTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//这里采用栈结构，存放内嵌的的tokens</span>
    <span class="token keyword">var</span> sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//收集器，初始指向nestedTokens数组</span>
    <span class="token comment" spellcheck="true">//收集器的指向会变化，当遇见#的时候，收集器会指向这个token的下标为2的新数组</span>
    <span class="token keyword">var</span> collector <span class="token operator">=</span> nestedTokens<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">"#"</span><span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true">//收集器中放入token</span>
                collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//入栈</span>
                sections<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//收集器换人，给token添加下标为2的项，并让收集器指向它</span>
                collector <span class="token operator">=</span> token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true">//出栈</span>
                sections<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//改变收集器为栈队尾（队尾是栈顶）那项的下标为2的数组</span>
                <span class="token comment" spellcheck="true">//如果栈为空则指回结果数组</span>
                collector <span class="token operator">=</span> sections<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> sections<span class="token punctuation">[</span>sections<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> nestedTokens<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nestedTokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这一段是比较精彩的地方，看起来就是把上面的数组变成下面的嵌套式数组，但是实现原理很精妙。</p>
<img src="/posts/af35/3.png" class>

<p>逻辑如下：</p>
<p>1、遍历tempTokens，首先有一个collector指向结果tokens，遇到普通token就追加进入collector，遇到‘#’token也把该token加到结果collector，此时collector依旧是结果数组。</p>
<p>2、由于有先进后出的逻辑，这里设置了sections为一个栈。遇到‘#’token，该token入栈。然后collector开始指向该token的第三项（下标为2），且初始为一个空数组。</p>
<p>3、然后又会遇到普通token，追加进collector，这时候collector已经指向了之前遇到的‘#’token的第三项空数组了。</p>
<p>4、之后就会遇到需要内嵌的‘#’token，又入栈，循环第二步和三步。</p>
<p>5、直到进入最里层的内嵌数组后，collector指向最里层token的第三项空数组。然后把该token后的普通token都放入collector中，直到遇到‘/’token。</p>
<p>6、遇到‘/’token后，出栈（栈中存储的是从外到里的所有内嵌的token），每出一个，collector就重新指向栈顶的token的第三项数组。继续遍历，如果后面还有普通token，普通token继续放入collector中。</p>
<p>7、直到sections栈为空，代表内嵌数组处理完毕，collector最后指向结果tokens。</p>
<p>如果对栈结构不熟悉，可以看之前的文章：<a href="https://www.eternitywith.xyz/posts/242b.html">JavaScript中数据在内存中的存储方式</a></p>
<h3 id="入口文件index-js"><a href="#入口文件index-js" class="headerlink" title="入口文件index.js"></a>入口文件index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> parseTemplateToTokens <span class="token keyword">from</span> <span class="token string">"./parseTemplateToTokens.js"</span>

<span class="token comment" spellcheck="true">//全局提供myTemplate</span>
window<span class="token punctuation">.</span>myTemplate <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//渲染方法</span>
    <span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//调用parseTemplateToTokens函数，让模板字符串能够变为tokens数组</span>
        <span class="token keyword">var</span> tokens <span class="token operator">=</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>手写mustache源码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xuni/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">//模板字符串</span>
        <span class="token keyword">var</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
        &lt;div>
            &lt;ol>
                {{#students}}
                &lt;li>
                    学生{{name}}的爱好是
                    &lt;ol>
                        {{#hobbies}}
                        &lt;li>{{.}}&lt;/li>
                        {{/hobbies}}
                    &lt;/ol>
                &lt;/li>
                {{/students}}
            &lt;/ol>
        &lt;/div>
        `</span></span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//调用render</span>
        myTemplate<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Vue源码解析</category>
      </categories>
      <tags>
        <tag>mustache</tag>
      </tags>
  </entry>
  <entry>
    <title>简单实现mustache模板引擎-将tokens变为dom</title>
    <url>/posts/51d7.html</url>
    <content><![CDATA[<h1 id="简单实现mustache模板引擎之将tokens变为dom"><a href="#简单实现mustache模板引擎之将tokens变为dom" class="headerlink" title="简单实现mustache模板引擎之将tokens变为dom"></a>简单实现mustache模板引擎之将tokens变为dom</h1><p>上一篇文章讲述了将模板字符串变为tokens，这里记录将tokens变为dom，本篇结束也就完成了mustache的基本功能，也能够理解mustache的核心原理。</p>
<h3 id="完整目录"><a href="#完整目录" class="headerlink" title="完整目录"></a>完整目录</h3><img src="/posts/51d7/1.png" class>

<p>renderTemplate.js该函数将tokens变为dom，因为存在嵌套tokens，需要进行递归处理，为了方便将该部分提取到parseArray.js中。</p>
<p>由于数据中存在对象嵌套，所以会出现这种连续点操作符的情况，会出现问题，lookup.js就是解决该问题。</p>
<h3 id="renderTemplate-js"><a href="#renderTemplate-js" class="headerlink" title="renderTemplate.js"></a>renderTemplate.js</h3><p>让tokens变为dom字符串，通过遍历tokens判断每个token的类型，不同类型做不同的处理，最终会拼接成一个字符串。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> lookup <span class="token keyword">from</span> <span class="token string">"./lookup.js"</span>
<span class="token keyword">import</span> parseArray <span class="token keyword">from</span> <span class="token string">"./parseArray.js"</span>
<span class="token comment" spellcheck="true">/*
    该函数让tokens变为dom字符串
*/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//结果字符串</span>
    <span class="token keyword">var</span> resultStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//遍历tokens</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//判断类型</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            resultStr <span class="token operator">+</span><span class="token operator">=</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// resultStr +=data[token[1]];</span>
            <span class="token comment" spellcheck="true">//这里不能直接用以上方式拼接，因为如果出现连续点（如a.b.c）的形式，是无法通过[]得出结果的，所以这里使用了单独的lookup函数进行处理</span>
            resultStr <span class="token operator">+</span><span class="token operator">=</span><span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            resultStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">parseArray</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> resultStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="parseArray-js"><a href="#parseArray-js" class="headerlink" title="parseArray.js"></a>parseArray.js</h3><p>由于存在数据嵌套，该函数处理嵌套token，并且递归调用上面的renderTemplate.js。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> lookup <span class="token keyword">from</span> <span class="token string">"./lookup.js"</span>
<span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">"./renderTemplate"</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
    该函数处理数组，结合renderTemplate实现递归
    这里的参数是token(tokens中的一条)，而不是tokens！
*/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseArray</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//在整体数组中找到需要使用的部分</span>
    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//结果字符串</span>
    <span class="token keyword">var</span> resultString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//根据数据长度决定遍历次数,因为每一条数据都需要被生成dom</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//一维数组中点符号代表每个数据本身，为了适应一维和多维数据，需要将数据进行处理成为一个新对象传入renderTemplate中</span>
        resultString <span class="token operator">+</span><span class="token operator">=</span><span class="token function">renderTemplate</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
            <span class="token operator">...</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">'.'</span><span class="token punctuation">:</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resultString<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="lookup-js"><a href="#lookup-js" class="headerlink" title="lookup.js"></a>lookup.js</h3><p>解决数据中连续点操作符的问题，该函数处理逻辑是，如果有点操作符则将其拆分，一步一步往里查找，直到找到最终值。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*
    在dataObj对象中，寻找用连续点符号的keyName属性
    例如：
    var dataObj = {a:{b:{c:10}}}
    那么lookup(dataObj,"a.b.c")为100
*/</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">lookup</span><span class="token punctuation">(</span>dataObj<span class="token punctuation">,</span> keyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//寻找keyName中有没有点符号,或者不是点符号本身</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>keyName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> keyName <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//如果有点符号则将其以点符号进行拆分</span>
        <span class="token keyword">var</span> keys <span class="token operator">=</span> keyName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置临时遍历，用于存储向里查找的每一层</span>
        <span class="token keyword">var</span> temp <span class="token operator">=</span> dataObj<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//层层往里寻找</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            temp  <span class="token operator">=</span> temp<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//没有点符号，直接返回属性值</span>
    <span class="token keyword">return</span> dataObj<span class="token punctuation">[</span>keyName<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> parseTemplateToTokens <span class="token keyword">from</span> <span class="token string">"./parseTemplateToTokens.js"</span>
<span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">"./renderTemplate.js"</span>

<span class="token comment" spellcheck="true">//全局提供myTemplate</span>
window<span class="token punctuation">.</span>myTemplate <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//渲染方法</span>
    <span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//调用parseTemplateToTokens函数，让模板字符串能够变为tokens数组</span>
        <span class="token keyword">var</span> tokens <span class="token operator">=</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//调用renderTemplate让tokens变为dom字符串</span>
        <span class="token keyword">var</span> domStr <span class="token operator">=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> domStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>手写mustache源码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xuni/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">//模板字符串</span>
        <span class="token keyword">var</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
        &lt;div>
            &lt;ol>
                {{#students}}
                &lt;li>
                    学生{{name}}的爱好是
                    &lt;ol>
                        {{#hobbies}}
                        &lt;li>{{.}}&lt;/li>
                        {{/hobbies}}
                    &lt;/ol>
                &lt;/li>
                {{/students}}
            &lt;/ol>
        &lt;/div>
        `</span></span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
            students<span class="token punctuation">:</span><span class="token punctuation">[</span>
                <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'hobbies'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"音乐"</span><span class="token punctuation">,</span><span class="token string">"舞蹈"</span><span class="token punctuation">,</span><span class="token string">"逍遥法外"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'老王'</span><span class="token punctuation">,</span><span class="token string">'hobbies'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"太极"</span><span class="token punctuation">,</span><span class="token string">"广场舞"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'hobbies'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"游泳"</span><span class="token punctuation">,</span><span class="token string">"摄影"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//调用render</span>
        <span class="token keyword">var</span> domStr <span class="token operator">=</span> myTemplate<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//渲染dom树</span>
        <span class="token keyword">var</span> con <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"con"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        con<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domStr<span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>结果如图：</p>
<img src="/posts/51d7/2.png" class>



<p>总结：该模板引擎并不是mustache官方源码，只是模仿源码，实现了最基本的功能，能够帮助深入理解vue的底层原理。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Vue源码解析</category>
      </categories>
      <tags>
        <tag>mustache</tag>
      </tags>
  </entry>
  <entry>
    <title>文件操作</title>
    <url>/posts/3f31.html</url>
    <content><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications">MDN-在web应用程序中使用文件</a></p>
<h3 id="显示文件大小"><a href="#显示文件大小" class="headerlink" title="显示文件大小"></a>显示文件大小</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>file size<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateSize()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uploadForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uploadInput<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFiles<span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateSize();<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>
            selected files:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            total size:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Send file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">updateSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> nBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            oFiles <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'uploadInput'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">,</span>
                nFiles <span class="token operator">=</span> oFiles<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//累加所有文件大小</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> nFileId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> nFileId <span class="token operator">&lt;</span> nFiles<span class="token punctuation">;</span> nFileId<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nBytes <span class="token operator">+</span><span class="token operator">=</span> oFiles<span class="token punctuation">[</span>nFileId<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">let</span> sOutput <span class="token operator">=</span> nBytes <span class="token operator">+</span> <span class="token string">"bytes"</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//单位转换</span>
            <span class="token keyword">const</span> aMultiples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"KiB"</span><span class="token punctuation">,</span> <span class="token string">"MiB"</span><span class="token punctuation">,</span> <span class="token string">"GiB"</span><span class="token punctuation">,</span> <span class="token string">"TiB"</span><span class="token punctuation">,</span> <span class="token string">"PiB"</span><span class="token punctuation">,</span> <span class="token string">"EiB"</span><span class="token punctuation">,</span> <span class="token string">"ZiB"</span><span class="token punctuation">,</span> <span class="token string">"YiB"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>nMultiple <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nApprox <span class="token operator">=</span> nBytes <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span> nApprox <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> nApprox <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> nMultiple<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sOutput <span class="token operator">=</span> nApprox<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> aMultiples<span class="token punctuation">[</span>nMultiple<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> nBytes <span class="token operator">+</span> <span class="token string">" bytes)"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileNum"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> nFiles<span class="token punctuation">;</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileSize"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> sOutput<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<img src="/posts/3f31/1.png" class>

<h3 id="自定义文件上传器-通过-click-方法使用隐藏的-file-input-元素"><a href="#自定义文件上传器-通过-click-方法使用隐藏的-file-input-元素" class="headerlink" title="自定义文件上传器/通过 click() 方法使用隐藏的 file input 元素"></a>自定义文件上传器/通过 click() 方法使用隐藏的 file input 元素</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>custom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#fileSelect</span></span><span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileElem<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFiles(this.files)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileSelect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Select some files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">const</span> fileSelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fileSelect'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        fileElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'fileElem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//隐藏input文件框，并将button的点击事件转移到隐藏的input上</span>
        fileSelect<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fileElem<span class="token punctuation">)</span><span class="token punctuation">{</span>
                fileElem<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>

        <span class="token keyword">function</span> <span class="token function">handleFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<img src="/posts/3f31/2.png" class>

<h3 id="无绑定事件触发文件上传-使用-label-元素来触发一个隐藏的-file-input-元素"><a href="#无绑定事件触发文件上传-使用-label-元素来触发一个隐藏的-file-input-元素" class="headerlink" title="无绑定事件触发文件上传/使用 label 元素来触发一个隐藏的 file input 元素"></a>无绑定事件触发文件上传/使用 label 元素来触发一个隐藏的 file input 元素</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>无绑定事件触发文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token class">.visually-hidden</span> </span><span class="token punctuation">{</span>
            <span class="token property">position</span><span class="token punctuation">:</span> absolute <span class="token important">!important</span><span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>
            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
            <span class="token property">clip</span><span class="token punctuation">:</span> <span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">1</span>px, <span class="token number">1</span>px, <span class="token number">1</span>px, <span class="token number">1</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/* Separate rule for compatibility, :focus-within is required on modern Firefox and Chrome */</span>
        <span class="token comment" spellcheck="true">/*
            :focus CSS伪类 :focus表示获得焦点的元素（如表单输入）。当用户点击或触摸元素或通过键盘的 “tab” 键选择它时会被触发。
            MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus

            :focus-within 是一个CSS 伪类 ，表示一个元素获得焦点，或，该元素的后代元素获得焦点。换句话说，元素自身或者它的某个后代匹配 :focus 伪类。
            MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-within

            outline CSS 的 outline 属性是在一条声明中设置多个轮廓属性的简写属性 ， 例如 outline-style, outline-width 和 outline-color。与border类似。
            MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/outline
        */</span>
        <span class="token selector">input<span class="token class">.visually-hidden</span><span class="token pseudo-class">:focus</span>+label </span><span class="token punctuation">{</span>
            <span class="token property">outline</span><span class="token punctuation">:</span> thin dotted<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token selector">input<span class="token class">.visually-hidden</span><span class="token pseudo-class">:focus-within</span>+label </span><span class="token punctuation">{</span>
            <span class="token property">outline</span><span class="token punctuation">:</span> thin dotted<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileElem<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>visually-hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileElem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Select some files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="使用拖放来选择文件"><a href="#使用拖放来选择文件" class="headerlink" title="使用拖放来选择文件"></a>使用拖放来选择文件</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>使用拖放选择文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#dropbox</span></span><span class="token punctuation">{</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">132</span>, <span class="token number">161</span>, <span class="token number">245</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFiles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">let</span> dropbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'dropbox'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dropbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragenter"</span><span class="token punctuation">,</span>dragenter<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dropbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span>dragover<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dropbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span>drop<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">dragenter</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">function</span> <span class="token function">dragover</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">function</span> <span class="token function">drop</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">var</span> dt <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">;</span>
            <span class="token keyword">var</span> files <span class="token operator">=</span> dt<span class="token punctuation">.</span>files<span class="token punctuation">;</span>

            <span class="token function">handleFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">handleFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*处理逻辑*/</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="显示图片缩略图"><a href="#显示图片缩略图" class="headerlink" title="显示图片缩略图"></a>显示图片缩略图</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>显示图片缩略图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector"><span class="token class">.box</span> <span class="token class">.img</span></span><span class="token punctuation">{</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFiles(this.files)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">handleFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">var</span> file <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> imageType <span class="token operator">=</span> <span class="token regex">/^image\//</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>imageType<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//匹配图片类型文件</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放置缩略图的父容器</span>

                img<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                img<span class="token punctuation">.</span>file <span class="token operator">=</span> file<span class="token punctuation">;</span>
                box<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/*
                    FileReader对象 允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。
                    MDN：https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader
                */</span>
                <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/*
                    FileReader.onload
                    处理load (en-US)事件。该事件在读取操作完成时触发。
                */</span>                
                reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>aImg<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        aImg<span class="token punctuation">.</span>src <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>

                <span class="token comment" spellcheck="true">/*
                    FileReader.readAsDataURL()
                    开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的Base64字符串以表示所读取文件的内容。
                */</span>
                reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<img src="/posts/3f31/3.png" class>

<h3 id="使用对象URL来显示图片"><a href="#使用对象URL来显示图片" class="headerlink" title="使用对象URL来显示图片"></a>使用对象URL来显示图片</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>使用对象url来显示图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileElem<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFiles(this.files)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileSelect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Select some files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>No files selected！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        window<span class="token punctuation">.</span>URL <span class="token operator">=</span> window<span class="token punctuation">.</span>URL <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitURL<span class="token punctuation">;</span>

        <span class="token keyword">var</span> fileSelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileSelect"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        fileElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileElem"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        fileList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"fileList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/*
            为了美观隐藏input，再将a标签的点击事件转移到input
        */</span>
        fileSelect<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fileElem<span class="token punctuation">)</span><span class="token punctuation">{</span>
                fileElem<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻止“#”跳转</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>



        <span class="token keyword">function</span> <span class="token function">handleFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
                fileList<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;p>No files selected！&lt;/p>"</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                fileList<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个ul来展示</span>
                fileList<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment" spellcheck="true">/*
                        设置图片的源为一个新的指代文件的对象URL，使用window.URL.createObjectURL() (en-US)来创建blob URL。
                    */</span>
                    img<span class="token punctuation">.</span>src <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>

                    <span class="token comment" spellcheck="true">/*
                        设置图片的load事件处理器来释放对象URL，当图片加载完成之后对象URL就不再需要了。
                        这个可以通过调用window.URL.revokeObjectURL() (en-US)方法并且传递 img.src中的对象URL字符串来实现。
                    */</span>
                    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">var</span> info <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建span展示文件相应信息</span>
                    info<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token operator">+</span><span class="token string">"bytes"</span><span class="token punctuation">;</span>
                    li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<img src="/posts/3f31/4.png" class>

<h3 id="使用对象URL显示PDF"><a href="#使用对象URL显示PDF" class="headerlink" title="使用对象URL显示PDF"></a>使用对象URL显示PDF</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用对象URL显示PDF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#viewer</span></span><span class="token punctuation">{</span>
            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFiles(this.files)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 使用iframe作为容器 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">handleFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> obj_url <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"viewer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            iframe<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> obj_url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>obj_url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<img src="/posts/3f31/5.png" class><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title>波浪涟漪特效及衍生效果</title>
    <url>/posts/4597.html</url>
    <content><![CDATA[<h1 id="前端常见效果实现"><a href="#前端常见效果实现" class="headerlink" title="前端常见效果实现"></a>前端常见效果实现</h1><h2 id="波浪涟漪特效及衍生的声波效果"><a href="#波浪涟漪特效及衍生的声波效果" class="headerlink" title="波浪涟漪特效及衍生的声波效果"></a>波浪涟漪特效及衍生的声波效果</h2><p>实现原理：将盒子初始宽高设为0，通过css3动画将盒子宽高变大，再通过css变量控制下一个盒子开始变化的时间，即可实现涟漪效果。</p>
<p>代码如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">1</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">2</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">3</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">4</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">5</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">6</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">7</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">8</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">9</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">10</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*实际情况中使用了重置样式表清除了默认样式*/</span>
<span class="token selector">body </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span>  </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span> span </span><span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/*使用定位让每个span在box中居中*/</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/*设置span的初始宽高，不然开始会出现一段时间的边框*/</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> animate <span class="token number">5</span>s linear infinite<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置重复动画*/</span>
    <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">0.5</span>s*<span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*通过i变量控制每个盒子变化的时间间隔*/</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@keyframes</span> animate</span> <span class="token punctuation">{</span>
    <span class="token selector">0% </span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*透明度改变*/</span>
    <span class="token punctuation">}</span>
    <span class="token selector">100% </span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>效果如图：</p>
<img src="/posts/4597/1.gif" class>

<p>上面是用过定位让每个span在box中居中，还可以通过flex布局实现，将其中两个样式改为如下即可。</p>
<p>这里需要注意的是span仍需要通过绝对定位将每个span脱离文档流，不然无法实现居中的效果。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span>  </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span> span </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> animate <span class="token number">5</span>s linear infinite<span class="token punctuation">;</span>
    <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">0.5</span>s*<span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="衍生的其他效果"><a href="#衍生的其他效果" class="headerlink" title="衍生的其他效果"></a>衍生的其他效果</h3><p>在上面的基础上，通过改变span的初始位置及旋转box的角度，实现喇叭效果，代码如下：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span>  </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将box旋转-45度*/</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span> span </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*改变span位置*/</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> animate <span class="token number">5</span>s linear infinite<span class="token punctuation">;</span>
    <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">0.5</span>s*<span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>效果如图：</p>
<img src="/posts/4597/2.gif" class>

<p>全部代码：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>波浪涟漪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../reset.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
            <span class="token selector">body </span><span class="token punctuation">{</span>
                <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>
                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>
                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span> </span><span class="token punctuation">{</span>
                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
                <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span>
                <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
                <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
                <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
                <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span> span </span><span class="token punctuation">{</span>
                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
                <span class="token property">animation</span><span class="token punctuation">:</span> animate <span class="token number">5</span>s linear infinite<span class="token punctuation">;</span>
                <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">0.5</span>s*<span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span><span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>
                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>
                <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
                <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
                <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
                <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token selector"><span class="token class">.container</span> <span class="token class">.box</span><span class="token pseudo-class">:nth-child(2)</span> span </span><span class="token punctuation">{</span>
                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
                <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
                <span class="token property">animation</span><span class="token punctuation">:</span> animate <span class="token number">5</span>s linear infinite<span class="token punctuation">;</span>
                <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">0.5</span>s*<span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token atrule"><span class="token rule">@keyframes</span> animate</span> <span class="token punctuation">{</span>
                <span class="token selector">0% </span><span class="token punctuation">{</span>
                    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token selector">100% </span><span class="token punctuation">{</span>
                    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
                    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
                    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">1</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">2</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">3</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">4</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">5</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">6</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">7</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">8</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">9</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">10</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">1</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">2</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">3</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">4</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">5</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">6</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">7</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">8</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">9</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">10</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>学自：<a href="https://www.ixigua.com/6807982622866670083%EF%BC%8C%E6%84%9F%E8%B0%A2%E3%80%82">https://www.ixigua.com/6807982622866670083，感谢。</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>组件库</category>
      </categories>
      <tags>
        <tag>CSS3动画</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次爬虫</title>
    <url>/posts/2a36.html</url>
    <content><![CDATA[<h1 id="记录第一次爬虫"><a href="#记录第一次爬虫" class="headerlink" title="记录第一次爬虫"></a>记录第一次爬虫</h1><p>某人为了在研毕中划水，问我会不会爬虫，按教程简单学了一下。</p>
<h3 id="mac中安装python3"><a href="#mac中安装python3" class="headerlink" title="mac中安装python3"></a>mac中安装python3</h3><p>mac自带python，不过是2.7版本，但是现在一般使用3以上版本，安装过程如下：</p>
<h4 id="下载python3"><a href="#下载python3" class="headerlink" title="下载python3"></a>下载python3</h4><p>python官网：<a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a></p>
<p>从官网下载一个合适版本的安装包，直接打开安装，一直next就行。</p>
<p>安装完成之后，命令行输入python –version，这是python默认的环境还是python2，输入python3才是python3的版本。pip也是一样，需要输入pip3才是python3的环境。</p>
<p>如果需要让python变为python3的环境，需要进行环境配置，改变python的运行时环境指向。</p>
<h4 id="配置python和pip环境"><a href="#配置python和pip环境" class="headerlink" title="配置python和pip环境"></a>配置python和pip环境</h4><p>进入配置文件</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> ~/.bash_profile</code></pre>
<p>添加如下如下三行配置，其中的数字按照下载的版本写，我这里是3.8</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">alias</span> python<span class="token operator">=</span><span class="token string">"/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"</span>

<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span>:/Library/Frameworks/Python.framework/Versions/3.8/bin/pip3.8

<span class="token function">alias</span> pip<span class="token operator">=</span><span class="token string">"/Library/Frameworks/Python.framework/Versions/3.8/bin/pip3.8"</span></code></pre>
<p>保存退出后，输入如下命令重新加载配置文件：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> .bash_profile</code></pre>
<p>然后再输入python –version，就变成刚刚安装的版本了，输入pip –version，pip的环境也成了python3的环境。</p>
<p>说明：本文以下的python和pip命令都是默认python3环境，如果你的不是，则请使用python3和pip3。</p>
<p>致谢：<a href="https://www.cnblogs.com/Simple-Small/p/12221135.html">MAC 下 python3 环境安装和配置</a></p>
<h3 id="VSCode中使用python"><a href="#VSCode中使用python" class="headerlink" title="VSCode中使用python"></a>VSCode中使用python</h3><p>我这里使用VSCode，当然也可以用别的编辑器。</p>
<p>直接安装一个名为python的插件就行。</p>
<p>也可以装其他的辅助包，比如flake8和yapf用来语法检查和格式化代码，可以参考：<a href="https://www.cnblogs.com/xiaojwang/p/11331202.html">用VScode配置Python开发环境</a></p>
<h3 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h3><p>这里使用<a href="http://doc.gopup.cn/#/">GoPUP</a>，直接按照接口说明使用即可。</p>
<p>如果有地方用到百度指数登录后的cookie，直接使用cookie的value值即可。</p>
<h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><p>我这里使用pandas库将其导出为json格式。</p>
<p>先在终端输入<code>pip list</code>查看是否安装了pandas，没有的话需要安装pandas，终端输入<code>pip install Pandas</code>即可。</p>
<p>导出数据参考：<a href="https://tzzsmaster.blog.csdn.net/article/details/81137998">https://tzzsmaster.blog.csdn.net/article/details/81137998</a></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gopup <span class="token keyword">as</span> gp
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

migration_scale_baidu_df <span class="token operator">=</span> gp<span class="token punctuation">.</span>migration_scale_baidu<span class="token punctuation">(</span>area<span class="token operator">=</span><span class="token string">"西安市"</span><span class="token punctuation">,</span>indicator<span class="token operator">=</span><span class="token string">"move_in"</span><span class="token punctuation">,</span>date<span class="token operator">=</span><span class="token string">"20140101"</span><span class="token punctuation">)</span>

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>migration_scale_baidu_df<span class="token punctuation">)</span>

df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token string">"target.json"</span><span class="token punctuation">,</span>force_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>date_format <span class="token operator">=</span> <span class="token string">'iso'</span><span class="token punctuation">)</span></code></pre>
<p><code>target.json</code>为文件名，如果不存在会自动创建，force_ascii=False</p>
<h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p>GoPUP中为迁徙数据提供了两个接口，一个迁入迁出详情，得到某一天内该地区的前一百迁入迁出规模（比例）。一个是迁徙规模，得到某段时间内该城市每天的迁徙规模指数。</p>
<p>最终的结果是得到三百多个城市每两个城市在某一天的迁徙指数值，迁徙指数=该城市在该天的迁出规模指数*该天该城市在另一个城市的迁徙规模。</p>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">import</span> gopup <span class="token keyword">as</span> gp
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> pandas<span class="token punctuation">.</span>core<span class="token punctuation">.</span>frame <span class="token keyword">import</span> DataFrame


<span class="token comment" spellcheck="true">#以第二列为索引读取excel数据</span>
xlsx <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'./city.xlsx'</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 测试表</span>
<span class="token comment" spellcheck="true"># xlsx = pd.read_excel('./312.xlsx',index_col=1)</span>

<span class="token comment" spellcheck="true">#获取城市名</span>
city <span class="token operator">=</span> xlsx<span class="token punctuation">.</span>index<span class="token punctuation">.</span>values
<span class="token comment" spellcheck="true"># print(city)</span>


<span class="token comment" spellcheck="true">#总迁出地详情</span>
<span class="token comment" spellcheck="true"># migrationArea = {}</span>
<span class="token comment" spellcheck="true">#总迁徙规模</span>
<span class="token comment" spellcheck="true"># migrationScale = {}</span>

<span class="token comment" spellcheck="true">#迁出地详情爬取失败的城市</span>
migrationAreaErrorCity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#迁出规模爬取失败的城市</span>
migrationScaleErrorCity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>


row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
col <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> city<span class="token punctuation">:</span>
    row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    col<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 最终的表格</span>
finalTable <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>index<span class="token operator">=</span>row<span class="token punctuation">,</span>columns<span class="token operator">=</span>col<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print(finalTable)</span>

<span class="token keyword">for</span> item <span class="token keyword">in</span> city<span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># ----------详情----------</span>
    baiduAreaData <span class="token operator">=</span> gp<span class="token punctuation">.</span>migration_area_baidu<span class="token punctuation">(</span>area<span class="token operator">=</span>item<span class="token punctuation">,</span> indicator<span class="token operator">=</span><span class="token string">"move_out"</span><span class="token punctuation">,</span> date<span class="token operator">=</span><span class="token string">"20210107"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(baiduAreaData)</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>baiduAreaData<span class="token punctuation">,</span>DataFrame<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">#收集总的详情数据</span>
        <span class="token comment" spellcheck="true"># migrationArea[item] = baiduAreaData.values</span>
        <span class="token comment" spellcheck="true">#单个城市数据导出成表格</span>
        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>baiduAreaData<span class="token punctuation">)</span>
        df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">"./migrationArea/"</span><span class="token operator">+</span>item<span class="token operator">+</span><span class="token string">".xlsx"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">#获取读取失败的城市</span>
        migrationAreaErrorCity<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># -----------规模-----------</span>
    baiduScaleData <span class="token operator">=</span> gp<span class="token punctuation">.</span>migration_scale_baidu<span class="token punctuation">(</span>area<span class="token operator">=</span>item<span class="token punctuation">,</span> indicator<span class="token operator">=</span><span class="token string">"move_out"</span><span class="token punctuation">,</span> date<span class="token operator">=</span><span class="token string">"20210107"</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>baiduScaleData<span class="token punctuation">,</span>DataFrame<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">#收集总的规模数据</span>
        <span class="token comment" spellcheck="true"># migrationScale[item] = baiduScaleData.loc['2020-01-07','迁徙规模指数']</span>
        <span class="token comment" spellcheck="true">#单个城市数据导出成表格</span>
        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>baiduScaleData<span class="token punctuation">)</span>
        df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">"./migrationScale/"</span><span class="token operator">+</span>item<span class="token operator">+</span><span class="token string">".xlsx"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span> 
        <span class="token comment" spellcheck="true">#获取读取失败的城市</span>
        migrationScaleErrorCity<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># ------------填表-------------</span>
    <span class="token keyword">if</span>  isinstance<span class="token punctuation">(</span>baiduAreaData<span class="token punctuation">,</span>DataFrame<span class="token punctuation">)</span> <span class="token operator">&amp;</span> isinstance<span class="token punctuation">(</span>baiduScaleData<span class="token punctuation">,</span>DataFrame<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> areaValues <span class="token keyword">in</span> baiduAreaData<span class="token punctuation">.</span>values<span class="token punctuation">:</span>
            <span class="token keyword">for</span> cityItem <span class="token keyword">in</span> city<span class="token punctuation">:</span>
                <span class="token keyword">if</span> cityItem <span class="token operator">==</span> areaValues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#在详情中遍历查找city列表中的某个城市</span>
                    finalTable<span class="token punctuation">.</span>at<span class="token punctuation">[</span>item<span class="token punctuation">,</span>cityItem<span class="token punctuation">]</span> <span class="token operator">=</span> baiduScaleData<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'2020-01-07'</span><span class="token punctuation">,</span><span class="token string">'迁徙规模指数'</span><span class="token punctuation">]</span><span class="token operator">*</span>areaValues<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>





<span class="token comment" spellcheck="true"># 导出表格</span>
finalTable<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'./finalData.xlsx'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 未爬取到数据的城市导出到表格</span>
pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>migrationAreaErrorCity<span class="token punctuation">)</span><span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'./areaErrorCity.xlsx'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>migrationScaleErrorCity<span class="token punctuation">)</span><span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'./scaleErrorCity.xlsx'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>migrationAreaErrorCity<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>migrationScaleErrorCity<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print(finalTable)</span>

</code></pre>
<p>相应API参考官网：<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html">pandas.DataFrame API</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>跳动的文字</title>
    <url>/posts/29d.html</url>
    <content><![CDATA[<h1 id="前端常见效果实现"><a href="#前端常见效果实现" class="headerlink" title="前端常见效果实现"></a>前端常见效果实现</h1><h2 id="跳动的文字"><a href="#跳动的文字" class="headerlink" title="跳动的文字"></a>跳动的文字</h2><p>实现原理：将每个字放入单独的盒子中，通过css3动画设置每个盒子的动画，并通过过css变量控制每个盒子动画的延迟开始，就能实现文字跳动的效果。</p>
<p>代码如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>跳动的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../reset.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector">body</span><span class="token punctuation">{</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>
            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/* 倒影效果,只在webkit内核有效,参数分别是倒影方向，间距，倒影遮罩层（方向：以原始元素为基础） */</span>
            <span class="token property">-webkit-box-reflect</span><span class="token punctuation">:</span> below <span class="token number">8</span>px <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token selector"><span class="token class">.box</span> span</span><span class="token punctuation">{</span>
            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
            <span class="token property">animation</span><span class="token punctuation">:</span> animate <span class="token number">1.5</span>s ease-in-out infinite<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置动画 infinite为循环*/</span>
            <span class="token property">animation-delay</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">0.1</span>s*<span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*通过css变量--i来控制逐个跳动*/</span>
        <span class="token punctuation">}</span>
        <span class="token atrule"><span class="token rule">@keyframes</span> animate</span><span class="token punctuation">{</span>
            <span class="token selector">0%</span><span class="token punctuation">{</span>
                <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token selector">20%</span><span class="token punctuation">{</span>
                <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">24</span>px<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token selector">40%,100%</span><span class="token punctuation">{</span>
                <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">1</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">2</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">3</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">4</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">5</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">6</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">7</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">8</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">9</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">10</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">11</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--i</span><span class="token punctuation">:</span><span class="token number">12</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>效果如下：</p>
<img src="/posts/29d/1.gif" class>

<p>学自： <a href="https://www.ixigua.com/i6807702906041532939/">https://www.ixigua.com/i6807702906041532939/</a> ，感谢。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>组件库</category>
      </categories>
      <tags>
        <tag>CSS3动画</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+CSS面试题</title>
    <url>/posts/e27a.html</url>
    <content><![CDATA[<h1 id="优就业大前端第一阶段（HTML-CSS）面试题"><a href="#优就业大前端第一阶段（HTML-CSS）面试题" class="headerlink" title="优就业大前端第一阶段（HTML+CSS）面试题"></a>优就业大前端第一阶段（HTML+CSS）面试题</h1><h2 id="第一章-HTML入门"><a href="#第一章-HTML入门" class="headerlink" title="第一章 HTML入门"></a>第一章 HTML入门</h2><h3 id="1、简述-lt-doctype-gt-的作用？"><a href="#1、简述-lt-doctype-gt-的作用？" class="headerlink" title="1、简述<!doctype>的作用？"></a>1、简述&lt;!doctype&gt;的作用？</h3><blockquote>
<p><code>&lt;!DOCTYPE html&gt;</code> 决定浏览器渲染方式。<code>&lt;!DOCTYPE html&gt;</code>表示用HTML5的doctype声明文件包含HTML5标记。</p>
<p><code>&lt;!DOCTYPE&gt;</code>:告知浏览器当前的HTML或XML文档是哪一个版本。Doctype是一条声明，而不是一个标签，也可以把它叫做“文档类型声明”或者简称为“DTD”。</p>
</blockquote>
<h3 id="2、常见的浏览器及其内核？"><a href="#2、常见的浏览器及其内核？" class="headerlink" title="2、常见的浏览器及其内核？"></a>2、常见的浏览器及其内核？</h3><blockquote>
<p>谷歌(chrome)浏览器 – webkit –Blink</p>
</blockquote>
<blockquote>
<p>苹果(Safari) –webkit</p>
</blockquote>
<blockquote>
<p>IE浏览器 –trident</p>
</blockquote>
<blockquote>
<p>欧鹏浏览器(Opera) –Presto –webkit –Blink</p>
</blockquote>
<blockquote>
<p>火狐浏览器(Firefox) –Gecko</p>
</blockquote>
<h3 id="3、b和strong，i和em标签的区别？"><a href="#3、b和strong，i和em标签的区别？" class="headerlink" title="3、b和strong，i和em标签的区别？"></a>3、b和strong，i和em标签的区别？</h3><blockquote>
<p>b、i属于修饰类标签属于物理标签，没有做到结构与样式分离。strong、em属于内容类标签属于逻辑标签，做到了结构与样式分离。</p>
</blockquote>
<blockquote>
<p>strong和em都表示强调，strong比em语气更强烈。</p>
</blockquote>
<blockquote>
<p>在搜索引擎优化strong和em比b和i重要的多。</p>
</blockquote>
<h3 id="4、谈谈对语义化的理解？"><a href="#4、谈谈对语义化的理解？" class="headerlink" title="4、谈谈对语义化的理解？"></a>4、谈谈对语义化的理解？</h3><blockquote>
<p>概念：</p>
<blockquote>
<p>用合理的HTML标签及其特有的属性去格式化文档内容。如标题用h1-h6、段落用p，合理地设置图片的alt属性。</p>
</blockquote>
</blockquote>
<blockquote>
<p>好处：</p>
<blockquote>
<ul>
<li>在没有css的情况下，页面也能呈现出很好的内容结构。  </li>
<li>使代码更具可读性，便于开发和后期维护。  </li>
<li>有利于用户体验。如title、label标签、alt属性的灵活运用。  </li>
<li>有利于SEO。网页和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息。爬虫依赖于标签来确定上下文和各个字段关键字的权重。</li>
</ul>
</blockquote>
</blockquote>
<h2 id="第二章-CSS入门"><a href="#第二章-CSS入门" class="headerlink" title="第二章 CSS入门"></a>第二章 CSS入门</h2><h3 id="1、css引入方式有哪些？"><a href="#1、css引入方式有哪些？" class="headerlink" title="1、css引入方式有哪些？"></a>1、css引入方式有哪些？</h3><blockquote>
<p>行内样式、内部样式表（内嵌式）、外部样式表（外链式）</p>
</blockquote>
<h3 id="2、css基本选择器有哪些？"><a href="#2、css基本选择器有哪些？" class="headerlink" title="2、css基本选择器有哪些？"></a>2、css基本选择器有哪些？</h3><blockquote>
<p>通配符选择器、标签选择器、类选择器、id选择器</p>
</blockquote>
<h3 id="3、如何合并表格单元格？"><a href="#3、如何合并表格单元格？" class="headerlink" title="3、如何合并表格单元格？"></a>3、如何合并表格单元格？</h3><blockquote>
<p>跨行合并rowspan  </p>
</blockquote>
<blockquote>
<p>跨列合并colspan </p>
</blockquote>
<blockquote>
<p>补充：边框合并border-collapse:collapse;</p>
</blockquote>
<h3 id="4、caption、thead、tbody、tfoot有什么用？"><a href="#4、caption、thead、tbody、tfoot有什么用？" class="headerlink" title="4、caption、thead、tbody、tfoot有什么用？"></a>4、caption、thead、tbody、tfoot有什么用？</h3><blockquote>
<p>这些标签能增强语义化，让表格结构更加清晰，对布局不会产生影响。</p>
</blockquote>
<h2 id="第三章-盒模型"><a href="#第三章-盒模型" class="headerlink" title="第三章 盒模型"></a>第三章 盒模型</h2><h3 id="1、常见的表单元素有哪些？"><a href="#1、常见的表单元素有哪些？" class="headerlink" title="1、常见的表单元素有哪些？"></a>1、常见的表单元素有哪些？</h3><blockquote>
<p>input标签(text、password、button、radio、checkbox、submit、reset、file、image)，select标签、textarea标签、button标签</p>
</blockquote>
<h3 id="2、请简述一下盒模型的组成？"><a href="#2、请简述一下盒模型的组成？" class="headerlink" title="2、请简述一下盒模型的组成？"></a>2、请简述一下盒模型的组成？</h3><blockquote>
<p>content、padding、border、margin</p>
</blockquote>
<h3 id="3、css复合选择器有哪些？"><a href="#3、css复合选择器有哪些？" class="headerlink" title="3、css复合选择器有哪些？"></a>3、css复合选择器有哪些？</h3><blockquote>
<p>后代选择器、子代选择器、并集选择器、交集选择器、伪类链接选择器</p>
</blockquote>
<h2 id="第四章-浮动"><a href="#第四章-浮动" class="headerlink" title="第四章 浮动"></a>第四章 浮动</h2><h3 id="1、块级标签、行内块标签、行内标签的区别？"><a href="#1、块级标签、行内块标签、行内标签的区别？" class="headerlink" title="1、块级标签、行内块标签、行内标签的区别？"></a>1、块级标签、行内块标签、行内标签的区别？</h3><blockquote>
<p>块级标签:div、p、h1-h6、ul、ol、li、dl、dt、dd、hr、form  </p>
<blockquote>
<ul>
<li>独占一行，上下排列。 </li>
<li>默认宽度占满父级，默认高度是本身内容的高度。</li>
<li>可以设置宽高及所有盒模型属性。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>行内标签:label、span、a、b、strong、i、em、sub、sup、del</p>
<blockquote>
<ul>
<li>默认并排，宽高由内容撑开。  </li>
<li>行内元素只能容纳文本或其他内联元素(行内元素)，不能镶嵌块级元素。</li>
<li>行标签之间有间隙、不能设置上下内外边距，可以设置左右内外边距。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>行内块标签:input、img、select、textarea、button</p>
<blockquote>
<ul>
<li>默认并排，可以设置宽高。</li>
<li>中间有间距，可以设置盒模型的所有属性。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、浮动产生的问题？清除浮动的方案？"><a href="#2、浮动产生的问题？清除浮动的方案？" class="headerlink" title="2、浮动产生的问题？清除浮动的方案？"></a>2、浮动产生的问题？清除浮动的方案？</h3><blockquote>
<p>产生的问题（浮动是为了实现文字环绕图片而产生）</p>
<blockquote>
<p>子标签浮动后脱离文档流，导致父标签高度塌陷，会影响后续正常布局。</p>
</blockquote>
</blockquote>
<blockquote>
<p>清楚浮动的方法</p>
<blockquote>
<ul>
<li><p>给浮动的父标签固定高度（不够灵活）。</p>
</li>
<li><p>给父标签加overflow属性，overflow为visible以外的其他值时（即把父标签设置成BFC）可以帮助实现。</p>
</li>
<li><p>给浮动标签的最后加一个空块标签，标签本身不浮动，且添加样式clear:both;(代码冗余，不建议)</p>
</li>
<li><p>(推荐方法)给浮动标签的父标签添加.clearfix（不会在结构上产生代码冗余，可多次重复使用）。</p>
</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
   <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.clearfix</span></span><span class="token punctuation">{</span>
   *<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> //为了兼容ie<span class="token number">7</span>及以下。
<span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<h3 id="3、伪元素如何创建？"><a href="#3、伪元素如何创建？" class="headerlink" title="3、伪元素如何创建？"></a>3、伪元素如何创建？</h3><blockquote>
<p>在元素的开头（第一个子元素之前）添加</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>
<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
<span class="token number">...</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
<blockquote>
<p>在元素的末尾（第一个子元素之后）添加</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
<span class="token number">...</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
<h2 id="第五章-定位"><a href="#第五章-定位" class="headerlink" title="第五章 定位"></a>第五章 定位</h2><h3 id="1、如何实现盒子的水平垂直居中？"><a href="#1、如何实现盒子的水平垂直居中？" class="headerlink" title="1、如何实现盒子的水平垂直居中？"></a>1、如何实现盒子的水平垂直居中？</h3><blockquote>
<p>文本/行内块水平居中：</p>
<blockquote>
<p>父标签text-align:center;</p>
</blockquote>
</blockquote>
<blockquote>
<p>文本/行内块垂直居中：</p>
<blockquote>
<ul>
<li>line-height:height;</li>
<li>父标签padding-top=padding-bottom  </li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>块元素水平居中：</p>
<pre class=" language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*需要固定宽度*/</span></code></pre>
</blockquote>
<blockquote>
<p>块元素垂直居中：</p>
<blockquote>
<ul>
<li>调节margin、padding</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>绝对定位（父元素尺寸变化，子元素尺寸固定）</li>
</ul>
<pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>
   <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>
   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
   <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
   <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
   <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span>；
   top：<span class="token number">50%</span>；
   <span class="token comment" spellcheck="true">/* 再移动子元素宽度和高度的一半 */</span>
   <span class="token property">margin-left</span><span class="token punctuation">:</span>-<span class="token number">100</span>px<span class="token punctuation">;</span>
   <span class="token property">margin-top</span><span class="token punctuation">:</span>-<span class="token number">100</span>px<span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>绝对定位（父元素和子元素的尺寸都是可变的）</li>
</ul>
<pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>
   <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>
   <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
   <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">/*如果还想实现水平居,可以加上:*/</span>
   <span class="token property">right</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>采用Flex弹性布局 （该方法适用于行内、行内块、块级标签）<br>父元素设置display:flex;<br>align-items: center;（子元素对齐方式）<br>水平居中还需要加上：justify-content:center;</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>采用表格布局（该方法适用于行内、行内块、块级标签,但不常用）<br>设置父标签display:table;<br>子标签display:table-cell;vertical:middle;<br>如下：</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div class="wrapper">
   &lt;p>我要垂直居中啊a我要垂直居中啊a我要垂直居中啊a我要垂直居中啊a&lt;/p>
&lt;/div>

<span class="token class">.wrapper</span></span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.wrapper</span> p</span><span class="token punctuation">{</span>
 <span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*该属性使该元素成为单元格，宽高无效，margin无效，宽度由内容撑开*/</span>
 <span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">/*如果还想实现水平居中,加上:*/</span>
 <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
</blockquote>
<h2 id="第六章-布局技巧"><a href="#第六章-布局技巧" class="headerlink" title="第六章 布局技巧"></a>第六章 布局技巧</h2><h3 id="1、图片下方空白间隙如何解决？"><a href="#1、图片下方空白间隙如何解决？" class="headerlink" title="1、图片下方空白间隙如何解决？"></a>1、图片下方空白间隙如何解决？</h3><blockquote>
<p>水平空白</p>
<blockquote>
<ul>
<li>图片浮动(不建议)  </li>
<li>父元素设置font-size:0;</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>垂直间隙</p>
<blockquote>
<ul>
<li>图片浮动(不建议)  </li>
<li>父元素设置font-size:0或line-height:0;  </li>
<li>图片设置vertical-align:middle; //任意不为baseline的值都可以，因为基线对齐会使基线以下的部分空出来。</li>
<li>图片设置display:block;</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。"><a href="#2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。" class="headerlink" title="2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。"></a>2、请简述等高布局、圣杯布局、双飞翼布局的实现原理。</h3><blockquote>
<p>等高布局</p>
<blockquote>
<ul>
<li>伪等高</li>
</ul>
<blockquote>
<ul>
<li>边框模拟<br>原理：因为元素边框和元素高度始终是相同高度，用元素的边框颜色来伪装左右两个兄弟元素的背景色。然后将左右两个透明背景的元素使用absolute覆盖在中间元素的左右边框上，实现视觉上的等高效果。注意:左右两侧元素的内容高度不能大于中间元素内容高度，否则无法撑开容器高度。</li>
<li>内外边距相消<br>因为背景是在padding区域显示的，设置一个大数值的padding-bottom，再设置相同数值的负的margin-bottom，使背景色铺满元素区域，又符合元素的盒模型的计算公式（实际宽高=内容+内边距+边框+外边距），实现视觉上的等高效果。注意：父元素要设置overflow:hidden。如果页面中使用a锚点跳转时，将会隐藏部分文字信息。如果页面中的背景图片定位到底部，将会看不到背景图片。</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>真等高</li>
</ul>
<blockquote>
<ul>
<li>背景嵌套<br>利用内容撑开父元素的特点，给每一列添加一个背景容器，并且相互嵌套，等高元素在最里层的背景容器中且同级。背景容器使用相对定位往外移，相应的等高元素也利用margin移到对应的容器里，只要有一个等高元素的高度发生变化，就会撑开套在最里层的背景容器，其他套在外层的背景容器高度也随之变化。（讲义p59页）</li>
<li>绝对定位<br>所有子元素设置绝对定位，各元素通过绝对定位移到父元素的左中右位置，子元素由于脱离了文档流不占位，无法撑开父元素高度，需要设置父元素的固定高度，并且所有子元素的top:0;bottom:0;(这两个设置才是使子元素高度与父元素同高的关键。)，就可以使得所有子元素的高度都和父元素的高度相同，实现等高效果。</li>
<li>表格布局<br>table元素中的table-cell元素默认是等高的，将父元素设置成display:table;等高子元素设置成display:table-cell;即可。</li>
<li>Flex弹性盒布局<br>flex弹性盒中的项目如果未设置高度或高度为auto，则交叉轴方向默认占满容器的高度，再配合justify-content属性调整项目位置，即可实现等高效果。</li>
<li>Grid网格布局<br>grid网格布局在不设置行数（默认一行）时，设置grid-auto-flow:column;(先列后行)，每列项目默认占满一列的高度即父容器的高度，即可实现等高布局。</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>圣杯布局、双飞翼布局</p>
<blockquote>
<p>共同点:<br>中间栏放最前面，左右标签固定宽度，中间标签宽度百分百，三个标签左浮动，左边元素margin:-100%移到第一行最左边，右边元素利用marigin:-自身宽度  移到第一行最右边。<br>圣杯解决方案：三个标签的父容器左右分别设置等于左右元素宽度的padding，再利用相对定位移动左右元素。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>双飞翼解决方案：给中间栏加一个内层inner，并给inner添加等于左右两栏宽度的外边距（其实内边距也可以）。（不能直接给中间栏设置内外边距，因为中间栏设置了width:100%,直接给中间栏加内外边距会导致界面宽度加大。）</p>
</blockquote>
</blockquote>
<h2 id="第七章-CSS技巧"><a href="#第七章-CSS技巧" class="headerlink" title="第七章 CSS技巧"></a>第七章 CSS技巧</h2><h3 id="1、简述css精灵图原理，及优缺点？"><a href="#1、简述css精灵图原理，及优缺点？" class="headerlink" title="1、简述css精灵图原理，及优缺点？"></a>1、简述css精灵图原理，及优缺点？</h3><blockquote>
<p>原理:<br>css sprites，通常被解释为”CSS图像拼合”或”CSS贴图定位”，就是把网页中一些背景图片整合到一张图片文件中，再利用background-image、background-repeat、background-position等属性的组合进行背景定位，background-position用数字能精确地定位出来背景图片的位置，一般适用于小图标，不适合大背景。 </p>
</blockquote>
<blockquote>
<p>优点：  </p>
<blockquote>
<ul>
<li>减少网页的http请求，从而大大提高网页的性能；</li>
<li>减少图片命名上的困扰；</li>
<li>更换风格方便。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>缺点：  </p>
<blockquote>
<ul>
<li>必须要限定容器的大小符合背景图元素，需要计算；</li>
<li>需要测量背景图所在的位置。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、简述BFC规则及解决的问题？"><a href="#2、简述BFC规则及解决的问题？" class="headerlink" title="2、简述BFC规则及解决的问题？"></a>2、简述BFC规则及解决的问题？</h3><blockquote>
<p>规则：  </p>
<blockquote>
<ul>
<li>内部的标签会在垂直方向上一个接一个地放置。</li>
<li>垂直方向上的距离由margin决定，属于同一个BFC的两个相邻标签的margin会发生重叠。</li>
<li>每个标签的左外边距与包含块的左边相接触，即使浮动标签也是如此。</li>
<li>BFC的区域不会与float的标签域重叠。</li>
<li>计算BFC的高度时，浮动子标签也参与计算。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里的子标签不会影响到外面标签，反之亦然。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>解决的问题:</p>
<blockquote>
<ul>
<li>外边距塌陷（只有垂直方向会发生塌陷，水平方向不会。）<br>由于BFC是一个独立的容器里面的子标签不会影响外面的标签，外面的标签也不会影响BFC内的标签。所以兄弟盒子之间垂直外边距塌陷可以给其中一个盒子套一个父盒子，把父盒子设为BFC即可。父子垂直外边距塌陷，可以把父元素设置成BFC，父级成为了一个独立区域，子标签的边距就无法塌陷到外面。为了不影响布局一般用overflow:hidden;解决外边距塌陷的问题。</li>
<li>两栏或三栏布局（这里的情况是将左边盒子或左右两边的盒子写在前面，且必须将自适应的盒子写在后面，与圣杯、双飞翼布局不同。）</li>
</ul>
<blockquote>
<ul>
<li>将左边固定宽度的盒子左浮动，右边盒子设置overflow:hidden;即可将右边盒子设置成BFC，不会覆盖左边元素，并且右边盒子不设宽度就可以实现自适应两栏布局。</li>
<li>将左右两边固定宽度的盒子左右浮动，中间盒子不设置宽度且设置overflow:hidden;即可实现三栏自适应布局。 （中间栏写在最后的情况下，还可以中间栏不设宽度，且设置左右外边距等于左右两栏的宽度，由于左右两栏浮动不占位，中间栏可以与之同行，也实现了自适应三栏布局。） </li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<h3 id="3、文本溢出显示省略号如何实现？"><a href="#3、文本溢出显示省略号如何实现？" class="headerlink" title="3、文本溢出显示省略号如何实现？"></a>3、文本溢出显示省略号如何实现？</h3><blockquote>
<p>单行文本溢出</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>
<span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*显示省略号*/</span>
<span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*文本不换行*/</span>
<span class="token punctuation">}</span></code></pre>
</blockquote>
<blockquote>
<p>多行文本溢出</p>
<blockquote>
<ul>
<li>利用wenkit的css拓展属性（只有webkit内核才有用）</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>
   <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
   <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
   <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将对象设置成弹性伸缩盒子模型显示*/</span>
   <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*用来限制在一个块元素显示的文本的行数，这是一个不规范属性，它没有出现在css规范草案中。*/</span>
   <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置伸缩盒子对象的子元素的排列方式*/</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>利用伪元素模拟溢出显示省略号的效果（兼容性比较好）<br>实现步骤:将height设置为line-height的整数倍，防止超出的文字露出。给伪元素p::after添加渐变背景，避免文字之显示一半。</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>
<span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>
<span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span><span class="token number">60</span>px<span class="token punctuation">;</span>
<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">p<span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
<span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
<span class="token property">right</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token property">content</span><span class="token punctuation">:</span><span class="token string">'...'</span><span class="token punctuation">;</span>
<span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
<span class="token property">padding-left</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-ms-linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span><span class="token function">linear-gradient</span><span class="token punctuation">(</span>left,transparent <span class="token number">0</span>,transparent <span class="token number">60%</span>,<span class="token hexcode">#fff</span> <span class="token number">60%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<h2 id="第八章-项目切图及规范"><a href="#第八章-项目切图及规范" class="headerlink" title="第八章 项目切图及规范"></a>第八章 项目切图及规范</h2><h3 id="1、为什么要初始化css样式？哪些样式需要初始化？"><a href="#1、为什么要初始化css样式？哪些样式需要初始化？" class="headerlink" title="1、为什么要初始化css样式？哪些样式需要初始化？"></a>1、为什么要初始化css样式？哪些样式需要初始化？</h3><blockquote>
<p>因为浏览器兼容问题，不同浏览器对某些标签默认的解析是不同的，如果没有对css初始化，往往会出现不同浏览器之间的页面显示差异，为了避免这种差异需要使用样式重置。<br>ul、li、dv等自带的边距，a链接的自带样式，列表自带的列表样式，em、i自带的斜体样式等。</p>
</blockquote>
<h3 id="2、display-none和visibility-hidden的区别？"><a href="#2、display-none和visibility-hidden的区别？" class="headerlink" title="2、display:none和visibility:hidden的区别？"></a>2、display:none和visibility:hidden的区别？</h3><blockquote>
<p>display:none是将元素的显示设为无，即在网页中看不见也不占位。visibility:hidden则是将元素隐藏不可见，但是元素本身宽高都存在并且占位。</p>
</blockquote>
<h3 id="3、你能想出几种方法让元素在页面中消失？"><a href="#3、你能想出几种方法让元素在页面中消失？" class="headerlink" title="3、你能想出几种方法让元素在页面中消失？"></a>3、你能想出几种方法让元素在页面中消失？</h3><blockquote>
<ul>
<li>display:none;</li>
<li>visibility:hidden;</li>
<li>position:absolute或fixed,用z-index覆盖，数值越小，越在后面，默认为0；</li>
<li>overflow:hidden;将要隐藏的元素移除父元素的范围。</li>
<li>opacity:0;将元素设置成透明。</li>
<li>将font-size,line-height,width,height设置为0;</li>
<li>transform:translate(-100%,-100%);</li>
<li>position: absolute;top: -9999px;left: -9999px;将元素移出可视区。</li>
</ul>
</blockquote>
<h3 id="4、标签应该如何合理嵌套？"><a href="#4、标签应该如何合理嵌套？" class="headerlink" title="4、标签应该如何合理嵌套？"></a>4、标签应该如何合理嵌套？</h3><blockquote>
<ul>
<li>行内标签里面不能放块级标签（a里面可以放块标签）。</li>
<li>块级标签里面可以放块级标签、行内标签、行内块标签（特殊：p、h1-h6里面不能再放块级）。</li>
<li>ul、ol和li事固定嵌套，ul、ol的直接子元素必须是li。dl和dt、dd是固定嵌套，tr和td、th是固定嵌套。</li>
<li>p标签不允许嵌套p标签，a标签不允许嵌套a标签和其他交互性元素如button。</li>
<li>尽可能地控制元素嵌套层级，不合理地嵌套会影响页面性能。</li>
</ul>
</blockquote>
<h3 id="5、简述网页中常见图片格式及特点？"><a href="#5、简述网页中常见图片格式及特点？" class="headerlink" title="5、简述网页中常见图片格式及特点？"></a>5、简述网页中常见图片格式及特点？</h3><table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">优点</th>
<th align="center">缺点</th>
<th align="center">使用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">jpg</td>
<td align="center">色彩丰富，文件小</td>
<td align="center">有损压缩，反复保存图片质量会明显下降</td>
<td align="center">色彩丰富地图片/渐变图像/照片</td>
</tr>
<tr>
<td align="center">gif</td>
<td align="center">文件小，支持动画，无兼容性问题</td>
<td align="center">只支持支持256种颜色</td>
<td align="center">色彩简单地logo/icon/动图</td>
</tr>
<tr>
<td align="center">png</td>
<td align="center">无损压缩、支持透明、简单图片尺寸小</td>
<td align="center">不支持动画，色彩丰富的图片尺寸大</td>
<td align="center">logo/icon/透明图</td>
</tr>
</tbody></table>
<h2 id="第九章-PC端项目-兼容问题"><a href="#第九章-PC端项目-兼容问题" class="headerlink" title="第九章 PC端项目-兼容问题"></a>第九章 PC端项目-兼容问题</h2><h3 id="1、说说你了解的浏览器兼容问题有哪些？"><a href="#1、说说你了解的浏览器兼容问题有哪些？" class="headerlink" title="1、说说你了解的浏览器兼容问题有哪些？"></a>1、说说你了解的浏览器兼容问题有哪些？</h3><blockquote>
<ul>
<li>图片间隙问题</li>
</ul>
<blockquote>
<ul>
<li>水平空白</li>
</ul>
<blockquote>
<ul>
<li>图片浮动</li>
<li>图片父元素设置font-size:0;</li>
</ul>
</blockquote>
<ul>
<li>垂直空白</li>
</ul>
<blockquote>
<ul>
<li>图片设置vertical-align:middle;</li>
<li>图片设置display:block;</li>
<li>图片父元素设置font-size:0;line-height:0;</li>
<li>图片浮动</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>ie中图片边框问题<br>ie中图片放在a标签中显示边框。解决方法：图片设置border:none;</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>ie8中背景复合属性写法问题<br>background:url(“images/bg.jpg”)no-repeat;在标准浏览器中均能正常显示背景图片，但是在ie中显示异常。解决方法：在url和no-repeat之间加上空格。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>其他ie低版本兼容性问题</li>
</ul>
<blockquote>
<ul>
<li>在ie6及更早版本浏览器中，定义小高度的容器。</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#test</span></span><span class="token punctuation">{</span>
<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span><span class="token number">1</span>px<span class="token punctuation">;</span>
<span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie6及更早版本浏览器下，浮动时产生双倍边距的bug。<br>解决方案:针对ie6设置该标签的display属性为inline即可。</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#test</span></span><span class="token punctuation">{</span>
<span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>
<span class="token property">_display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie7及更早版本浏览器下，子标签相对定位时，父标签overflow属性的auto|hidden失效的问题。<br>解决方案：给父标签也设置相对定位position:relative;</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie7及以下块转行内块不在一行显示的问题，解决方案如下:</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>
<span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>
*<span class="token property">display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span>
*<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置或检索对象的缩放比例，1或100%时表示不缩放，更大更小表示放大缩小，不支持负数，兼容性不好。*/</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>ie7及以下浏览器中，当li中出现浮动子元素时，li之间产生的空白间隙。<br>解决方案：将垂直对齐方式vertical设置为top/middle/bottom。</li>
</ul>
</blockquote>
</blockquote>
<h3 id="2、什么是CSSHack？"><a href="#2、什么是CSSHack？" class="headerlink" title="2、什么是CSSHack？"></a>2、什么是CSSHack？</h3><blockquote>
<p>由于不同厂商的浏览器或同一厂商不同版本的浏览器，对css的解析认识不完全一样，因此会导致生成的页面效果不一样，这时候就需要针对不同的浏览器去写不同的css，让它能同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果。</p>
</blockquote>
<h2 id="第十章-PC端项目-测试检查"><a href="#第十章-PC端项目-测试检查" class="headerlink" title="第十章 PC端项目-测试检查"></a>第十章 PC端项目-测试检查</h2><h3 id="1、在项目中你是如何做图片优化的？"><a href="#1、在项目中你是如何做图片优化的？" class="headerlink" title="1、在项目中你是如何做图片优化的？"></a>1、在项目中你是如何做图片优化的？</h3><blockquote>
<ul>
<li>使用base64编码代替图片。</li>
</ul>
<blockquote>
<p>Base64编码是一种图片处理格式，通过特定的算法将图片编码成一长串字符串，在页面上显示时，可以用该字符串来代替图片的url属性。</p>
<p>优点：</p>
<blockquote>
<ul>
<li><p>减少HTTP网络请求。网页上的图片资源如果采用http形式的url的话都会额外发送一次请求，网页发送的http请求次数越多，会造成页面加载速度越慢。采用base64格式的编码，将图片转化为字符串后，图片文件会随着html元素一并加载。这样就可以减少http请求的次数，对于网页优化时一种较好的手段。</p>
</li>
<li><p>采用base64编码的图片是随着页面一起加载的，不会造成跨域请求的问题。</p>
</li>
<li><p>没有图片，更新要重新上传，不会造成清理图片缓存的问题。</p>
</li>
</ul>
</blockquote>
<p>缺点：</p>
<blockquote>
<ul>
<li>浏览器支持问题，IE6/IE7均不支持base64编码。</li>
<li>增加了css文件的尺寸。将图片转化为base64格式编码，生成的字符串往往会大于图片源文件的大小。如果将其写在一个css文件中，这样的一个css文件大小会剧增，造成代码不可读，还会造成请求传输的数据量增加。</li>
<li>造成数据库数据量巨大。将base64编码的图片存入数据库中会造成数据库数据量增大，这样的效果还不如将图片存至图片服务器而只在数据库中存入url字段。</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>使用精灵图，减少页面请求次数。</li>
<li>在保证图片不失真的情况下合适地压缩图片。 <a href="https://tinify.cn/">https://tinify.cn/</a> </li>
<li>图片延迟加载(懒加载)：延迟加载图片或者符合某些条件时加载某些图片。</li>
<li>图片预加载：在网页全部加载之前，提前加载图片，当用户需要查看时直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。</li>
<li>使用css、svg、canvas、或iconfont代替图片。</li>
<li>根据不同的终端需求加载对应尺寸的图片。</li>
<li>根据图片特性和需求选择合适格式的图片。</li>
</ul>
</blockquote>
<h2 id="第十一章-HTML5基础"><a href="#第十一章-HTML5基础" class="headerlink" title="第十一章 HTML5基础"></a>第十一章 HTML5基础</h2><h3 id="1、HTML5有哪些新特性？"><a href="#1、HTML5有哪些新特性？" class="headerlink" title="1、HTML5有哪些新特性？"></a>1、HTML5有哪些新特性？</h3><blockquote>
<p>语义化标签、多媒体（音视频）、智能表单、canvas画布、web存储、地理定位…</p>
</blockquote>
<h3 id="2、如何处理HTML5新标签的浏览器兼容问题？"><a href="#2、如何处理HTML5新标签的浏览器兼容问题？" class="headerlink" title="2、如何处理HTML5新标签的浏览器兼容问题？"></a>2、如何处理HTML5新标签的浏览器兼容问题？</h3><blockquote>
<ul>
<li>通过js创建出新增的标签，再在css中将新增标签转为块级，才能使宽高生效。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>
header,footer</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
&lt;/style>
</code></pre>
</blockquote>
<blockquote>
<ul>
<li>使用封装好的插件html5shiv.js解决兼容性问题。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">[</span><span class="token keyword">if</span> lt ie <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"./js/html5shiv.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>endif<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">></span>
</code></pre>
</blockquote>
<h2 id="第十二章-CSS3基础"><a href="#第十二章-CSS3基础" class="headerlink" title="第十二章 CSS3基础"></a>第十二章 CSS3基础</h2><h3 id="1、css3有哪些新特性？"><a href="#1、css3有哪些新特性？" class="headerlink" title="1、css3有哪些新特性？"></a>1、css3有哪些新特性？</h3><blockquote>
<p>新增选择器、文本样式、边框属性（阴影、圆角）、多背景、变形、渐变、动画、过渡、多列布局、弹性盒布局、用户界面等等。</p>
</blockquote>
<h3 id="2、css3新增选择器有哪些？"><a href="#2、css3新增选择器有哪些？" class="headerlink" title="2、css3新增选择器有哪些？"></a>2、css3新增选择器有哪些？</h3><blockquote>
<p>属性选择器、结构伪类选择器、状态伪类选择器</p>
</blockquote>
<h2 id="第十三章-CSS3过渡、变换与动画"><a href="#第十三章-CSS3过渡、变换与动画" class="headerlink" title="第十三章 CSS3过渡、变换与动画"></a>第十三章 CSS3过渡、变换与动画</h2><h3 id="1、css3中过渡和动画的区别和各自的适用场景？"><a href="#1、css3中过渡和动画的区别和各自的适用场景？" class="headerlink" title="1、css3中过渡和动画的区别和各自的适用场景？"></a>1、css3中过渡和动画的区别和各自的适用场景？</h3><blockquote>
<ul>
<li>过渡</li>
</ul>
<blockquote>
<ul>
<li>不能自动运行，需要伪类或者js触发。</li>
<li>只有两种状态。</li>
<li>触发一次运行一次。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>动画</li>
</ul>
<blockquote>
<ul>
<li>可以自动运行。</li>
<li>可以定义多种状态。</li>
<li>可以多次或无限次运行。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<ul>
<li>适用场景</li>
</ul>
<blockquote>
<ul>
<li>如果要灵活定制多个帧以及循环，用animation。</li>
<li>如果要简单的from to效果，用transition。</li>
<li>animation与js的交互不是很紧密，如果要使用js灵活设定动画属性，用transition。</li>
</ul>
</blockquote>
</blockquote>
<h2 id="第十四章-弹性盒子和预处理"><a href="#第十四章-弹性盒子和预处理" class="headerlink" title="第十四章 弹性盒子和预处理"></a>第十四章 弹性盒子和预处理</h2><h3 id="1、解释一下CSS3的flexbox-弹性盒布局模型-以及适用场景？"><a href="#1、解释一下CSS3的flexbox-弹性盒布局模型-以及适用场景？" class="headerlink" title="1、解释一下CSS3的flexbox(弹性盒布局模型),以及适用场景？"></a>1、解释一下CSS3的flexbox(弹性盒布局模型),以及适用场景？</h3><blockquote>
<p>弹性盒模型布局是css3中的新的布局方式，把父元素设置成弹性盒容器，可以更加方便地去规定子元素地排列方式、对齐方式、剩余空间。对居中对齐，规则布局（如两栏、三栏布局）非常高效。</p>
</blockquote>
<h3 id="2、什么是less？less有什么好处？"><a href="#2、什么是less？less有什么好处？" class="headerlink" title="2、什么是less？less有什么好处？"></a>2、什么是less？less有什么好处？</h3><blockquote>
<p>定义：less是css的一种预处理语言，提供了一套新的语法，类似于编程语言，简化css代码，并且提供了一个编译器，用来把写好的less文件编译成css文件，在编译之后才能被浏览器识别使用。</p>
</blockquote>
<blockquote>
<p>优点：使css代码更简洁，适应性强，可读性好，有利于代码的维护。</p>
</blockquote>
<h2 id="第十五章-移动端项目-布局方案"><a href="#第十五章-移动端项目-布局方案" class="headerlink" title="第十五章 移动端项目-布局方案"></a>第十五章 移动端项目-布局方案</h2><h3 id="1、常见的移动端布局解决方案有哪些？原理如何？"><a href="#1、常见的移动端布局解决方案有哪些？原理如何？" class="headerlink" title="1、常见的移动端布局解决方案有哪些？原理如何？"></a>1、常见的移动端布局解决方案有哪些？原理如何？</h3><blockquote>
<p>rem布局</p>
<blockquote>
<p>rem是指相对于根元素的字体大小的单位。  </p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>原理：利用rem作为布局单位，不同设备访问页面时，通过js脚本动态计算出一个最新的font-size值设置给html标签，从而达到界面整体缩放效果。</p>
</blockquote>
</blockquote>
<blockquote>
<p>vw+rem布局</p>
<blockquote>
<p>vw是一个相对视口宽度的一个单位，视口被分为100vw。 </p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>假设750px的设备中，font-size=100px，则设置html{font-size：13.33333vm;}，然后可以直接以rem为单位布局，不需借助插件。</p>
</blockquote>
</blockquote>
<h2 id="第十六章-移动端项目-拓展知识"><a href="#第十六章-移动端项目-拓展知识" class="headerlink" title="第十六章 移动端项目-拓展知识"></a>第十六章 移动端项目-拓展知识</h2><h3 id="1、如何处理小于12px的字体？"><a href="#1、如何处理小于12px的字体？" class="headerlink" title="1、如何处理小于12px的字体？"></a>1、如何处理小于12px的字体？</h3><blockquote>
<p>将容器元素转成块级或者行内块，利用-webkit-transform:scale()属性将容器缩小，再用-webkit-transform-orign-X:left center;将变形原点靠右居中，可以使字体左对齐并居中。</p>
</blockquote>
<h2 id="第十八章-响应式布局"><a href="#第十八章-响应式布局" class="headerlink" title="第十八章 响应式布局"></a>第十八章 响应式布局</h2><h3 id="1、什么是响应式？"><a href="#1、什么是响应式？" class="headerlink" title="1、什么是响应式？"></a>1、什么是响应式？</h3><blockquote>
<p>响应式布局是在不同的设备上网页可以呈现不同的布局。一套代码可以兼容pc端、移动端。(不适应复杂网站，适合一些简单的展示网站，如企业官网、后台管理系统。)</p>
</blockquote>
<h3 id="2、响应式项目中常用到哪些核心技术？"><a href="#2、响应式项目中常用到哪些核心技术？" class="headerlink" title="2、响应式项目中常用到哪些核心技术？"></a>2、响应式项目中常用到哪些核心技术？</h3><blockquote>
<p>媒体查询</p>
<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
···
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<blockquote>
<p>百分比布局</p>
<blockquote>
<p>宽度不固定，可以使用百分比，内外边距也可以使用百分比。</p>
</blockquote>
</blockquote>
<blockquote>
<p>弹性盒布局</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">container</span><span class="token punctuation">{</span>
<span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>
<span class="token property">flex-direction</span><span class="token punctuation">:</span>row/row-reverse/column/colunm-reverse<span class="token punctuation">;</span>
<span class="token property">justify-content</span><span class="token punctuation">:</span>flex-start/flex-end/center/space-between/space-around/space-enenly<span class="token punctuation">;</span>
<span class="token property">align-items</span><span class="token punctuation">:</span>stretch/flex-start/flex-end/center/baseline<span class="token punctuation">;</span>
<span class="token property">flex-wrap</span><span class="token punctuation">:</span>nowrap/wrap/wrap-reverse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*wrap-reverse表示主轴方向向下的情况下，换行且第一行在下方*/</span>
<span class="token property">align-content</span><span class="token punctuation">:</span>stretch/flex-start/flex-end/center/space-around/space-between/space-evenly<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*表示多行项目在交叉轴上的对齐，可参考justify-content*/</span>
<span class="token punctuation">}</span>
<span class="token selector">items</span><span class="token punctuation">{</span>
<span class="token property">order</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义项目的排列顺序，数值越小，排列越靠前，默认为0*/</span>
<span class="token property">flex-grow</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义项目的放大比例，默认为0，即如果存在剩余空间也不放大。*/</span>
<span class="token property">flex-shrink</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义项目缩小比例，默认为1，即如果空间不足，该项目将缩小。*/</span>
<span class="token property">align-self</span><span class="token punctuation">:</span>auto/stretch/center/flex-start/flex-end/baseline/inherit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*定义该子项目单独在交叉轴上的对齐方式，与align-items属性作用相同，但该属性用于项目。*/</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<blockquote>
<p>响应式图片</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">{</span>
<span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*保证图片保持原始的宽高比。*/</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*为了防止图片宽度过大而使图片失真，需要用max-width属性设置图片最大宽度不超过图片原始宽度。*/</span>
<span class="token selector">img</span><span class="token punctuation">{</span>
<span class="token property">max-width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
</blockquote>
<blockquote>
<p>响应式字体</p>
<blockquote>
<p>通过rem/vw布局搭配媒体查询实现响应式字体。</p>
</blockquote>
</blockquote>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Node开发-ES6语法一</title>
    <url>/posts/cc78.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第一章-ES6语法-一"><a href="#第一章-ES6语法-一" class="headerlink" title="第一章 ES6语法 一"></a>第一章 ES6语法 一</h2><h3 id="ES5回顾"><a href="#ES5回顾" class="headerlink" title="ES5回顾"></a>ES5回顾</h3><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>定义：严格模式是指在严格的条件下运行js代码，在ECMAScript5引入，通过在脚本或函数的头部添加“use strict”来声明。    </p>
<p>好处：</p>
<ul>
<li><p>消除语法的不合理、不严谨之处，保证代码的运行安全。</p>
</li>
<li><p>提高编译器效率，增加运行速度。</p>
</li>
<li><p>为未来新版本的js做铺垫。  </p>
</li>
</ul>
<p>限制：</p>
<ul>
<li><p>不允许使用未声明的变量。</p>
</li>
<li><p>不允许对变量或函数使用delete操作符。</p>
</li>
<li><p>不允许重命名变量。</p>
</li>
<li><p>不允许使用八进制。</p>
</li>
<li><p>抛弃with语句。</p>
</li>
<li><p>不可对只读对象赋值，不可对不可配置对象使用delete操作符。</p>
</li>
<li><p>禁止this关键字指向全局对象。</p>
</li>
<li><p>不可再if内部声明函数。</p>
</li>
<li><p>不允许使用转义字符。</p>
</li>
<li><p>不允许对一个使用getter方法读取的属性进行赋值。</p>
</li>
<li><p>不允许删除一个不允许删除的属性。</p>
</li>
<li><p>变量不能使用“eval、arguments”字符串。</p>
</li>
<li><p>在作用域eval()创建的变量不能被调用。</p>
</li>
</ul>
<h4 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h4><p>JSON是一种按照JavaScript对象语法的数据格式，虽然是基于JavaScript语法，但它独立于JavaScript，这也是为什么许多程序环境能够读取和生成JSON。JSON是一个序列化的对象或者数组，它的本质是字符串。</p>
<p>JSON对象有两个方法，并且JSON通常用于服务端交换数据，分别为JSON.parse()（将JSON转为js可用数据格式）和JSON.stringify()（将js数据格式转为JSON）。</p>
<h4 id="Object拓展"><a href="#Object拓展" class="headerlink" title="Object拓展"></a>Object拓展</h4><p>ES5给Object拓展了一些静态方法，常用的有：</p>
<ul>
<li><p>Object.create(prototype[,descriptors])</p>
<p>作用：以指定对象为原型创建新的对象，为新的对象指定新的属性，并对属性进行描述。新增的属性不会加到原型上。</p>
<ul>
<li>value：指定值</li>
<li>writable：标识当前属性是否可修改，默认为false。</li>
<li>configurable：标识当前属性值是否可以被删除，默认为false。</li>
<li>enumenerable：标识当前属性是否能用for…in枚举，默认为false。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span><span class="token punctuation">{</span>
    sex<span class="token punctuation">:</span><span class="token punctuation">{</span>
        value<span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">,</span>
        writable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
person2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ sex: 'man', name: 'lisi' }</span></code></pre>
</li>
<li><p>Object.defineProperties(object,descriptors)</p>
<p>作用：为指定对象定义拓展多个属性。</p>
<ul>
<li>get：来获取当前属性值触发的回调函数。</li>
<li>set：修改当前属性值触发的回调函数，参数为修改后的值。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    firstName <span class="token punctuation">:</span> <span class="token string">'Marry'</span><span class="token punctuation">,</span>
    lastName <span class="token punctuation">:</span> <span class="token string">'LuCi'</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">{</span>
    fullName<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//在外部设置此属性的时候，会调用一次set方法</span>
            <span class="token keyword">var</span> names <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Marry LuCi</span>
person<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'L Jams'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ firstName: 'L', lastName: 'Jams' }</span></code></pre>
</li>
</ul>
<h4 id="Array数组拓展"><a href="#Array数组拓展" class="headerlink" title="Array数组拓展"></a>Array数组拓展</h4><p>数组的拓展主要体现在一些原型方法上，需要合理使用，后续框架中也会经常使用。</p>
<ul>
<li><p>Array.prototype.forEach(function(item,index){})</p>
<p>遍历数组</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//5 0</span>
<span class="token comment" spellcheck="true">//4 1</span>
<span class="token comment" spellcheck="true">//3 2</span>
<span class="token comment" spellcheck="true">//2 3</span>
<span class="token comment" spellcheck="true">//1 4</span></code></pre>
</li>
<li><p>Array.prototype.map(function(item,index){})</p>
<p>遍历数组，返回一个新数组，返回加工之后的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 11, 12, 13, 14 ]</span></code></pre>
</li>
<li><p>Array.prototype.filter(function(item,index){})</p>
<p>遍历过滤出一个新的子数组，返回条件为true的值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 1, 2 ]</span></code></pre>
</li>
</ul>
<h4 id="Function拓展"><a href="#Function拓展" class="headerlink" title="Function拓展"></a>Function拓展</h4><ul>
<li><p>Function.prototype.bind(obj)</p>
</li>
<li><p>Function.prototype.call(obj)</p>
</li>
<li><p>Function.prototype.apply(obj)</p>
<p>改变this指向，将函数内this绑定为obj，并将函数返回。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>
    age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>
    objAge<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>
    objFun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fm<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token string">'来自'</span> <span class="token operator">+</span> fm <span class="token operator">+</span> <span class="token string">"去往"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'王五'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">99</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>objFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都去往上海</span>
<span class="token comment" spellcheck="true">// 王五年龄99 来自成都, 上海去往undefined</span>

<span class="token comment" spellcheck="true">/*从上面四个结果不难看出:

bind 返回的是一个新的函数，方法后面多了个 () ，必须调用它才会被执行。

call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：

call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。

apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。

bind 除了返回是函数以外，它的参数和 call 一样。

当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！*/</span></code></pre>
</li>
</ul>
<h3 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h3><p>ECMAScript6.0（简称ES6）是JavaScript语言的下一代标准，在2015年6月正式发布。它的目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
<h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>新的变量声明方式，与var相似。</p>
<ul>
<li><p>不能变量提升</p>
</li>
<li><p>形成一个<strong>暂时性死区</strong></p>
<p>在同一个作用域内，用let声明某一个变量，那么在此声明之前的区域，称之为该变量的暂时性死区。根本原因是，let和const必须，先声明，后使用，不存在变量提升。</p>
<p>ES6明确规定，如果在区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域，凡是在声明之前就使用这些变量，就会报错。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    temp <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//该代码在temp = 2;处会报错。</span>
<span class="token comment" spellcheck="true">//因为在{}内，temp = 2下面还有一个let temp声明，temp在{}内形成了暂时性死区，所以上面的temp = 2无效，但如果没有这个声明，temp在{}是可以被访问的，因为{}内与外层还是父子作用域的关系，这个要分清楚。</span></code></pre>
</li>
<li><p>基于暂时性死区的性质，同一个块级作用域内不能重复声明，且同一个作用域内let和var不能声明同一个变量。</p>
</li>
<li><p>全局作用域中let声明的变量不会挂载到全局对象上，而var声明的变量则会。</p>
</li>
</ul>
<p>for循环中很适合用let</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeOut</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//55555</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeOut</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//01234</span></code></pre>
<p>在这个例子中，var 声明的变量i成为了一个全局变量（如果for循环在某个函数中，则i为该函数的局部变量。），在全局范围内有效，全局只存在一个变量，每次循环都会覆盖。由于for循环瞬间完成的特性，定时器是在循环完成之后执行所以i都是5。</p>
<p>let声明的i，只在当前轮循环有效，每次都是新的变量，所以定时器里的i每次都是不同的变量。（JavaScript引擎内部会记录每次变量的值。）</p>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>块级作用域中的块，就是语句块，表现形式为{}，大括号包裹的内容为语句块。</p>
<ul>
<li><p>只对let声明的变量才会有块级作用域。</p>
</li>
<li><p>if-else会形成块级作用域。</p>
</li>
<li><p>for循环小括号()内跟循环体{}是一种父子作用域的关系。</p>
</li>
<li><p>如果使用let与const，每次迭代将会创建一个新的存储空间，这可以保证作用域在迭代的内部。</p>
</li>
<li><p>块级作用域允许任意嵌套，外层作用域无法读取内层作用域的变量，内外层作用域可以声明同名变量。</p>
</li>
</ul>
<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><ul>
<li>常量声明关键字：const</li>
<li>不能变量提升</li>
<li>不能重复声明/赋值（如果是对象，可以修改对象中属性的值。）</li>
<li>具有暂时性死区特点</li>
<li>块级作用域</li>
<li>常量特有的特点<ul>
<li>只能赋值一次，不能重复赋值。</li>
<li>声明时候立马赋值。</li>
</ul>
</li>
</ul>
<p>补充：const如何做到在变量声明之后不允许改变的？其实const保证的不是变量的值不变，而是保证了变量指向的内存地址所保存的数据不允许改动。由于简单数据类型和复杂数据类型的保存值的方式不一样，简单数据类型的值保存在变量指向的内存地址，因此const声明简单数据类型变量等同于常量。而复杂数据类型，变量指向的内存地址其实是保存了一个指向实际数据的指针，所以const只能保存指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用const声明复杂数据类型时要慎重。</p>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值是对赋值运算符的拓展，针对数组或对象进行模式匹配。用于多个变量从同一个复杂数据源获取值。</p>
<h4 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h4><p>参考数组的模式一一赋值。在数组的解构中，解构目标若为可遍历对象，皆可进行解构赋值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = 2</span>
<span class="token comment" spellcheck="true">//可省略</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = 3</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 2,b = 3</span>
<span class="token comment" spellcheck="true">//不完全解构</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = undefined</span>
<span class="token comment" spellcheck="true">//可嵌套</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 1,b = 2,c = 3</span></code></pre>
<p>匹配失败时，计算就为默认值，默认值可以是具体值或表达式。匹配成功就是匹配成功的值，匹配失败才会是默认值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a = 0,b = 2</span></code></pre>
<h4 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h4><p>数组的按顺序排列，变量的值由位置决定，而对象的属性没有次序，必须与属性名相同才能取到值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span>a1<span class="token punctuation">,</span> b<span class="token punctuation">:</span>b1<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a1 = 1,b1 = 2</span>
<span class="token comment" spellcheck="true">//顺序无关</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span>b1 <span class="token punctuation">,</span>a<span class="token punctuation">:</span>a1<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a1 = 1,b1 = 2</span>
<span class="token comment" spellcheck="true">//属性值需相同</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span>a1<span class="token punctuation">,</span>d<span class="token punctuation">:</span>b1 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//undefined,undefined</span>
<span class="token comment" spellcheck="true">//可以有默认值</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span>a1<span class="token punctuation">,</span>b<span class="token punctuation">:</span>b1<span class="token punctuation">,</span>c<span class="token punctuation">:</span>c1<span class="token operator">=</span><span class="token string">'beijing'</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a1 = 1,b1 = 2,c1 = 'beijing'</span></code></pre>
<p>当变量和属性名一致时，可以简写（省略属性名和：），一般也是用简写。对象解构赋值的内部机制是先找到同名属性，然后再赋值给对应的变量，真正被赋值的是变量，而不是属性名。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//a = 1,b = 2</span></code></pre>
<p>所以有时候需要分清到底哪些是模式（属性名）哪些是变量，例如</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    s1<span class="token punctuation">:</span><span class="token punctuation">[</span>
        <span class="token string">'zs'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>s1<span class="token punctuation">:</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//name = 'zs',age = 18</span>
<span class="token comment" spellcheck="true">//这里的s1是模式而不是变量，不会被赋值</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    s1<span class="token punctuation">:</span><span class="token punctuation">[</span>
        <span class="token string">'zs'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>s1<span class="token punctuation">,</span>s1<span class="token punctuation">:</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//s1 = [ 'zs', { age: 18 } ],name = 'zs',age = 18</span>
<span class="token comment" spellcheck="true">//这里的s1就是与属性名同名的变量</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    man<span class="token punctuation">:</span><span class="token punctuation">{</span>
        student<span class="token punctuation">:</span><span class="token punctuation">{</span>
            name<span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span>
            age<span class="token punctuation">:</span><span class="token number">18</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>man<span class="token punctuation">,</span>man<span class="token punctuation">:</span><span class="token punctuation">{</span>student<span class="token punctuation">}</span><span class="token punctuation">,</span>man<span class="token punctuation">:</span><span class="token punctuation">{</span>student<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">,</span>student<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//man = { student: { name: 'zs', age: 18 } }</span>
<span class="token comment" spellcheck="true">//student = { name: 'zs', age: 18 } </span>
<span class="token comment" spellcheck="true">//name = zs,age = 18</span></code></pre>
<p>解构赋值可以解析到子对象从父对象继承来的属性，如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>age <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//18</span>
<span class="token comment" spellcheck="true">//Object.setPrototypeOf()方法设置一个指定的对象的原型（一般不建议使用）</span>
<span class="token comment" spellcheck="true">//obj1的原型对象是obj2，age属性不是obj1自身的属性，而是继承自obj2的属性，解构赋值可以取到这个值。</span></code></pre>
<p>注意：如果要将一个已经声明的变量用于解构赋值，需要非常小心。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">;</span>
<span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'zs'</span> <span class="token punctuation">}</span></code></pre>
<p>以上写法不合理，因为JavaScript引擎会将{ name }解释成代码块，从而发生语法错误，可以写成如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//圆括号虽然在此处有助于解析，但是也有许多情况滥用圆括号导致歧义，ES6的规则是，只要有可能导致歧义，就不得使用圆括号。</span></code></pre>
<p>解构赋值允许等号左边的模式不放任何变量名，虽然没有意义但是语法合法。</p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">:</span> a<span class="token punctuation">,</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token function">console</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1,3</span></code></pre>
<p>对数组进行对象解构，键名分别是0，1，2，方括号的写法属于“属性名表达式”，深究另行查找。</p>
<h4 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h4><p>字符串可以进行解构赋值，这时字符串被转换成一个类似数组的对象，类似数组的对象都有一个length属性，也可以进行解构赋值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>length <span class="token punctuation">:</span> len<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">'hello'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//a = 'h'</span>
<span class="token comment" spellcheck="true">//b = 'e'</span>
<span class="token comment" spellcheck="true">//c = 'l'</span>
<span class="token comment" spellcheck="true">//d = 'l'</span>
<span class="token comment" spellcheck="true">//e = 'o'</span>
<span class="token comment" spellcheck="true">//len = 5</span></code></pre>
<h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4><p>数值和布尔值进行解构赋值时，会先转成对象，数值和布尔值包装成对象都有toString属性。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>toString <span class="token punctuation">:</span> a<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>toString <span class="token punctuation">:</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> Number<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">===</span> Boolean<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true</span></code></pre>
<h3 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>模板字符串是增强版的字符串，用反引号(``)标识，除了作为普通字符串，还可以用来定义多行字符串，通过${}在字符串中加入变量和表达式。中间可以使用转义字符，模板字符串中的换行和空格都是会被保留的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`he</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">llo\nworld`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//he123llo</span>
<span class="token comment" spellcheck="true">//world</span></code></pre>
<h4 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h4><p>标签模板是函数调用的一种特殊形式，调用的参数是模板字符串。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span>log<span class="token template-string"><span class="token string">`hi`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 'hi' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 'hi' ]</span></code></pre>
<p>如果模板字符串里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数再调用函数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
fun<span class="token template-string"><span class="token string">`a</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">c`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Arguments] { '0': [ 'a', 'c' ], '1': 'b' }</span>
<span class="token comment" spellcheck="true">//等同于</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Arguments] { '0': [ 'a', 'c' ], '1': 'b' }</span></code></pre>
<h3 id="函数拓展"><a href="#函数拓展" class="headerlink" title="函数拓展"></a>函数拓展</h3><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><ul>
<li><p>在es6之前，不能直接为函数参数指定默认值，es6中允许为函数的参数传递默认值，在未传递参数或者参数未undefined时，才会使用默认参数，需要注意，null值是被认为有效的值传递。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//es6之前</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    x <span class="token operator">=</span> x <span class="token operator">||</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//es6</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</li>
<li><p>函数使用默认参数时，该函数不允许有与默认参数同名的参数。</p>
</li>
<li><p>函数参数默认值存在暂时性死区，在函数参数默认值表达式中，还未初始化的参数值无法作为其他参数的默认值。</p>
</li>
</ul>
<p>函数默认值与解构赋值结合使用</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined 5</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//TypeError   没有实参会报错</span>

<span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined 5</span></code></pre>
<p>函数参数设置默认值之后，具有以下特点：</p>
<ul>
<li><p><strong>函数的length属性</strong></p>
<p>函数的length属性返回该函数预期传入的参数个数，不包括设置默认值的参数，某个参数指定默认值后，预期传入的参数就不包括这个参数了。</p>
</li>
<li><p><strong>默认值参数形成单独作用域。</strong></p>
<p>函数参数设置了默认值之后，函数进行声明初始化时，参数会形成一个单独的作用域，等到初始化结束，这个作用域就会消失。这种语法在不设置参数默认值时，是不会出现的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>y <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>
<span class="token comment" spellcheck="true">//参数y的默认值等于变量x，函数调用时，参数形成一个单独的作用域，在这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x，函数调用时，函数体内部的局部变量x不影响默认值变量。</span></code></pre>
</li>
</ul>
<p>参数默认值应用：</p>
<p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Missing parameter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>mustBeProvided <span class="token operator">=</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Error:Minssing parameter</span>
<span class="token comment" spellcheck="true">//当参数没有赋值时，默认参数是一个函数调用，该函数被执行抛出错误。</span></code></pre>
<h4 id="不定参数-rest参数"><a href="#不定参数-rest参数" class="headerlink" title="不定参数/rest参数"></a>不定参数/rest参数</h4><p>不定参数用来表示不确定参数，由…加上一个具名参数标识符组成，<strong>只能放在参数组的最后，且只有一个</strong>。</p>
<p>rest参数在一定程度上代替了arguments，他们的区别是，<strong>argumens对象不是数组，而是一个类似数组的对象</strong>，所以它要使用数组的方法，必须使用Array.prototype.silce.call将其转为数组。rest参数是一个真正的数组，数组特有的方法他都可以使用。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>item<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+</span><span class="token operator">=</span>item<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//15</span></code></pre>
<p><strong>箭头函数中没有arguments。</strong></p>
<p><strong>函数的length属性不包含rest参数。</strong></p>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>基本语法：参数 =&gt; 函数体</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//等价于</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li><p>当箭头函数没有参数或者有多个参数的时候，要用（）括起来。</p>
</li>
<li><p>当箭头函数有多行语句，函数体要用{}包裹起来表示代码块，当只有一行语句，并且需要返回值时，可以省略{}，结果会自动返回。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span></code></pre>
</li>
<li><p>当箭头函数要返回对象的时候，为了区分代码块，要用（）将对象包裹起来，否则会报错。</p>
</li>
<li><p>箭头函数中没有this、super、arguments和new.target绑定。</p>
</li>
<li><p>箭头函数不改变this指向，箭头函数中的this与父级this指向一样。</p>
</li>
</ul>
<h3 id="数组拓展"><a href="#数组拓展" class="headerlink" title="数组拓展"></a>数组拓展</h3><h4 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h4><p>在数组中…是拓展运算符，它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span></code></pre>
<p>拓展运算符与正常的函数参数结合使用，位置不固定。拓展运算符后面还可以放置表达式，如果拓展运算符后面是一个空数组，则不产生任何效果。只有函数调用时，拓展运算符才能放在圆括号中，否则会报错。</p>
<h4 id="拓展运算符的应用"><a href="#拓展运算符的应用" class="headerlink" title="拓展运算符的应用"></a>拓展运算符的应用</h4><ul>
<li><h5 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//方法一</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span>
<span class="token comment" spellcheck="true">//方法二</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre>
<p>…拓展运算符复制一维数组属于深拷贝，但是它只实现一层拷贝，不能实现多层深拷贝。如果是多维数组，里面的嵌套数组依然是指针指向。下面的合并数组也是如此。</p>
</li>
<li><h5 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h5><p>拓展运算符提供了数组合并的新写法。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

arr3<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5,6]</span>

arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3,4,5,6]</span></code></pre>
</li>
<li><h5 id="与解构赋值结合"><a href="#与解构赋值结合" class="headerlink" title="与解构赋值结合"></a>与解构赋值结合</h5><p>拓展运算符与解构赋值结合起来，用于生成数组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span><span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1  [2,3,4,5]</span></code></pre>
<p>如果将拓展运算符用于数组赋值，则只能放在参数的最后一位，否则会报错。</p>
</li>
<li><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>拓展运算符还可以将字符串转为真正的数组。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 'h', 'e', 'l', 'l', 'o' ]</span></code></pre>
<p>上面的写法有一个重要的好处，能够正确识别四个字节的Unicode字符。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a\uD83D\uDE80b'</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'a\uD83D\uDE80b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span></code></pre>
<p>凡是涉及到操作四个字节的Unicode字符的函数，都有这个问题，因此最好都用拓展运算符改写。</p>
</li>
<li><h5 id="实现了Iterator接口的数据类型转为真正数组"><a href="#实现了Iterator接口的数据类型转为真正数组" class="headerlink" title="实现了Iterator接口的数据类型转为真正数组"></a>实现了Iterator接口的数据类型转为真正数组</h5><p>所有实现了Iterator接口的数据类型都可以采用拓展运算符将其转为真正的数组，比如map数据。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre>
</li>
</ul>
<p>ES6语法学习资料大多来自如下，致谢：</p>
<ul>
<li>阮一峰《ECMAScript6入门教程》<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li>
<li>菜鸟教程<a href="https://www.runoob.com/w3cnote/es6-tutorial.html">https://www.runoob.com/w3cnote/es6-tutorial.html</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Node开发-ES6语法二</title>
    <url>/posts/a979.html</url>
    <content><![CDATA[<h1 id="Node开发学习笔记"><a href="#Node开发学习笔记" class="headerlink" title="Node开发学习笔记"></a>Node开发学习笔记</h1><h2 id="第二章-ES6语法二"><a href="#第二章-ES6语法二" class="headerlink" title="第二章 ES6语法二"></a>第二章 ES6语法二</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set对象允许存储任何类型的唯一值，无论是原始值或者是对象引用。</p>
<h4 id="Set和Map中的特殊值"><a href="#Set和Map中的特殊值" class="headerlink" title="Set和Map中的特殊值"></a>Set和Map中的特殊值</h4><p>Set对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待：</p>
<ul>
<li>+0与-0在存储判断唯一性的时候是恒等的，所以不会同时存在。</li>
<li>undefined与undefined是恒等的，所以不会同时存在。</li>
<li>NaN与NaN是不恒等的，但是在Set中只能存在一个，不会同时存在。</li>
</ul>
<h4 id="Set类型转换"><a href="#Set类型转换" class="headerlink" title="Set类型转换"></a>Set类型转换</h4><ul>
<li><h5 id="Array转Set"><a href="#Array转Set" class="headerlink" title="Array转Set"></a>Array转Set</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1, 'a', {}, [ 2, 3 ] }</span></code></pre>
</li>
<li><h5 id="Set转Array"><a href="#Set转Array" class="headerlink" title="Set转Array"></a>Set转Array</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ 1, 'a', {}, [ 2, 3 ] ]</span></code></pre>
</li>
<li><h5 id="String转Set"><a href="#String转Set" class="headerlink" title="String转Set"></a>String转Set</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 'h', 'e', 'l', 'o' }</span></code></pre>
</li>
</ul>
<h4 id="Set实例的属性"><a href="#Set实例的属性" class="headerlink" title="Set实例的属性"></a>Set实例的属性</h4><ul>
<li>Set.prototype.constructor：构造函数。默认是Set函数。</li>
<li>Set.prototype.size：返回Set实例的总成员数。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Function: Set]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span></code></pre>
<h4 id="Set实例的方法"><a href="#Set实例的方法" class="headerlink" title="Set实例的方法"></a>Set实例的方法</h4><p>Set实例的方法分为两大类：操作方法（操作数据）和遍历方法（遍历成员）</p>
<h5 id="操作方法："><a href="#操作方法：" class="headerlink" title="操作方法："></a>操作方法：</h5><ul>
<li>Set.prototype.add(value)：添加某个值，返回原Set本身。</li>
<li>Set.prototype.delete(value)：删除某个元素，返回一个布尔值，表示是否删除成功。</li>
<li>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</li>
<li>Set.prototype.clear()：清除所有成员，没有返回值。</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1, 2, 'a', 'b', 'c' }</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1, 'a', 'b', 'c' }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set {}</span></code></pre>
<h5 id="遍历方法："><a href="#遍历方法：" class="headerlink" title="遍历方法："></a>遍历方法：</h5><ul>
<li>Set.prototype.keys()：返回键名的遍历器。</li>
<li>Set.prototype.values()：返回值的遍历器。</li>
<li>Set.prototype.entries()：返回键值对的遍历器，同时包括键名和键值。</li>
<li>Set.prototype.forEach()：使用回调函数遍历每个成员。</li>
</ul>
<p>由于Set结构没有键名只有键值（或者说键名键值是同一个值），所以keys方法和values方法的行为完全一致。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Set Iterator] { 'a', 'b', 'c' }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Set Iterator] { 'a', 'b', 'c' }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[Set Entries] { [ 'a', 'a' ], [ 'b', 'b' ], [ 'c', 'c' ] }</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//a b c</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//a b c</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//[ 'a', 'a' ]</span>
<span class="token comment" spellcheck="true">//[ 'b', 'b' ]</span>
<span class="token comment" spellcheck="true">//[ 'c', 'c' ]</span></code></pre>
<p>Set结构的实例默认可以遍历，它的默认遍历器生成函数就是它的values()方法。这意味着可以省略values方法，<strong>直接用for…of循环遍历Set</strong>。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//a b c</span></code></pre>
<p>Set与数组一样，也可以使用forEach方法进行遍历，但与数组不同的是，Set没有索引值，所以它的第一第二两个参数的值相同。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//4 4</span>
<span class="token comment" spellcheck="true">//3 3</span>
<span class="token comment" spellcheck="true">//2 2</span>
<span class="token comment" spellcheck="true">//1 1</span></code></pre>
<h4 id="Set对象作用"><a href="#Set对象作用" class="headerlink" title="Set对象作用"></a>Set对象作用</h4><ul>
<li><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1,2,3,4,5]</span>
</code></pre>
</li>
<li><h5 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> nuion <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span><span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>union<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 3, 4 }</span>
</code></pre>
</li>
<li><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set { 1 }</span>
</code></pre>
</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>JavaScript对象本质上是键值对的集合（Hash结构），但是传统上只能用作字符串当作键，限制太大。</p>
<p>为了解决这个问题，ES6提供了Map数据结构，类似于对象，也是键值对的集合，但是“”键</p>
<p>的范围不限于字符串，各种类型的值都可以当作键，是一种更完善的Hash结构实现。</p>
<p>Map中的键也有特殊值，与Set一样，-0与+0、undefined、NaN。</p>
<h4 id="Map和Object的区别"><a href="#Map和Object的区别" class="headerlink" title="Map和Object的区别"></a>Map和Object的区别</h4><ul>
<li>一个Object的键只能时字符串或者Symbol，但是一个Map的键可以是任意值。</li>
<li>Map中的键值是有序的（FIFO原则），而添加到对象中的键则不是。</li>
<li>Map的键值对个数可以从size属性获取，而Object的键值对个数只能手动计算。</li>
<li>Object都有自己的原型，原型链上的键名有可能和对象上的设置的键名产生冲突。</li>
</ul>
<h4 id="Map属性和方法"><a href="#Map属性和方法" class="headerlink" title="Map属性和方法"></a>Map属性和方法</h4><ul>
<li><p>size属性</p>
<p>该属性返回Map结构的成员总数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token punctuation">,</span> <span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span>
</code></pre>
</li>
<li><p>Map.prototype.set(key,value)</p>
<p>set()方法设置/修改键值对成员并返回整个Map结构。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token punctuation">,</span> <span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18 }</span>
</code></pre>
<p>set()返回的是当前Map对象，因此可以采用链式写法。</p>
</li>
<li><p>Map.prototype.get(key)</p>
<p>get()方法读取key对应的键值，如果找不到key就返回undefined。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//zs</span>
</code></pre>
</li>
<li><p>Map.prototype.has(key)</p>
<p>has()方法返回一个布尔值，表示某个键是否在当前Map对象中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
</li>
<li><p>Map.prototype.delete(key)</p>
<p>delete()方法删除某个键，返回true，如果删除失败，返回false。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs' }</span>
map<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map {}</span>
</code></pre>
</li>
<li><p>Map.prototype.clear()</p>
<p>clear()方法清除所有成员，没有返回值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>
map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>
</code></pre>
</li>
</ul>
<h4 id="Map遍历方法"><a href="#Map遍历方法" class="headerlink" title="Map遍历方法"></a>Map遍历方法</h4><ul>
<li>Map.prototype.key()：返回键名的遍历器</li>
<li>Map.prototype.values()：返回键值的遍历器</li>
<li>Map.prototype.entries()：返回所有成员的遍历器</li>
<li>Map.prototype.forEach()：遍历Map的所有成员</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//name age</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//zs 18</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//['name','zs']</span>
<span class="token comment" spellcheck="true">//['age',18]</span>
</code></pre>
<p>Map的forEach()方法与数组和Set的forEach()方法类似，实现遍历如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//zs name</span>
<span class="token comment" spellcheck="true">//18 age</span>
</code></pre>
<h4 id="Map与其他数据结构的相互转换"><a href="#Map与其他数据结构的相互转换" class="headerlink" title="Map与其他数据结构的相互转换"></a>Map与其他数据结构的相互转换</h4><h5 id="Map转为数组"><a href="#Map转为数组" class="headerlink" title="Map转为数组"></a>Map转为数组</h5><p>Map转为数组最方便的方法就是使用拓展运算符（…）</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[ [ 'name', 'zs' ], [ 'age', 18 ] ]</span>
</code></pre>
<h5 id="数组转为Map"><a href="#数组转为Map" class="headerlink" title="数组转为Map"></a>数组转为Map</h5><p>将数组以参数传入Map构造函数，就可以将数组转为Map。注意：这里的数组也必须是类似键值对形式，否则键值为undefined。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18, 'abc' => undefined }</span>
</code></pre>
<h5 id="Map转为对象"><a href="#Map转为对象" class="headerlink" title="Map转为对象"></a>Map转为对象</h5><p>如果所有Map的键都是字符串，它可以无损地转为对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ name: 'zs', age: 18 }</span>
</code></pre>
<p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p>
<h5 id="对象转为Map"><a href="#对象转为Map" class="headerlink" title="对象转为Map"></a>对象转为Map</h5><p>对象转为Map可以通过Object.entries()。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'a' => 1, 'b' => 2 }</span>
</code></pre>
<p>也可以通过函数转换：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">objToMap</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">objToMap</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18 }</span>
</code></pre>
<h5 id="Map转为JSON"><a href="#Map转为JSON" class="headerlink" title="Map转为JSON"></a>Map转为JSON</h5><p>Map转为JSON要区分两种情况，一种情况是Map的键名都是字符串，这时可以选择转为对象JSON。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mapToStrJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapToStrJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[["name","zs"],[{"age":18},["abc"]]]</span>
</code></pre>
<p>另一种情况是，Map的键名有非字符串，这时可以选择转为数组JSON。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mapToArrayJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mapToArrayJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[["name","zs"],["age",18]]</span>
</code></pre>
<h5 id="JSON转为Map"><a href="#JSON转为Map" class="headerlink" title="JSON转为Map"></a>JSON转为Map</h5><p>这也分两种情况，键名都是字符串。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">objToMap</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">jsonToStrMap</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">objToMap</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">jsonToStrMap</span><span class="token punctuation">(</span><span class="token string">'{"name":"zs","age":18}'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Map { 'name' => 'zs', 'age' => 18 }</span>
</code></pre>
<p>另一种情况，整个JSON就是一个数组，且每个数组成员本身又是一个有两个成员的数组，这时，它可以一一对应地转为Map，这往往是Map转为数组JSON的逆操作。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">jsonToMap</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">jsonToMap</span><span class="token punctuation">(</span><span class="token string">'[["abc",123],[{"name":"zs"},["beijing"]]]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//Map { 'abc' => 123, { name: 'zs' } => [ 'beijing' ] }</span>
</code></pre>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，最大的用法是用来定义属性的唯一属性名。</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>Symbol函数栈不能使用new命令，因为Symbol是原始数据类型，不是对象，可以接受一个字符串作为参数，为新创建的Symbol提供描述，用来显示在控制台或者作为字符串的时候使用，便于区分。</p>
<p>Symbol函数的参数只是表示对当前Symbol值的描述，因此相同的参数Symbol函数返回值是不相等的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Symbol(name)</span>

<span class="token keyword">let</span> s1<span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//相同的参数，返回值不相等。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
</code></pre>
<p><strong>作为属性名使用，可以保证属性不重名。</strong></p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">'zs'</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ [Symbol(name)]: 'zs' }</span>
</code></pre>
<p>Symbol作为对象属性名时不能用.运算符，要用方括号，因为**.运算符后面是字符串**，所以取到的是字符串s属性，而不是Symbol值s属性。</p>
<p>因为点运算符后面总是字符串，所以当以点运算符的方式将Symbol值作为对象的属性名时，以[]使用该属性需要加上引号，如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{ s: abc}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//abc</span>
</code></pre>
<p>注意：Symbol值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问，但是不会出现在for…in，for…of的循环中，也不会被Object.keys()、Object.getOwnPropertyNames()返回。如果读取到一个对象的Symbol属性，可以通过Object.getOwnPropertySymbols()和Reflect.ownKeys()取到。</p>
<blockquote>
<ul>
<li>Object.keys()方法返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</li>
<li>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</li>
<li>Object.getOwnPropertySymbols()方法返回一个给定对象自身的所有Symbol属性的数组。</li>
<li>Reflect.ownKeys()静态方法返回一个由目标对象自身的属性键组成的数组，返回值等同于：Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</li>
</ul>
</blockquote>
<p><strong>Symbol类型还可以用于定义一组常量，保证这组常量的值都是不相等的。</strong>因此，可以保证switch语句按照预想的方式执行。</p>
<h4 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for()"></a>Symbol.for()</h4><p>用Symbol.for()创建一个Symbol数据时，首先会在全局搜索被登记的Symbol中是否有该字符串参数作为名称的Symbol值，如果有即返回该Symbol值，没有则新建并返回一个以该字符串为名称的Symbol值，并登记在全局环境中供搜索。而Symbol()方法生成的值不会登记在全局环境中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">===</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
<h4 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor()"></a>Symbol.keyFor()</h4><p>Symbol.keyFor()返回一个已登记的Symbol类型值得key，用来检测该字符串参数作为名称得Symbol值是否已经被等级。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'sym'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sym</span>
</code></pre>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise是一种异步解决方案，解决了回调地狱的问题，比传统的回调函数有更好的语义化。一开始由社区提出，es6中将其写进标准语法，原生提供了Promise对象。</p>
<h4 id="Promise对象有以下两个特点："><a href="#Promise对象有以下两个特点：" class="headerlink" title="Promise对象有以下两个特点："></a>Promise对象有以下两个特点：</h4><ul>
<li><p>对象的状态不受外界影响。</p>
<p>Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfiled（已成功）、rejected（已失败）。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>
</li>
<li><p>状态变化后无法改变，任何时候都可以得到这个结果。Promise对象状态的改变只有两种：从pending变为fulfilled或rejected。状态变为fulfilled或rejected之后就不会改变，会一直保持这个结果，称为resolved。与事件不同，事件错过了之后再去监听得不到结果，但是Promise而言，改变发生之后就一直存在，对Promise对象添加回调函数也能立刻得到这个结果。</p>
</li>
</ul>
<p>有了Promise对象就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数，此外，Promise对象提供统一接口，使得控制异步操作更加容易。</p>
<h4 id="Promise的缺点："><a href="#Promise的缺点：" class="headerlink" title="Promise的缺点："></a>Promise的缺点：</h4><ul>
<li>无法取消Promise，一旦新建它就会立即执行，无法中途取消。</li>
<li>如果不设置回调函数，Promise内部抛出错误，不会反应到外部（不会影响整个程序进行），可以理解为Promise会吃掉（其运行期间的）异常（不能吃编译期异常）。</li>
<li>当处于pending状态时，无法得知目前进展到哪一阶段。</li>
</ul>
<h4 id="Promise状态变更的控制"><a href="#Promise状态变更的控制" class="headerlink" title="Promise状态变更的控制"></a>Promise状态变更的控制</h4><ul>
<li>new Promise的时候，状态为pending。</li>
<li>当执行resolve（），状态由pending变为fulfilled。</li>
<li>当执行reject（），状态由pending变为rejected。</li>
</ul>
<h4 id="Promise基本用法"><a href="#Promise基本用法" class="headerlink" title="Promise基本用法"></a>Promise基本用法</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*异步操作成功*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Promise构造函数接收一个函数作为参数，该函数的两个参数分别是resolve、reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p>
<p>resolve函数的作用是将Promise对象状态从pending变为resolved，在异步操作成功时调用，并将异步操作的结果作为参数传出去，传给then的第一个参数函数的的形参。</p>
<p>reject函数的作用是将Promise对象的状态从pending变为rejected，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去，传给then第二个参数函数的形参或者catch的参数函数的形参。</p>
<h4 id="then-方法"><a href="#then-方法" class="headerlink" title="then()方法"></a>then()方法</h4><p>Promise.prototype.then()，then方法是定义在原型对象Promise.prototype上的，它的作用是为Promise实例添加状态改变时的回调函数。then()方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即then()方法后面再调用另一个then方法。</p>
<p>Promise实例生成之后，可以用then方法指定resolved状态和rejected状态的回调函数。第一个回调函数时Promise对象的状态变为resolved时调用，第二个回调函数时Promise对象的状态变为rejected时调用。两个函数只有一个会被调用，其中，第二个函数是可选的，不一定要提供。</p>
<pre class=" language-js"><code class="language-js">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="catch-方法"><a href="#catch-方法" class="headerlink" title="catch()方法"></a>catch()方法</h4><p>Promise.prototype.catch()方法是.then(null,reject)或.then(undefined,rejected)的别名，用于指定发生错误时的回调函数。reject()方法的作用，等同于try{throw new Error()}抛出异常。</p>
<p>Promise对象错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。即错误总是会被下一个catch语句捕获。</p>
<p>一般来说，不要在then()方法里面定义reject状态的回调函数（即then的第二个参数），总是使用catch方法捕获错误。</p>
<p>与传统的try/catch代码块不同的是，如果没有使用catch（）方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码，不会影响到Promise外部的代码，简单来说是“Promise会吃掉错误”。</p>
<p>一般总是建议，Promise对象后面要跟catch()方法，这样可以处理Promise内部发生的错误，catch()方法返回的还是一个Promise对象，因此后面还可以接着调用then()方法（或catch方法）。如果没有报错，则会跳过catch()方法。</p>
<h4 id="finally-方法"><a href="#finally-方法" class="headerlink" title="finally()方法"></a>finally()方法</h4><p>Promise.prototype.finally()方法用于指定Promise对象最后状态如何，都会执行的操作，该方法是ES2018引入的标准。finally()方法其实是then()方法的特例，即不管resolved和rejected都调用finally中的方法。</p>
<h4 id="多个异步的协调问题"><a href="#多个异步的协调问题" class="headerlink" title="多个异步的协调问题"></a>多个异步的协调问题</h4><p>除了传统的回调地狱之外，Promise提供了以下方法。</p>
<h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h5><p>用于将多个Promise实例包装成一个新的Promise实例。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>该方法接收一个数组作为参数，数组的值都是Promise实例，如果不是，就会先调用Promise.resolve方法，将参数转为Promise实例，再进一步处理，另外，Promise.all()方法的参数可以不是数组，但是必须有Iterator接口，且返回的每个成员都是Promise实例，</p>
<p>p的状态由p1、p2、p3决定，分成两种情况。</p>
<ul>
<li>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li>
<li>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值会传递给p的回调函数。</li>
</ul>
<h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h5><p>promise.race()方法同样是将多个Promise实例，包装成一个新的Promise实例。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>与Promise.all()一样，接收一个数组作为参数，如果数组值不是Promise实例，就会调用Promise.resolve()方法，将参数转为Promise实例。</p>
<p>只要p1、p2、p3之中有一个实例的状态改变，p的状态就跟着改变，那个率先改变状态的Promise实例的返回值，就传递给p的回调函数。</p>
<p>除了以上两种方法之外还有Promsie.allSettled和Promise.any方法，但这两种方法兼容性不优。</p>
<h4 id="Promise总结"><a href="#Promise总结" class="headerlink" title="Promise总结"></a>Promise总结</h4><p>Promise用来解决异步回调问题，由于js是单线程的，很多异步方法都是依靠回调方法实现的，这种做法在逻辑上比较复杂的回调嵌套中会相当复杂，也叫回调地狱。Promise用来将这种繁琐的做法简化，让程序更具备可读性，可维护性。</p>
<p>Promise内部由三种状态：pending、fulfilled、rejected，分别表示程序正在执行但未得到结果即异步操作没有执行完毕、程序执行完毕且成功、程序执行完毕但失败。这里的成功和失败都是逻辑意义上的，并非是要报错。</p>
<p>其实，Promise和回调函数一样，都是要解决数据的传递和消息发送问题，Promise中的then一般对应成功后的数据处理，catch一般对应失败后的数据处理。</p>
<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator是一种统一的接口机制，来处理所有不同的表示“集合”的数据结构，如Array、Object、Map、Set等。任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p>
<h4 id="Iterator的作用："><a href="#Iterator的作用：" class="headerlink" title="Iterator的作用："></a>Iterator的作用：</h4><ul>
<li>为数据结构提供一个统一的、简便的访问接口。</li>
<li>使得数据结构的成员能按某种次序排列。</li>
<li>ES6创建了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。（意味着for…of是Iterator接口的上层表现形式，我们在使用for…of的遍历集合的时候，底层运行逻辑为遍历部署了iteraor接口的集合。）</li>
</ul>
<h4 id="Iterator遍历过程："><a href="#Iterator遍历过程：" class="headerlink" title="Iterator遍历过程："></a>Iterator遍历过程：</h4><ul>
<li>创建一个指针对象，指向当前数据结构的起始位置，也就是说，遍历器对象本质上就是一个指针对象。</li>
<li>第一次调用指针对象的next()方法，可以将指针指向数据结构的第一个成员。</li>
<li>第二次调用指针对象的next()方法，指针就指向数据结构的第二个成员。</li>
<li>不断调用next()方法，直到它指向数据结构的结束位置。</li>
</ul>
<p>每次调用next()方法，都会返回数据结构的当前成员的信息。具体来说就是返回一个包含value和done两个属性的对象。其中value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。</p>
<h4 id="默认Iterator接口"><a href="#默认Iterator接口" class="headerlink" title="默认Iterator接口"></a>默认Iterator接口</h4><p>ES6规定，默认的Iterator接口部署在数据结构的Symbol.iterator属性，或者说，一个属性只要具有Symbol.iterator属性，就认为是“可遍历的”。Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名Symbol.iterator，它是一个表达式，返回Symbol对象的iterator属性，这是一个与定义好的，类型为Symbol的特殊值。</p>
<p>凡是原生具备Iterator接口的数据结构，不用任何处理就可以被for…of循环遍历。原生具备Iterator接口的数据结构包括Array、Map、Set、String、TypedArray、函数的arguments对象、NodeList对象。</p>
<h3 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h3><p>一个数据结构只要部署了Symbol.iterator属性，就可以用for…of循环遍历它的成员。</p>
<p>解构赋值时，会默认调用Symbol.iterator方法。</p>
<p>拓展运算符（…）也会默认的iterator接口。</p>
<p>yield* 后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</p>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>Generator函数是es6提供的一种异步编程解决方案，通过yield关键字把函数的执行流挂起，为改变执行流程提供了可能，语法行为与传统函数完全不同。</p>
<p>Generator函数可以理解成一个状态机，封装了多个内部状态。另外，它还是一个遍历器对象生成函数，执行Generator函数会返回一个遍历器对象，可以依次遍历Gnerator函数内部的每个状态。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li>在function后面，函数名之前有个*，用来表示函数是Generator函数；</li>
<li>函数内部有yelid表达式，用来定义函数内部的状态。</li>
</ul>
<h4 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h4><p>调用Generator函数和调用普通函数一样，在函数名后面加上（）即可，但是Generator函数不会像普通函数一样立即执行，而返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator的next()方法，指针就会从函数头部或者上一次停下来的地方开始执行。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//222</span>
    <span class="token keyword">let</span> p2 <span class="token operator">=</span>  <span class="token keyword">yield</span> <span class="token number">2000</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//333</span>
    <span class="token keyword">yield</span> <span class="token number">3000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: 1000, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: 2000, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: 3000, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object { value: undefined, done: true }</span>
</code></pre>
<p>调用Generator函数，返回一个遍历器对象，代表Generator函数的内部指针。以后每次调用遍历器对象的next方法，就会返回一个存着有value和done两个属性的对象。value表示当前的内部状态值，是yield表达式后面的表达式的值；done属性是一个布尔值，表示遍历是否结束。</p>
<h4 id="yield表达式"><a href="#yield表达式" class="headerlink" title="yield表达式"></a>yield表达式</h4><p>由于Generator函数返回的遍历器对象，只有调用next()方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数，yield表达式就是暂停标志。</p>
<p>运行逻辑如下：</p>
<ul>
<li>遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。</li>
<li>下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。</li>
<li>如果没有遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。</li>
<li>如果没有return语句，则返回的对象的value属性值为undefined。</li>
</ul>
<h4 id="next方法的参数"><a href="#next方法的参数" class="headerlink" title="next方法的参数"></a>next方法的参数</h4><p>yield表达式本身没有返回值，或者说她的返回值是undefined。next()方法可以带一个参数，该参数就是上一个yield的表达式的返回值。</p>
<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p>async函数其实就是Generator函数的语法糖，它使得异步操作更加方便。</p>
<p>async函数就是将Generator函数的*替换成async，将yield替换成await。</p>
<p>async函数返回一个Promise对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>
<h4 id="async函数对Generator函数的改进"><a href="#async函数对Generator函数的改进" class="headerlink" title="async函数对Generator函数的改进"></a>async函数对Generator函数的改进</h4><ul>
<li><p>内置执行器</p>
<p>Generator函数的执行必须以考执行器（next()），而async函数自带执行器，与普通函数一样，调用即执行。</p>
</li>
<li><p>更好的语义</p>
<p>async和await比起*和yield，语义更清楚。</p>
</li>
<li><p>更广的适用性</p>
<p>co模块约定，yield命令后面只能是Thunk函数或者Promise对象，而async和await命令后面，可以是Promise对象和原始类型的值（数值、字符串</p>
<p>布尔值，但这时会自动转成立即resolved的Promise对象）。</p>
</li>
<li><p>返回值是Promsie</p>
<p>async函数的返回值是Promise，而Generator函数的返回值是Iterator对象，这样更方便使用then方法指定下一步的操作。</p>
</li>
</ul>
<p>进一步说，async函数完全可以看作多个异步操作，包装成的一个Promise对象，而await命令就是内部then命令的语法糖。</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><ul>
<li><p>async函数返回一个Promise对象。</p>
</li>
<li><p>async函数内部return语句返回的值，会成为then方法回调函数的参数。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'hello world'</span>
</code></pre>
</li>
<li><p>async函数内部抛出错误，会导致返回的Promsie对象变为reject状态。抛出的错误对象会被catch方法回调函数收到。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//error!</span>
</code></pre>
</li>
</ul>
<h4 id="await命令"><a href="#await命令" class="headerlink" title="await命令"></a>await命令</h4><p>正常情况下，await命令后面是一个promise对象，返回该对象的结果。如果不是Promise对象，就直接返回对应的值。</p>
<p>如果await命令后面是一个thenable对象（即定义了then方法的对象），那么await会将其等同于Promise对象。比如Sleep对象的实例。</p>
<p>await命令后面的promise对象如果变为reject状态，则reject参数会被catch方法的回调函数接收到。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//error!</span>
</code></pre>
<p>任何一个await语句后面的Promise对象变为reject状态，那么async函数都会中断执行。</p>
<p><strong>所以，最好把await命令放在try…catch语句中，这样不管这个异步操作是否成功，第二个await都会执行。如果有多个await命令，可以统一放在try…catch结构中。</strong></p>
<p><strong>多个await命令后面的异步操作如果不存在继发关系，最好让他们同时触发，这样可以缩短程序的执行时间。</strong>比如：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">p1Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">p2Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//p1和p2互不依赖，可以让他们同时触发，可以写成如下：</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">p1Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">p2Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//或者</span>
<span class="token keyword">let</span> p1Promise <span class="token operator">=</span> <span class="token function">p1Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p2Promise <span class="token operator">=</span> <span class="token function">p2Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">await</span> p1Promise<span class="token punctuation">;</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">await</span> p2Promise<span class="token punctuation">;</span>
</code></pre>
<p>如果确实希望多个请求并发执行，可以使用Promise.all方法，如上面第二种方法。</p>
<p>await命令只能在async函数之中，如果用在普通函数，就会报错。</p>
<p>async函数会保留运行栈。</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//由于b()是异步任务，b()运行结束时，a()可能早就结束了，b()所在的上下文环境已经消失了。如果b()，c()报错，错误栈将不包括a()。</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//如果是async函数，b()运行的时候，a()只是暂停执行，上下文环境都保存这，b()，c()报错，错误栈会包括a()。</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>ES6语法学习资料大多来自如下，致谢：</p>
<ul>
<li>阮一峰《ECMAScript6入门教程》<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li>
<li>菜鸟教程<a href="https://www.runoob.com/w3cnote/es6-tutorial.html">https://www.runoob.com/w3cnote/es6-tutorial.html</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
